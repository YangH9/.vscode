/**
 * Module dependencies
 */
import { SyncOrAsync } from '../shared';
import { ELoggerLevel } from '../logger';
export declare enum EAppxElementType {
    App = "App",
    Page = "Page",
    Component = "Component"
}
export declare enum EAppxPluginType {
    Plugin = "Plugin"
}
export declare enum EAppxElementAtomType {
    axml = "axml",
    script = "script",
    style = "style",
    config = "config"
}
export interface IAppxElementCommonContext {
    /**
     * Alias of scriptPath.
     */
    path: string;
}
export interface IAppxViewElementBase {
    /**
     * *.axml
     */
    [EAppxElementAtomType.axml]: string;
    /**
     * usingComponents
     */
    usingComponents: IAppxComponentElement[];
}
/**
 * Page context.
 */
export interface IAppxPageContext extends IAppxElementCommonContext {
    pagePath: string;
}
/**
 * Component context.
 */
export interface IAppxComponentContext extends IAppxElementCommonContext {
    is: string;
}
/**
 * Some typings to descibre the files of mini program.
 */
export interface IAppxBaseElement extends IAppxElementCommonContext {
    /**
     * Element type.
     */
    type: EAppxElementType;
    /**
     * Absolute path but without extname.
     * @example /path/to/pages/foo-bar/index
     */
    pathKey: string;
    /**
     * *.{js,ts}
     * @example /path/to/pages/foo-bar/index.js
     * @example /path/to/pages/foo-bar/index.ts
     */
    [EAppxElementAtomType.script]: string;
    /**
     * *.{json}
     * @example /path/to/pages/foo-bar/index.json
     */
    [EAppxElementAtomType.config]: string;
    /**
     * *.{acss}
     * @example /path/to/pages/foo-bar/index.acss
     */
    [EAppxElementAtomType.style]: string;
    /**
     * Name of directory.
     * @example foo-bar
     */
    name: string;
    /**
     * Key, PascalCased name.
     * @example FooBar
     */
    key: string;
    /**
     * Relative path.
     * @example pages/foo-bar
     */
    relative: string;
    /**
     * Absolute path of directory.
     * @example /path/to/pages/foo-bar
     */
    dirname: string;
    /**
     * A map to store the content of atom file.
     */
    _fileContents: Partial<Record<EAppxElementAtomType, string>>;
    /**
     * Check existence of a file.
     */
    existsSync(file: EAppxElementAtomType): boolean;
    /**
     * Retrieve file content.
     */
    fileContent(file: EAppxElementAtomType, encoding?: string): Promise<string>;
    /**
     * Store sizes of source code.
     * sequence: [config, axml, script, style]
     */
    _sourceCodeSizes: number[];
    /**
     * Get source code size of current element.
     * sequence: [config, axml, script, style]
     */
    getSourceCodeSizes(): Promise<number[]>;
    /**
     * Store sizes of total source code.
     */
    _totalSourceCodeSize: number;
    /**
     * Get total source code size of current element. (With children).
     */
    getTotalSourceCodeSize(): Promise<number>;
}
export interface IAppxAppElement extends IAppxBaseElement {
    type: EAppxElementType.App;
    pages: IAppxPageElement[];
}
export interface IAppxPluginElement {
    type: EAppxPluginType.Plugin;
    pages: IAppxPageElement[];
}
export interface IAppxPageElement extends IAppxBaseElement, IAppxPageContext, IAppxViewElementBase {
    type: EAppxElementType.Page;
}
export interface IAppxComponentElement extends IAppxBaseElement, IAppxComponentContext, IAppxViewElementBase {
    type: EAppxElementType.Component;
    /**
     * Whether this component comes from node_modules.
     */
    fromNodeModules: boolean;
    /**
     * Alias name under usingComponents config.
     */
    componentName?: string;
    /**
     * Store refs, for source components.
     */
    refs?: Array<{
        element: IAppxComponentElement | IAppxPageElement;
        instance: IAppxComponentElement;
    }>;
    /**
     * Store parent element, for component instances.
     */
    parentElement: IAppxPageElement | IAppxComponentElement;
}
export declare type IAppxElement = IAppxAppElement | IAppxPageElement | IAppxComponentElement;
export interface IAppxProjectOptions {
    typescript?: boolean;
    less?: boolean;
    traverseUnusedComponents?: boolean;
}
export interface IAppxProject {
    /**
     * Root of mini program.
     */
    miniprogramRoot: string;
    /**
     * Set options
     */
    setOptions(opts: Partial<IAppxProjectOptions>): void;
    /**
     * Language of script entry, avaiable extename: .js,.ts.
     */
    scriptExtname: string;
    /**
     * App element
     */
    app: IAppxAppElement;
    /**
     * App pages
     */
    pages: IAppxPageElement[];
    /**
     * Plugin pages
     */
    pluginPages: IAppxPageElement[];
    /**
     * All component instances.
     */
    components: IAppxComponentElement[];
    /**
     * Usd components.
     */
    usedComponents: IAppxComponentElement[];
    /**
     * Ununsed components.
     */
    unusedComponents: IAppxComponentElement[];
    /**
     * All resolved components.
     */
    allComponents: IAppxComponentElement[];
    /**
     * All component instances.
     */
    pluginComponents: IAppxComponentElement[];
    /**
     * Usd components.
     */
    pluginUsedComponents: IAppxComponentElement[];
    /**
     * Ununsed components.
     */
    pluginUnusedComponents: IAppxComponentElement[];
    /**
     * All resolved components.
     */
    allPluginComponents: IAppxComponentElement[];
    /**
     * Get components only under source directory, exclude `node_modules`.
     */
    getComponentsUnderProject(): IAppxComponentElement[];
    /**
     * Traverse project.
     */
    traverse(logLevel?: ELoggerLevel): Promise<void>;
    /**
     * Traverse size.
     */
    traverseSize(): Promise<void>;
    /**
     * Check if a absolute path is the entry of app (e.g. app.js)
     */
    isAppEntry(path: string): boolean;
    /**
     * Check if a absolute path is the entry of a page common appx project (e.g. pages/*\/index.js)
     */
    isPageEntry(path: string): boolean;
    /**
     * Check if a absolute path is the entry of a page in appx plugin project (e.g. pages/*\/index.js)
     */
    isPluginPageEntry(path: string): boolean;
    /**
     * Check if a absolute path is the entry of a component (e.g. components/*\/index.js)
     */
    isComponentEntry(path: string): SyncOrAsync<boolean>;
    /**
     * Check if a absolute path is the entry of a page in appx plugin project (e.g. pages/*\/index.js)
     */
    isPluginComponentEntry(path: string): SyncOrAsync<boolean>;
    /**
     * Restore to intial state.
     */
    restore(): this;
}
//# sourceMappingURL=project.d.ts.map