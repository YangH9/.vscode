export declare enum ELoggerLevel {
    silent = 0,
    error = 1,
    warn = 2,
    info = 3,
    debug = 4
}
export interface ILoggerOptions {
    logLevel?: ELoggerLevel;
    debug?: boolean;
}
export declare type ILoggerElement = any;
export interface ILoggerBase {
    options: ILoggerOptions;
    prefix: string;
    setOptions(options: ILoggerOptions): void;
    useLogLevel(logLevel: ELoggerLevel, fn: Function): void;
    getLogArgsWithPrefix(args: ILoggerElement[]): ILoggerElement[];
}
export interface ILogger extends ILoggerBase {
    debug(...args: ILoggerElement[]): void;
    success(...args: ILoggerElement[]): void;
    tip(...args: ILoggerElement[]): void;
    info(...args: ILoggerElement[]): void;
    log(...args: ILoggerElement[]): void;
    status(color: string, label: string, ...args: ILoggerElement[]): void;
    warn(...args: ILoggerElement[]): void;
    error(...args: ILoggerElement[]): void;
}
//# sourceMappingURL=logger.d.ts.map