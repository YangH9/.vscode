/**
 * A type to describe a generic type returned directly or a function.
 */
export declare type Functional<T> = T | (() => T);
/**
 * A type to describe a generic type returned directly or by a promise.
 */
export declare type SyncOrAsync<T> = T | Promise<T>;
/**
 * A record with string as key but we do not know the type of value
 */
export declare type PlainRecord<T = any> = Record<string, T>;
/**
 * A record with string as key and value.
 */
export declare type StringRecord = Record<string, string>;
/**
 * Get values of a array.
 *
 * e.g.
 *
 *  declare var x: [1, 2];
 *  type Foo = ValuesOf<typeof x>;
 *
 * The type of Foo will be: `1 | 2`;
 *
 * Note that you need use `declare var x: ...` syntax here.
 */
export declare type ValuesOf<T extends any[]> = T[number];
/**
 * A simple interface to describe `package.json`
 */
export interface IPackageJson {
    name: string;
    description: string;
    scripts: Record<string, string>;
    dependencies: Record<string, string>;
    devDependencies: Record<string, string>;
}
//# sourceMappingURL=index.d.ts.map