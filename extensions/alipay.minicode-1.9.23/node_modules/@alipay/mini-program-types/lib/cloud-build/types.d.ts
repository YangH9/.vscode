import { IAppJson, ITabBarJson, IAppConfigJson } from '../runtime';
import { IParsedMiniProjectJson } from '../config';
import { IBasePackageInfo } from './package';
import { EPackageType, ICompileMode, IRemoteConfig } from './options';
/**
 * 云构建任务的模式
 */
export declare enum ECloudBuildMode {
    Build = "build",
    BuildPush = "buildpush",
    Push = "push"
}
/**
 * 云构建任务的状态
 */
export declare enum ECloudBuildStatus {
    Building = "BUILDING",
    Pushing = "PUSHING",
    Complete = "COMPLETE",
    PushComplete = "PUSHCOMPLETE",
    BuildCancel = "BUILDCANCEL",
    PushCancel = "PUSHCANCEL"
}
export interface ICloudBuildPluginConfig {
    key: string;
    options?: unknown;
}
/**
 * 创建云构建任务参数
 */
export interface ICreateCloudBuildTaskOptions {
    /**
     * 小程序包文件（本地路径或 http 地址）
     */
    filePath: string;
    /**
     * 小程序插件包文件（本地路径或 http 地址）
     */
    pluginFilePath?: string;
    /**
     * 小程序分包文件（本地路径或 http 地址）
     */
    subPackagesFilePath?: {
        type: 'MAIN' | 'SUB';
        path: string;
        filePath: string;
    }[];
    /**
     * 用户 userId（DEBUG 包必填）
     */
    userId?: string;
    /**
     * 云构建类型
     */
    buildMode: ECloudBuildMode;
    /**
     * 云构建的环境变量
     */
    buildEnv?: Record<string, string>;
    /**
     * 云构建插件及参数
     */
    buildPlugins?: ICloudBuildPluginConfig[];
    /**
     * 云构建扩展字段
     */
    extraInfo?: Record<string, unknown>;
    /**
     * 开放平台需要的小程序包基础参数
     */
    packageInfo?: IBasePackageInfo;
    /**
     * 额外的构建参数的 Map
     */
    buildArgs?: Record<string, unknown>;
    /**
     * 序列化命令函参数
     */
    argsSerializer?: (args: Record<string, any>) => string[];
}
export interface ISubPackageResult {
    type: 'MAIN' | 'SUB';
    path: string;
    size: number;
    tarFilePath: string;
    gzipFilePath?: string;
}
export interface ICloudBuildData {
    sourceUrl: string;
    artifactUrl: string;
    components: string[];
    packageQrcode?: string;
    packageSchema?: string;
    plugin?: {
        artifactUrl: string;
        artifactSize: number;
    };
    size: number;
    subPackages: ISubPackageResult[];
    zipFile: string;
    deployVersion?: string;
}
export interface ICloudPackagePushOptions {
    /**
     * 小程序 appId
     */
    appId: string;
    /**
     * 用户 userId（DEBUG 包必填）
     */
    userId?: string;
    /**
     * 小程序包文件（本地路径或 http 地址）
     */
    tarFile: string;
    /**
     * 小程序插件包文件（本地路径或 http 地址）
     */
    pluginTarFile?: string;
    /**
     * 小程序分包文件（本地路径或 http 地址）
     */
    subPackagesTarFile?: {
        type: 'MAIN' | 'SUB';
        path: string;
        filePath: string;
    }[];
    /**
     * 包类型（DEBUG | INSPECT）
     */
    packageType?: EPackageType;
    /**
     * 包信息
     */
    packageInfo: IBasePackageInfo;
    /**
     * 云构建额外参数
     */
    extraInfo?: any;
    /**
     * 云构建插件及参数
     */
    buildPlugins?: ICloudBuildPluginConfig[];
    /**
     * 是否开启跨环境推包
     */
    enableCrossEnvPackageSync?: boolean;
    /**
     * 推包任务创建成功
     */
    pushTaskCreated?(taskId: string): Promise<void>;
    /**
     * 每次任务轮询开始执行前
     */
    beforeEachPoll?(count: number): Promise<void>;
}
/**
 * @deprecated
 */
export interface IAlipayPushOptions extends ICloudPackagePushOptions {
}
export interface IPushResult {
    /**
     * 构建是否成功
     */
    success: boolean;
    /**
     * 云构建任务 id
     */
    taskId?: string;
    /**
     * 包二维码 url（如果推送的话）
     */
    packageQrcode?: string;
    /**
     * 包二维码 schema（如果推送的话)
     */
    packageSchema?: string;
    /**
     * 云构建原始任务结果
     */
    raw?: ICloudBuildData;
    /**
     * 错误信息
     */
    errorMessage?: string;
    /**
     * traceId 快速推包有 traceId
     */
    traceId?: string;
}
export interface IGetBaseLaunchParamsOptions {
    appJson: IAppJson;
    appConfigJson?: IAppConfigJson;
    tabBarJson?: ITabBarJson;
    isAppxNg?: boolean;
    isCube?: boolean;
    cubeTarget?: 'cube' | 'shared';
    ignoreAppxRouteParams?: boolean;
    ngOutputPath?: string;
    nativeBundlePath?: string;
    extraLaunchParams?: Record<string, unknown>;
}
export interface IGetDebugLaunchParamsOptions extends IGetBaseLaunchParamsOptions {
    compileMode?: ICompileMode;
    remoteConfig?: IRemoteConfig;
    components?: string[];
    isPerformanceBuild?: boolean;
}
export interface IGetBasePackageInfoOptions extends IGetBaseLaunchParamsOptions {
    appId: string;
    clientType?: string;
    preloadConfig?: any;
    projectConfig?: IParsedMiniProjectJson;
    extraParamMap?: Record<string, any>;
}
export interface IGetDebugPackageInfoOptions extends IGetBasePackageInfoOptions, IGetDebugLaunchParamsOptions {
    packageType?: EPackageType;
    enableSync?: boolean;
    projectConfig?: IParsedMiniProjectJson;
}
export interface IQuickPushParamsOptions {
    taskId: string;
    scene?: EPackageType;
    syncToOffline?: boolean;
}
export interface IQuickPushDebugPlugin {
    provider: string;
    version: string;
}
export interface IQuickPushRemoteDebugOrPreviewOptions {
    channelId?: string;
    tyroId?: string;
    isRemoteX?: boolean;
    ignoreWebViewDomainCheck?: boolean;
    ignoreHttpReqPermission?: boolean;
}
export interface IQuickPushByHostAppVersionParamsOptions {
    appId: string;
    version: string;
    scene: EPackageType;
    syncToOffline?: boolean;
    debugPlugins?: IQuickPushDebugPlugin[];
    remoteDebugOrPreviewOptions?: IQuickPushRemoteDebugOrPreviewOptions;
}
export interface IGetBaseExtendInfoParamMapOptions {
    projectConfig?: IParsedMiniProjectJson;
    appJson: IAppJson;
    extraParamMap?: Record<string, any>;
}
//# sourceMappingURL=types.d.ts.map