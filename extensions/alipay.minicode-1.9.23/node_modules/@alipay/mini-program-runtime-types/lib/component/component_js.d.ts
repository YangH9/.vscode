/**
 * Module dependencies
 */
import { RecursivePartialAndDynamic } from '@alipay/generic-types';
import { UnknownRecord, TProgramType } from '../shared';
import { IPageEvents } from '../page';
/**
 * component\/*\/index.js Component(options) 中 options 的内部类型
 * ref: https://opendocs.alipay.com/mini/framework/component_object
 */
export interface IComponentOptions<Data, Props, Methods, ExtraOptions extends UnknownRecord> {
    /**
     * 组件内部状态
     */
    data: Data | (() => Data);
    /**
     * 为外部传入的数据设置默认值
     */
    props: Props;
    /**
     * 组件生命周期函数，组件创建时触发
     * @version 1.14.0+
     */
    onInit(): void;
    /**
     * 组件生命周期函数，组件创建时和更新前触发
     *  @version 1.14.0+
     */
    deriveDataFromProps(nextProps: Partial<Props>): void;
    /**
     * 组件生命周期函数，组件创建完毕时触发
     */
    didMount(): void;
    /**
     * 组件生命周期函数，组件更新完毕时触发
     */
    didUpdate(prevProps: Partial<Props>, prevData: Partial<Data>): void;
    /**
     * 组件生命周期函数，组件删除时触发
     */
    didUnmount(): void;
    /**
     * 组件间代码复用机制
     */
    mixins: [];
    /**
     * 组件的方法，可以是事件响应函数或任意的自定义方法
     * Object of Functions
     */
    methods: Methods;
    /**
     * 指定组件被ref引用时的返回值
     * @version 1.18.0+
     */
    ref(): void;
    /**
     * 监听所属页面的事件
     */
    pageEvents: Partial<IPageEvents>;
}
declare type TComponentInstanceAdditionalProperties<ExtraOptions extends UnknownRecord, PType extends TProgramType = 'app'> = PType extends 'app' ? IComponentInstanceAdditionalProperties<ExtraOptions> : IPluginComponentInstanceAdditionalProperties<ExtraOptions>;
/**
 * Additional properties in Component instance, for module augmentation
 */
export interface IComponentInstanceAdditionalProperties<ExtraOptions extends UnknownRecord> {
}
/**
 * Additional properties in Plugin Component instance, for module augmentation
 */
export interface IPluginComponentInstanceAdditionalProperties<ExtraOptions extends UnknownRecord> {
}
/**
 * Public instance
 */
export declare type IComponentInstance<Data, Props, Methods, ExtraThis, ExtraOptions extends UnknownRecord, PType extends TProgramType = 'app'> = {
    data: RecursivePartialAndDynamic<Data>;
    props: Readonly<RecursivePartialAndDynamic<Props>>;
} & Methods & ExtraThis & Omit<ExtraOptions, keyof IComponentOptions<Data, Props, Methods, ExtraOptions>> & TComponentInstanceAdditionalProperties<ExtraOptions, PType> & {
    /**
     * 组件路径
     */
    readonly is: string;
    /**
     * 组件 id，可直接在组件 axml 中渲染值
     */
    readonly $id: number;
    /**
     * 组件所属页面实例
     */
    readonly $page: Record<string, any>;
    /**
     * 将数据从逻辑层发送到视图层
     * @param data
     * @param callback
     */
    setData(data: RecursivePartialAndDynamic<Data> & Record<string, unknown>, callback?: () => void): void;
    /**
     * $spliceData 同样用于将数据从逻辑层发送到视图层，但是相比于 setData，在处理长列表的时候，其具有更高的性能。
     * @param data
     * @param callback
     * @version 1.7.2+ 可以使用 my.canIUse('page.$spliceData') 做兼容性处理
     */
    $spliceData(data: RecursivePartialAndDynamic<Data> & Record<string, unknown>, callback: () => void): void;
};
/**
* 用户可配置的 Component Options
*/
export declare type IUserComponentOptions<Data, Props, Methods, ExtraThis, ExtraOptions extends UnknownRecord, PType extends TProgramType = 'app'> = {
    [P in keyof ExtraOptions]: P extends keyof IComponentOptions<Data, Props, Methods, ExtraOptions> ? unknown : ExtraOptions[P];
} & Partial<IComponentOptions<Data, Props, Methods, ExtraOptions>> & ThisType<IComponentInstance<Data, Props, Methods, ExtraThis, ExtraOptions, PType>>;
/**
* Component 的类型
*/
export interface IComponent<Data, Props, Methods, ExtraThis, ExtraOptions extends UnknownRecord> {
    (opts: IUserComponentOptions<Data, Props, Methods, ExtraThis, ExtraOptions>): any;
}
export {};
//# sourceMappingURL=component_js.d.ts.map