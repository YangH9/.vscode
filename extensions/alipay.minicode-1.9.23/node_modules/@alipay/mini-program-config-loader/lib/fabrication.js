"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveDebugPlugins = exports.isUsingPlugins = exports.getAllPlugins = exports.getFirstPage = exports.isTabBarEnabledViaTabBarJson = exports.isTabBarEnabled = void 0;
/**
 * 根据 app.json 内容判断是否开启 tabBar
 *
 * @param appJson app.json 内容
 * @param firstPage 首页路径
 */
function isTabBarEnabled(appJson, firstPage) {
    if (!appJson.tabBar || !appJson.tabBar.items || !firstPage) {
        return false;
    }
    // eslint-disable-next-line
    return appJson.tabBar.items.filter(function (item) { return item.pagePath === firstPage; }).length > 0;
}
exports.isTabBarEnabled = isTabBarEnabled;
/**
 * 根据 tabBar.json 内容判断是否开启 tabBar
 *
 * @param tabBarJson tabBar.json 内容
 * @param firstPage 首页路径
 */
function isTabBarEnabledViaTabBarJson(tabBarJson, firstPage) {
    if (!Array.isArray(tabBarJson === null || tabBarJson === void 0 ? void 0 : tabBarJson.items) || !firstPage) {
        return false;
    }
    return Boolean(tabBarJson.items.find(function (item) { return item.tag === firstPage; }));
}
exports.isTabBarEnabledViaTabBarJson = isTabBarEnabledViaTabBarJson;
/**
 * 获取小程序首页
 *
 * @param appJson app.json 内容
 * @param appConfigJson 产物 appConfig.json 内容
 */
function getFirstPage(appJson, appConfigJson) {
    if (appConfigJson === null || appConfigJson === void 0 ? void 0 : appConfigJson.entryPagePath) {
        return appConfigJson.entryPagePath;
    }
    var pages = appJson.pages || [];
    return pages[0];
}
exports.getFirstPage = getFirstPage;
/**
 * 获取小程序引用的所有静态插件
 *
 * @param appJson app.json 内容
 * @param appId 小程序 appId
 */
function getAllPlugins(appJson, appId) {
    var dedup = new Set();
    var allPluginsConfig = [];
    // 根据 appid (provider) 去重
    var append = function (plugin) {
        var before = dedup.size;
        if (plugin.provider === '{{currentPluginId}}' && appId) {
            plugin.provider = appId; // 特殊值替换为选中的 pluginId
        }
        dedup.add(plugin.provider);
        if (dedup.size > before) {
            allPluginsConfig.push(plugin);
        }
    };
    // eslint-disable-next-line
    var getPlugins = function (config) {
        if (config === void 0) { config = {}; }
        var plugins = config.plugins || {};
        return Object.keys(plugins).map(function (k) { return plugins[k]; });
    };
    getPlugins(appJson).forEach(append); // 主包引用的插件
    if (appJson.subPackages) {
        for (var _i = 0, _a = appJson.subPackages; _i < _a.length; _i++) {
            var sub = _a[_i];
            getPlugins(sub).forEach(append); // 各个分包引用的插件
        }
    }
    return allPluginsConfig;
}
exports.getAllPlugins = getAllPlugins;
/**
 * 小程序是否引用了插件
 *
 * @param appJson app.json 内容
 */
function isUsingPlugins(appJson) {
    return !!(appJson === null || appJson === void 0 ? void 0 : appJson.useDynamicPlugins) || !!(appJson === null || appJson === void 0 ? void 0 : appJson.plugins);
}
exports.isUsingPlugins = isUsingPlugins;
/*
 * 解析联调插件:
 * - 把联调插件从 debugPlugins 中读出来后和 pluginList 合并
 * - 合并时只取 pluginList 中存在插件的联调配置
 * - DEBUG 版本的插件版本号为 dev:a.b.c.d，INSPECT 版本的插件版本号为 inspect:a.b.c.d
 */
function resolveDebugPlugins(debugPlugins, pluginList) {
    debugPlugins = debugPlugins || {};
    pluginList = pluginList || [];
    var debugPluginList = [];
    for (var _i = 0, pluginList_1 = pluginList; _i < pluginList_1.length; _i++) {
        var plugin = pluginList_1[_i];
        var debugPlugin = debugPlugins[plugin.pluginId];
        if (debugPlugin) {
            // 有联调配置时使用联调版本
            var version = debugPlugin.version;
            if (version.startsWith('dev:') || version.startsWith('inspect:')) {
                // 加入联调插件信息
                debugPluginList.push({ pluginId: plugin.pluginId, version: version, lazy: plugin.lazy });
            }
            else {
                throw new Error("Debug config for plugin ".concat(plugin.pluginId, " invalid: ")
                    + "version `".concat(version, "` is not valid, should start with `dev:` or `inspect:`"));
            }
        }
        else {
            // 没有联调配置使用原版
            debugPluginList.push(plugin);
        }
    }
    return debugPluginList;
}
exports.resolveDebugPlugins = resolveDebugPlugins;
//# sourceMappingURL=fabrication.js.map