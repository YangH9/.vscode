"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MiniProjectJson = void 0;
require("reflect-metadata");
var mini_program_types_1 = require("@alipay/mini-program-types");
var lodash_get_1 = __importDefault(require("lodash.get"));
var lodash_set_1 = __importDefault(require("lodash.set"));
var twoWayMappingV2MetadataKey = Symbol('twoWayMappingV2');
function setMetaData(metaKey, metaValue) {
    return function mapKeyDecorator(target, propertyKey) {
        return Reflect.defineMetadata(metaKey, metaValue || propertyKey.toString(), target.constructor, propertyKey);
    };
}
// v2 key 双向绑定
function mapV2(metaValue) {
    return setMetaData(twoWayMappingV2MetadataKey, metaValue);
}
// 获取 v2 双向绑定 key
function getMappingKeyV2(target, propertyKey) {
    return Reflect.getMetadata(twoWayMappingV2MetadataKey, target, propertyKey);
}
function getBuildTargetForConfig(_a) {
    var compileOptions = _a.compileOptions;
    if (compileOptions === null || compileOptions === void 0 ? void 0 : compileOptions.downgradeToLegacyWeb) {
        return;
    }
    if (!(compileOptions === null || compileOptions === void 0 ? void 0 : compileOptions.buildTarget) || (compileOptions === null || compileOptions === void 0 ? void 0 : compileOptions.buildTarget) === 'web') {
        return true;
    }
}
function getEnableParallelLoaderForConfig(_a) {
    var developOptions = _a.developOptions;
    if (developOptions === null || developOptions === void 0 ? void 0 : developOptions.disableParallel) {
        return false;
    }
}
function getEnableParallelLoaderForV2(v2Config, config) {
    if (config.enableParallelLoader === false) {
        (0, lodash_set_1.default)(v2Config, 'developOptions.disableParallel', true);
    }
}
var MiniProjectJson = /** @class */ (function () {
    function MiniProjectJson() {
    }
    Object.defineProperty(MiniProjectJson.prototype, "format", {
        get: function () {
            return this._rawConfig.format || 1;
        },
        enumerable: false,
        configurable: true
    });
    // v1 直来直往
    MiniProjectJson.fromV1 = function (config) {
        // 如果version 不对就不加载了
        if (config.format && config.format !== 1) {
            return {};
        }
        return JSON.parse(JSON.stringify(config));
    };
    MiniProjectJson.fromV2 = function (config) {
        var specConfig = {
            format: 2,
        };
        for (var _i = 0, _a = MiniProjectJson.getKeys(); _i < _a.length; _i++) {
            var key = _a[_i];
            var mappedKeyOrFn = getMappingKeyV2(MiniProjectJson, key);
            if (!mappedKeyOrFn) {
                continue;
            }
            var val = void 0;
            if (typeof mappedKeyOrFn === 'string') {
                val = (0, lodash_get_1.default)(config, mappedKeyOrFn);
            }
            else if (mappedKeyOrFn.fromV2 && typeof mappedKeyOrFn.fromV2 === 'function') {
                val = mappedKeyOrFn.fromV2(config);
            }
            if (val !== undefined) {
                specConfig[key] = val;
            }
        }
        return specConfig;
    };
    // v1 直来直往
    MiniProjectJson.toV1 = function (config) {
        if (config.format === 2) {
            throw new Error('cannot transform to mini.project.json format 1');
        }
        return JSON.parse(JSON.stringify(config));
    };
    MiniProjectJson.toV2 = function (config) {
        var v2Config = {
            format: 2,
        };
        var allowKeys = MiniProjectJson.getKeys();
        for (var _i = 0, allowKeys_1 = allowKeys; _i < allowKeys_1.length; _i++) {
            var key = allowKeys_1[_i];
            var mappedKeyOrFn = getMappingKeyV2(MiniProjectJson, key);
            if (!mappedKeyOrFn) {
                if (config[key] !== undefined) {
                    (0, lodash_set_1.default)(v2Config, ['unsupportedConfig', key], config[key]);
                }
                continue;
            }
            if (typeof mappedKeyOrFn === 'string') {
                if (config[key] !== undefined) {
                    (0, lodash_set_1.default)(v2Config, mappedKeyOrFn, config[key]);
                }
            }
            else if (mappedKeyOrFn.setToV2 && typeof mappedKeyOrFn.setToV2 === 'function') {
                mappedKeyOrFn.setToV2(v2Config, config);
            }
        }
        // 还要在处理一下 getKeys 中未申明的用户配置
        var specialKeys = ['format', 'node_modules_es6_whitelist'];
        for (var key in config) {
            if (allowKeys.includes(key) || specialKeys.includes(key)) {
                continue;
            }
            if (Object.prototype.hasOwnProperty.call(config, key)) {
                (0, lodash_set_1.default)(v2Config, ['unsupportedConfig', key], config[key]);
            }
        }
        return v2Config;
    };
    MiniProjectJson.fromFileContent = function (config) {
        return config.format === 2 ? MiniProjectJson.fromV2(config) : MiniProjectJson.fromV1(config);
    };
    MiniProjectJson.toFileContent = function (config) {
        return config.format === 2 ? MiniProjectJson.toV2(config) : MiniProjectJson.toV1(config);
    };
    MiniProjectJson.getKeys = function () {
        return [
            // 'format',
            'enableAppxNg',
            'enableEnhancedBuild',
            'enableHMR',
            'component2',
            'axmlStrictCheck',
            'nonLoadingIndicator',
            'enableParallelLoader',
            'enableDistFileMinify',
            'enableNodeModuleBabelTransform',
            'uniBuild',
            'miniprogramRoot',
            'pluginRoot',
            'componentRoot',
            'compileType',
            'compileSPMDataset',
            'scripts',
            'include',
            'exclude',
            'enableCube',
            'enableUnibuildAndAppxngComplexBundle',
            'debugOptions',
            'experimental',
            'node_modules_es6_whitelist',
            'compatible',
            'cloud',
            'serverlessRoot',
            'compileOptionsLess',
            'compileOptionsTypescript',
            'developOptionsDisableSourcemap',
            'webViewOptions',
            'unsupportedConfig',
        ];
    };
    __decorate([
        mapV2({
            fromV2: getBuildTargetForConfig,
        }),
        __metadata("design:type", Object)
    ], MiniProjectJson.prototype, "enableAppxNg", void 0);
    __decorate([
        mapV2({
            fromV2: getBuildTargetForConfig,
        }),
        __metadata("design:type", Boolean)
    ], MiniProjectJson.prototype, "uniBuild", void 0);
    __decorate([
        mapV2({
            fromV2: getBuildTargetForConfig,
        }),
        __metadata("design:type", Boolean)
    ], MiniProjectJson.prototype, "enableUnibuildAndAppxngComplexBundle", void 0);
    __decorate([
        mapV2('developOptions.hotReload'),
        __metadata("design:type", Boolean)
    ], MiniProjectJson.prototype, "enableHMR", void 0);
    __decorate([
        mapV2('compileOptions.component2'),
        __metadata("design:type", Boolean)
    ], MiniProjectJson.prototype, "component2", void 0);
    __decorate([
        mapV2('compileOptions.nonLoadingIndicator'),
        __metadata("design:type", Boolean)
    ], MiniProjectJson.prototype, "nonLoadingIndicator", void 0);
    __decorate([
        mapV2({
            fromV2: getEnableParallelLoaderForConfig,
            setToV2: getEnableParallelLoaderForV2,
        }),
        __metadata("design:type", Boolean)
    ], MiniProjectJson.prototype, "enableParallelLoader", void 0);
    __decorate([
        mapV2('compileOptions.enableNodeModuleBabelTransform'),
        __metadata("design:type", Boolean)
    ], MiniProjectJson.prototype, "enableNodeModuleBabelTransform", void 0);
    __decorate([
        mapV2(),
        __metadata("design:type", String)
    ], MiniProjectJson.prototype, "miniprogramRoot", void 0);
    __decorate([
        mapV2(),
        __metadata("design:type", String)
    ], MiniProjectJson.prototype, "pluginRoot", void 0);
    __decorate([
        mapV2(),
        __metadata("design:type", String)
    ], MiniProjectJson.prototype, "componentRoot", void 0);
    __decorate([
        mapV2(),
        __metadata("design:type", String)
    ], MiniProjectJson.prototype, "compileType", void 0);
    __decorate([
        mapV2('compileOptions.compileSPMDataset'),
        __metadata("design:type", Boolean)
    ], MiniProjectJson.prototype, "compileSPMDataset", void 0);
    __decorate([
        mapV2(),
        __metadata("design:type", Object)
    ], MiniProjectJson.prototype, "scripts", void 0);
    __decorate([
        mapV2('assetsInclude'),
        __metadata("design:type", Array)
    ], MiniProjectJson.prototype, "include", void 0);
    __decorate([
        mapV2('uploadExclude'),
        __metadata("design:type", Array)
    ], MiniProjectJson.prototype, "exclude", void 0);
    __decorate([
        mapV2('pluginResolution'),
        __metadata("design:type", Object)
    ], MiniProjectJson.prototype, "debugOptions", void 0);
    __decorate([
        mapV2({
            fromV2: function (v2Config) {
                var _a, _b;
                return ((_a = v2Config.compileOptions) === null || _a === void 0 ? void 0 : _a.nodeModulesES6Whitelist) || ((_b = v2Config.compileOptions) === null || _b === void 0 ? void 0 : _b.node_modules_es6_whitelist);
            },
            setToV2: function (v2Config, config) {
                var nodeModulesES6Whitelist = config.node_modules_es6_whitelist;
                if (config.node_modules_es6_whitelist) {
                    (0, lodash_set_1.default)(v2Config, 'compileOptions.nodeModulesES6Whitelist', nodeModulesES6Whitelist);
                }
            },
        }),
        __metadata("design:type", Array)
    ], MiniProjectJson.prototype, "node_modules_es6_whitelist", void 0);
    __decorate([
        mapV2(),
        __metadata("design:type", Object)
    ], MiniProjectJson.prototype, "cloud", void 0);
    __decorate([
        mapV2({
            fromV2: function (v2Config) {
                return v2Config.serverlessRoot;
            },
            setToV2: function (v2Config, config) {
                if (config.serverlessRoot) {
                    v2Config.serverlessRoot = config.serverlessRoot;
                }
                else if (config.cloud) {
                    v2Config.serverlessRoot = 'server';
                }
            },
        }),
        __metadata("design:type", String)
    ], MiniProjectJson.prototype, "serverlessRoot", void 0);
    __decorate([
        mapV2('compileOptions.less'),
        __metadata("design:type", Object)
    ], MiniProjectJson.prototype, "compileOptionsLess", void 0);
    __decorate([
        mapV2('compileOptions.typescript'),
        __metadata("design:type", Object)
    ], MiniProjectJson.prototype, "compileOptionsTypescript", void 0);
    __decorate([
        mapV2('developOptions.disableSourcemap'),
        __metadata("design:type", Boolean)
    ], MiniProjectJson.prototype, "developOptionsDisableSourcemap", void 0);
    __decorate([
        mapV2(),
        __metadata("design:type", Object)
    ], MiniProjectJson.prototype, "webViewOptions", void 0);
    __decorate([
        mapV2(),
        __metadata("design:type", Object)
    ], MiniProjectJson.prototype, "unsupportedConfig", void 0);
    return MiniProjectJson;
}());
exports.MiniProjectJson = MiniProjectJson;
//# sourceMappingURL=mini-project-json.js.map