interface call {
  /**
   * @description 通用形式
   * @param name JSAPI 名称
   * @param opt JSAPI 入参
   * @param callback 回调
   */
  (name: string, opt: any, callback: (resp: any) => void): void;
  /**
   * @description 无入参形式
   * @param name JSAPI 名称
   * @param callback 回调
   */
  (name: string, callback: (resp: any) => void): void;
  /**
   * @description 无回调返回 Promise 形式
   * @param name JSAPI 名称
   * @param opt JSAPI 入参
   */
  (name: string, opt?: any): Promise<any>;
}
interface on {
  /**
   * @param eventName 需要监听的事件名
   * @param callback 事件被触发后的回调函数
   */
  (eventName: string, callback: (...args: any) => any): {
    /**
     * @description 调用该方法后，可移除刚才监听的事件
     */
    remove: () => void;
  };
}
interface off {
  /**
   * @param eventName 需要监听的事件名
   * @param callback 事件被触发后的回调函数
   */
  (eventName: string, callback: (...args: any) => any): void;
}

export declare type TBridgeExtra = {
  /**
   * @description 不推荐使用此 `call` 的形式调用 `jsapi`
   */
  call: call;
  /**
   * @description 监听事件
   */
  on: on;
  /**
   * @description 移除通过 `on` 监听的事件
   */
  off: off;
  canIUse(name: string): boolean;
};
