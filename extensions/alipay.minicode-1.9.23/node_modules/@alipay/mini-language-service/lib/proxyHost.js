"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createSjsProxyHost = exports.createProxyHost = void 0;
const path = __importStar(require("path"));
function createProxyHost(ts, info, options) {
    const projectVersion = 0;
    const host = {
        getNewLine: () => info.project.getNewLine(),
        useCaseSensitiveFileNames: () => info.project.useCaseSensitiveFileNames(),
        readFile: (path) => info.project.readFile(path),
        writeFile: (path, content) => info.project.writeFile(path, content),
        fileExists: (path) => info.project.fileExists(path),
        directoryExists: (path) => info.project.directoryExists(path),
        getDirectories: (path) => info.project.getDirectories(path),
        readDirectory: (path, extensions, exclude, include, depth) => info.project.readDirectory(path, extensions, exclude, include, depth),
        realpath: info.project.realpath
            ? (path) => info.project.realpath(path)
            : undefined,
        getCompilationSettings: () => { var _a; return (_a = options === null || options === void 0 ? void 0 : options.compilerOptions) !== null && _a !== void 0 ? _a : info.project.getCompilationSettings(); },
        getCurrentDirectory: () => info.project.getCurrentDirectory(),
        getDefaultLibFileName: () => (options === null || options === void 0 ? void 0 : options.getDefaultLibFileName)
            ? options.getDefaultLibFileName()
            : info.project.getDefaultLibFileName(),
        getProjectVersion: () => info.project.getProjectVersion() + '-' + projectVersion,
        getProjectReferences: () => { var _a; return (_a = options === null || options === void 0 ? void 0 : options.projectReferences) !== null && _a !== void 0 ? _a : info.project.getProjectReferences(); },
        getScriptFileNames,
        getScriptVersion,
        getScriptSnapshot,
        getScriptKind(fileName) {
            const extName = path.extname(fileName);
            if (extName === '.sjs') {
                return ts.ScriptKind.JS;
            }
            return info.project.getScriptKind(fileName);
        },
        getMiniCompilationSettings() {
            return {};
        },
        getTypeScriptModule: () => ts,
        isTsPlugin: true,
    };
    return {
        host,
        dispose,
    };
    function getScriptFileNames() {
        return info.project.getScriptFileNames();
    }
    function getScriptVersion(fileName) {
        return info.project.getScriptVersion(fileName);
    }
    function getScriptSnapshot(fileName) {
        const tsScript = info.project.getScriptSnapshot(fileName);
        return tsScript;
    }
    function dispose() { }
}
exports.createProxyHost = createProxyHost;
function createSjsProxyHost(ts, info, getGlobalTypePath) {
    const preHost = createProxyHost(ts, info, {
        getDefaultLibFileName() {
            const globalTypePath = getGlobalTypePath();
            if (globalTypePath) {
                return path.join(globalTypePath, 'types', 'lib.sjs.d.ts');
            }
            return '';
        },
        compilerOptions: {
            allowJs: true,
            allowNonTsExtensions: true,
        },
    });
    return preHost;
}
exports.createSjsProxyHost = createSjsProxyHost;
