"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SuggestionDiagnosticsProvider = void 0;
const mini_1 = require("@alipay/mini-extensions-shared/lib/diagnostics/mini");
class SuggestionDiagnosticsProvider {
    constructor(context) {
        this.context = context;
        this.ts = context.ts;
        this.tsUtils = context.tsUtils;
        this.logger = context.logger;
    }
    processMyRouterApiCallUrl(node) {
        const args = node.arguments;
        const firstArg = args === null || args === void 0 ? void 0 : args[0];
        if (firstArg && this.ts.isObjectLiteralExpression(firstArg)) {
            // 找到 url 这个字段，然后取出 url 对应的值
            const props = firstArg.properties;
            let target;
            for (const p of props) {
                if (this.ts.isPropertyAssignment(p)) {
                    if (p.name && this.ts.isIdentifier(p.name) && p.name.text === 'url') {
                        target = p;
                        break;
                    }
                }
            }
            if (target &&
                target.initializer &&
                this.ts.isStringLiteral(target.initializer)) {
                const result = target.initializer.text;
                const start = target.initializer.getStart();
                const width = target.initializer.getWidth();
                return {
                    url: result,
                    start,
                    width,
                };
            }
        }
    }
    getRouterDiagnostics(fileName) {
        const sourceFile = this.context.tsUtils.getSourceFile(fileName);
        if (!sourceFile) {
            return [];
        }
        const page = this.context.configCenter.getPageByPath(fileName);
        const result = [];
        const visit = (node) => {
            const expression = this.context.tsUtils.getMyDotAsteriskExpression(node);
            // this.logger.info('isMyCall ' + String(expression));
            if (expression) {
                if (!this.ts.isCallExpression(node)) {
                    return;
                }
                const routerTarget = this.processMyRouterApiCallUrl(node);
                if (!routerTarget) {
                    // 无法解析到 target url
                    // 不校验
                    return;
                }
                if (!page && !routerTarget.url.startsWith('/')) {
                    // 如果用户编辑的 js 不在页面中且解析到的 url 不是绝对路径，不校验
                    return;
                }
                if (routerTarget.url.includes('plugin://')) {
                    // 不校验插件
                    return;
                }
                const resolvedTargetUrl = this.context.configCenter.resolveRouterUrl(fileName, routerTarget.url);
                this.logger.info(`router target: ${JSON.stringify(routerTarget)}`);
                const allTabItems = new Set(this.context.configCenter.getTabbarItemPages());
                // https://opendocs.alipay.com/mini/api/zwi8gx
                if (expression[1] === 'navigateTo') {
                    if (allTabItems.has(resolvedTargetUrl)) {
                        result.push({
                            category: this.ts.DiagnosticCategory.Error,
                            code: mini_1.RouterDiagnosticsEnum.NavigateToInvalidUrl,
                            file: sourceFile,
                            length: routerTarget.width,
                            messageText: '请勿使用 navigateTo 跳转到 tabbar 页面',
                            source: mini_1.Source,
                            start: routerTarget.start,
                        });
                    }
                }
                // https://opendocs.alipay.com/mini/api/ui-tabbar
                if (expression[1] === 'switchTab') {
                    if (!allTabItems.has(resolvedTargetUrl)) {
                        result.push({
                            category: this.ts.DiagnosticCategory.Error,
                            code: mini_1.RouterDiagnosticsEnum.SwitchTabInvalidUrl,
                            file: sourceFile,
                            length: routerTarget.width,
                            messageText: 'switchTab 仅能跳转到 tabbar 页面',
                            source: mini_1.Source,
                            start: routerTarget.start,
                        });
                    }
                }
                // https://opendocs.alipay.com/mini/api/fh18ky
                if (expression[1] === 'redirectTo') {
                    if (allTabItems.has(resolvedTargetUrl)) {
                        result.push({
                            category: this.ts.DiagnosticCategory.Error,
                            code: mini_1.RouterDiagnosticsEnum.RedirectToInvalidUrl,
                            file: sourceFile,
                            length: routerTarget.width,
                            messageText: '请勿使用 redirectTo 跳转到 tabbar 页面',
                            source: mini_1.Source,
                            start: routerTarget.start,
                        });
                    }
                }
            }
            return node.forEachChild(visit);
        };
        this.ts.visitNode(sourceFile, visit);
        return result;
    }
    // 将 TS 中出的错用 mini(6xxx) 来代替
    getSuggestionDiagnostics(fileName) {
        const prior = this.context.languageService.getSuggestionDiagnostics(fileName);
        let result = [...prior];
        const routerDiags = this.getRouterDiagnostics(fileName);
        if (routerDiags) {
            result = [...routerDiags, ...prior];
        }
        return result;
    }
}
exports.SuggestionDiagnosticsProvider = SuggestionDiagnosticsProvider;
