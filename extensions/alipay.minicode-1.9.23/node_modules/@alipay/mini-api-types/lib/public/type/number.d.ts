export declare namespace MathType {
    type Value0 = [void, void, void, void, void, void, void, void, void];
    type Value1 = [number | void, void, void, void, void, void, void, void, void];
    type Value2 = [number | void, number | void, void, void, void, void, void, void, void];
    type Value3 = [number | void, number | void, number | void, void, void, void, void, void, void];
    type Value4 = [number | void, number | void, number | void, number | void, void, void, void, void, void];
    type Value5 = [number | void, number | void, number | void, number | void, number | void, void, void, void, void];
    type Value6 = [
        number | void,
        number | void,
        number | void,
        number | void,
        number | void,
        number | void,
        void,
        void,
        void
    ];
    type Value7 = [
        number | void,
        number | void,
        number | void,
        number | void,
        number | void,
        number | void,
        number | void,
        void,
        void
    ];
    type Value8 = [
        number | void,
        number | void,
        number | void,
        number | void,
        number | void,
        number | void,
        number | void,
        number | void,
        void
    ];
    type Value9 = [
        number | void,
        number | void,
        number | void,
        number | void,
        number | void,
        number | void,
        number | void,
        number | void,
        number | void
    ];
    export interface N {
        '0': Value0;
        '1': Value1;
        '2': Value2;
        '3': Value3;
        '4': Value4;
        '5': Value5;
        '6': Value6;
        '7': Value7;
        '8': Value8;
        '9': Value9;
    }
    export type Num1 = N['0'] | N['1'] | N['2'] | N['3'] | N['4'] | N['5'] | N['6'] | N['7'] | N['8'] | N['9'];
    export type Int2<A extends Num1 = Num1, B extends Num1 = Num1> = [A, B];
    export type Seq3<A extends Int2, B extends Int2, C extends Int2> = [A, B, C];
    export interface I2 {
        '0': Int2<N['0'], N['0']>;
        '1': Int2<N['0'], N['1']>;
        '2': Int2<N['0'], N['2']>;
        '3': Int2<N['0'], N['3']>;
        '4': Int2<N['0'], N['4']>;
        '5': Int2<N['0'], N['5']>;
        '6': Int2<N['0'], N['6']>;
        '7': Int2<N['0'], N['7']>;
        '8': Int2<N['0'], N['8']>;
        '9': Int2<N['0'], N['9']>;
        '10': Int2<N['1'], N['0']>;
        '11': Int2<N['1'], N['1']>;
        '12': Int2<N['1'], N['2']>;
        '13': Int2<N['1'], N['3']>;
        '14': Int2<N['1'], N['4']>;
        '15': Int2<N['1'], N['5']>;
        '16': Int2<N['1'], N['6']>;
        '17': Int2<N['1'], N['7']>;
        '18': Int2<N['1'], N['8']>;
        '19': Int2<N['1'], N['9']>;
        '20': Int2<N['2'], N['0']>;
        '21': Int2<N['2'], N['1']>;
        '22': Int2<N['2'], N['2']>;
        '23': Int2<N['2'], N['3']>;
        '24': Int2<N['2'], N['4']>;
        '32': Int2<N['3'], N['2']>;
        '35': Int2<N['3'], N['5']>;
        '38': Int2<N['3'], N['8']>;
        '50': Int2<N['5'], N['0']>;
        '52': Int2<N['5'], N['2']>;
        '55': Int2<N['5'], N['5']>;
        '58': Int2<N['5'], N['8']>;
        '60': Int2<N['6'], N['0']>;
        '62': Int2<N['6'], N['2']>;
        '65': Int2<N['6'], N['5']>;
        '68': Int2<N['6'], N['8']>;
        '70': Int2<N['7'], N['0']>;
        '72': Int2<N['7'], N['2']>;
        '75': Int2<N['7'], N['5']>;
        '80': Int2<N['8'], N['0']>;
        '82': Int2<N['8'], N['2']>;
        '85': Int2<N['8'], N['5']>;
        '87': Int2<N['8'], N['7']>;
        '88': Int2<N['8'], N['8']>;
        '90': Int2<N['9'], N['0']>;
        '92': Int2<N['9'], N['2']>;
        '95': Int2<N['9'], N['5']>;
        '98': Int2<N['9'], N['8']>;
        '99': Int2<N['9'], N['9']>;
    }
    export interface S3 {
        0: Seq3<I2['0'], I2['0'], I2['0']>;
    }
    export type Equal4Number<A extends Num1, B extends Num1> = A extends B ? (B extends A ? true : false) : false;
    export type GreaterEqual4Number<A extends Num1, B extends Num1> = B extends A ? true : false;
    export type Equal4Integer2<A extends Int2, B extends Int2> = A extends Int2<infer A0, infer A1> ? B extends Int2<infer B0, infer B1> ? Equal4Number<A0, B0> extends true ? Equal4Number<A1, B1> : false : false : false;
    export type GreaterEqual4Integer2<A extends Int2, B extends Int2> = A extends Int2<infer A0, infer A1> ? B extends Int2<infer B0, infer B1> ? Equal4Number<A0, B0> extends true ? GreaterEqual4Number<A1, B1> : GreaterEqual4Number<A0, B0> : false : false;
    export type GreaterEqual4Sequence3<A extends Seq3<Int2, Int2, Int2>, B extends Seq3<Int2, Int2, Int2>> = A extends Seq3<infer A0, infer A1, infer A2> ? B extends Seq3<infer B0, infer B1, infer B2> ? Equal4Integer2<A0, B0> extends true ? Equal4Integer2<A1, B1> extends true ? GreaterEqual4Integer2<A2, B2> : GreaterEqual4Integer2<A1, B1> : GreaterEqual4Integer2<A0, B0> : false : false;
    export type Equal4Sequence3<A extends Seq3<Int2, Int2, Int2>, B extends Seq3<Int2, Int2, Int2>> = A extends Seq3<infer A0, infer A1, infer A2> ? B extends Seq3<infer B0, infer B1, infer B2> ? Equal4Integer2<A0, B0> extends true ? Equal4Integer2<A1, B1> extends true ? Equal4Integer2<A2, B2> : false : false : false : false;
    export {};
}
//# sourceMappingURL=number.d.ts.map