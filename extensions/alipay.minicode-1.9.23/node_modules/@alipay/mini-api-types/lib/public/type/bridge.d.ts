import { APIGetSDKVersionOrZero, APIGetClientVersionOrZero, APIGetNamespace, APIRemoveNamespace, APIExportInfer } from './registry';
import { API } from './meta';
import { MathType } from './number';
import { BridgeState, BridgeStateWithStringedVersion, FormatVersion2Seq3, NormalizeBridgeStateWithStringedVersion } from './state';
import { TBridgeExtra } from './extra';
/**
 *
 * @example 1. Option.SFC
 * ```
 * const r1 = my.navigateTo({
 *   url: '321',
 *   success(a) {},
 *   fail(e) {}
 * });
 * ```
 *
 * @example 2. Option+Callback
 * ```
 * const r2 = my.navigateTo({
 *   url: '123'
 * }, () => {});
 * ```
 *
 * @example 3. Callback
 * ```
 * const r3 = my.navigateTo(() => {});
 * ```
 *
 * @exmaple 4. Option+Promise
 * ```
 * const r4 = my.navigateTo({});
 * ```
 */
export declare type APIInstance<S extends BridgeState> = {
    [K in API as APIGetNamespace<K> extends string ? never : K]: SDKOptionalValue<S, APIGetSDKVersionOrZero<S, K>, APIGetClientVersionOrZero<S, K>, APIExportInfer<S, K>>;
};
export declare type APINamespaceInstance<S extends BridgeState, NS extends string | void> = NS extends string ? {
    [T in NS]: {
        [K in API as APIGetNamespace<K> extends T ? APIRemoveNamespace<T, K> : never]: SDKOptionalValue<S, APIGetSDKVersionOrZero<S, K>, APIGetClientVersionOrZero<S, K>, APIExportInfer<S, K>>;
    };
} : {};
/**
 * 用于生成 CanIUse 之后移除 void 的类型，添加了 R 作为字符串泛型
 */
declare type TCanIUseAPIInstance<S extends BridgeState, R extends string> = {
    [K in keyof APIInstance<S> as R extends `${K}` ? K : never]: TRemoveVoid<APIInstance<S>[K]>;
};
declare type TCanIUseAPINamespaceInstance<S extends BridgeState, NS extends string | void, R extends string> = NS extends string ? ({
    [T in NS]: {
        [K in API as APIGetNamespace<K> extends T ? (R extends `${K}` ? APIRemoveNamespace<T, K> : never) : never]: TRemoveVoid<SDKOptionalValue<S, APIGetSDKVersionOrZero<S, K>, APIGetClientVersionOrZero<S, K>, APIExportInfer<S, K>>>;
    };
}) : {};
declare type SDKOptionalValue<S extends BridgeState, APISV extends MathType.Seq3<MathType.Int2, MathType.Int2, MathType.Int2>, APICV extends MathType.Seq3<MathType.Int2, MathType.Int2, MathType.Int2>, T> = MathType.GreaterEqual4Sequence3<FormatVersion2Seq3<S['sdk']>, APISV> extends true ? MathType.GreaterEqual4Sequence3<FormatVersion2Seq3<S['client']>, APICV> extends true ? T : T | void : T | void;
export declare type TBridgeInstance<S extends BridgeState> = APIInstance<S> & APINamespaceInstance<S, S['namespace']>;
export declare type Bridge<S extends BridgeState> = S['extra'] & TBridgeInstance<S> & TCanIUseInstance<S> & TBridgeExtra;
export declare class TCanIUseInstance<S extends BridgeState> {
    canIUse<R extends string>(request: R): this is (S['extra'] & TBridgeInstance<S> & TCanIUseAPIInstance<S, R> & TCanIUseAPINamespaceInstance<S, S['namespace'], R> & TBridgeExtra);
}
/**
 * @deprecated
 */
export declare type BridgeWithStringedVersion<S extends BridgeStateWithStringedVersion> = Bridge<NormalizeBridgeStateWithStringedVersion<S>>;
export declare type TRemoveVoid<T> = T extends void ? never : T;
export {};
//# sourceMappingURL=bridge.d.ts.map