"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Flag = void 0;
var Flag;
(function (Flag) {
    var Navigation;
    (function (Navigation) {
        Navigation["AlipayPageAppCode"] = "Navigation$AlipayPageAppCode";
    })(Navigation = Flag.Navigation || (Flag.Navigation = {}));
    var Bluetooth;
    (function (Bluetooth) {
        Bluetooth["ChangeState"] = "Bluetooth$ChangeState";
        Bluetooth["DiscoveryFeature"] = "Bluetooth$DiscoveryFeature";
    })(Bluetooth = Flag.Bluetooth || (Flag.Bluetooth = {}));
    var Device;
    (function (Device) {
        Device["SystemInfo140"] = "Device$SystemInfo140";
        Device["SystemInfoAuthorized"] = "Device$SystemInfoAuthorized";
        Device["AddPhoneContact"] = "Device$AddPhoneContact";
        Device["GetDeviceIDType"] = "GetDeviceIDType";
        Device["EnvClientName"] = "Env.clientName";
        Device["EnvClientVersion"] = "Env.clientVersion";
        Device["EnvLanguage"] = "Env.language";
        Device["EnvPlatform"] = "Env.platform";
    })(Device = Flag.Device || (Flag.Device = {}));
    var UI;
    (function (UI) {
        UI["InteractiveButtonColor"] = "UI$InteractiveButtonColor";
        UI["ShowActionSheetBadges"] = "UI$ShowActionSheetBadges";
        UI["DatePickerFormatyyyyMM"] = "DatePickerFormatyyyy-MM";
        UI["DatePickerFormatyyyy"] = "DatePickerFormatyyyy";
    })(UI = Flag.UI || (Flag.UI = {}));
    var Scroll;
    (function (Scroll) {
        Scroll["PageScrollToSelector"] = "PageScrollToSelector";
        Scroll["PageScrollToDuration"] = "PageScrollToDuration";
    })(Scroll = Flag.Scroll || (Flag.Scroll = {}));
    var Internal;
    (function (Internal) {
        Internal["Zero"] = "Internal$Zero";
    })(Internal = Flag.Internal || (Flag.Internal = {}));
    var Request;
    (function (Request) {
        Request["RequestMethodPut"] = "RequestMethodPut";
        Request["RequestMethodDelete"] = "RequestMethodDelete";
        Request["RequestDataArrayBuffer"] = "RequestDataArrayBuffer";
        Request["RequestDataTypeArrayBuffer"] = "RequestDataTypeArrayBuffer";
        Request["UploadFileUploadTaskAbort"] = "UploadFileUploadTaskAbort";
        Request["UploadFileUploadTaskonProgressUpdate"] = "UploadFileUploadTaskonProgressUpdate";
        Request["UploadFileToAliCloudNeedRetry"] = "UploadFileToAliCloudNeedRetry";
        Request["UploadFileToAliCloudIsPrivate"] = "UploadFileToAliCloudIsPrivate";
        Request["UploadFileToAliCloudHideLoading"] = "UploadFileToAliCloudHideLoading";
        Request["UploadFileToAliCloudNeedDelete"] = "UploadFileToAliCloudNeedDelete";
        Request["UploadFileToAliCloudSharedBiz"] = "UploadFileToAliCloudSharedBiz";
    })(Request = Flag.Request || (Flag.Request = {}));
    var FileSystem;
    (function (FileSystem) {
        FileSystem["GetSavedFileList"] = "FileSystemGetSavedFileList";
        FileSystem["GetSavedFileListSync"] = "FileSystemGetSavedFileListSync";
    })(FileSystem = Flag.FileSystem || (Flag.FileSystem = {}));
    var Location;
    (function (Location) {
        Location["ChooseCityLongitude"] = "ChooseCityLongitude";
        Location["ChooseCityLatitude"] = "ChooseCityLatitude";
    })(Location = Flag.Location || (Flag.Location = {}));
    var Audio;
    (function (Audio) {
        Audio["BackgroundAudioManagerIsRecordAudioPlayState"] = "BackgroundAudioManagerIsRecordAudioPlayState";
        Audio["InnerAudioContextIsRecordAudioPlayState"] = "InnerAudioContextIsRecordAudioPlayState";
        Audio["InnerAudioContextSupportBackgroundPlay"] = "InnerAudioContext.supportBackgroundPlay";
    })(Audio = Flag.Audio || (Flag.Audio = {}));
    var RecorderManager;
    (function (RecorderManager) {
        RecorderManager["RecorderManagerStartFormat"] = "RecorderManager.start.format";
        RecorderManager["RecorderManagerStartFrameSize"] = "RecorderManager.start.frameSize";
        RecorderManager["RecorderManagerOnFrameRecordedFrameBuffer"] = "RecorderManager.onFrameRecorded.frameBuffer";
        RecorderManager["RecorderManagerOnFrameRecordedIsLastFrame"] = "RecorderManager.onFrameRecorded.isLastFrame";
    })(RecorderManager = Flag.RecorderManager || (Flag.RecorderManager = {}));
    var Map;
    (function (Map) {
        Map["GetMapInfo"] = "Map$GetMapInfo";
        Map["MapContextCalculateDistance"] = "MapContext.calculateDistance";
        Map["MapContextChangeMarkers"] = "MapContext.changeMarkers";
        Map["MapContextClearRoute"] = "MapContext.clearRoute";
        Map["MapContextGestureEnable"] = "MapContext.gestureEnable";
        Map["MapContextGetCenterLocation"] = "MapContext.getCenterLocation";
        Map["MapContextGetMapProperties"] = "MapContext.getMapProperties";
        Map["MapContextGetRegion"] = "MapContext.getRegion";
        Map["MapContextMoveToLocation"] = "MapContext.moveToLocation";
        Map["MapContextShowRoute"] = "MapContext.showRoute";
        Map["MapContextShowsCompass"] = "MapContext.showsCompass";
        Map["MapContextShowsScale"] = "MapContext.showsScale";
        Map["MapContextSmoothMoveMarker"] = "MapContext.smoothMoveMarker";
        Map["MapContextSmoothMovePolyline"] = "MapContext.smoothMovePolyline";
        Map["MapContextTranslateMarker"] = "MapContext.translateMarker";
        Map["MapContextUpdateComponents"] = "MapContext.updateComponents";
        Map["MapContextMarkerLevel"] = "MapContext.markerLevel";
        Map["MapContextMarkerStyle"] = "MapContext.marker.style";
        Map["MapContextMarkerLabel"] = "MapContext.marker.label";
        Map["MapContextPolylineIconPath"] = "MapContext.polyline.iconPath";
        Map["MapContextPolylineIconWidth"] = "MapContext.polyline.iconWidth";
        Map["MapContextPropertySdkName"] = "MapContext.property.sdkName";
        Map["MapContextPropertySdkVersion"] = "MapContext.property.sdkVersion";
        Map["MapContextPropertyIsSupportOversea"] = "MapContext.property.isSupportOversea";
        Map["MapContextPropertyNeedStyleV7"] = "MapContext.marker.needStyleV7";
        Map["MapContextShowRouteSearchType"] = "MapContext.showRoute.searchType";
        Map["MapContextShowRouteThroughPoints"] = "MapContext.showRoute.throughPoints";
        Map["MapContextShowRouteZIndex"] = "MapContext.showRoute.zIndex";
        Map["MapContextMarkerAnimationType"] = "MapContext.marker.animation.type";
    })(Map = Flag.Map || (Flag.Map = {}));
    var AR;
    (function (AR) {
        AR["SetFaceTrackingNodeOptionFacePoints"] = "setFaceTrackingNode.option.facePoints";
        AR["SetFaceTrackingNodeOptionFaceFrame"] = "setFaceTrackingNode.option.faceFrame";
    })(AR = Flag.AR || (Flag.AR = {}));
    var Media;
    (function (Media) {
        Media["IsSpeechRecognizeAvailableExtraInfo"] = "isSpeechRecognizeAvailableExtraInfo.extraInfo";
        Media["StartSpeechRecognizeEncodeAudio"] = "startSpeechRecognize.encodeAudio";
        Media["StartSpeechRecognizeExtraInfo"] = "startSpeechRecognize.extraInfo";
        Media["StartSpeechRecognizeExtraInfoEnableDBCallback"] = "startSpeechRecognize.extraInfo.enableDBCallback";
        Media["OnSpeechRecognizeResultTempAudioPath"] = "onSpeechRecognizeResult.tempAudioPath";
    })(Media = Flag.Media || (Flag.Media = {}));
    var Video;
    (function (Video) {
        Video["ChooseVideoResponseTempFilePath"] = "chooseVideo.response.tempFilePath";
    })(Video = Flag.Video || (Flag.Video = {}));
    var Image;
    (function (Image) {
        Image["SaveImageShowActionSheet"] = "saveImage.showActionSheet";
        Image["PreviewImageEnablesavephoto"] = "previewImage.enablesavephoto";
        Image["PreviewImageEnableShowPhotoDownload"] = "previewImage.enableShowPhotoDownload";
    })(Image = Flag.Image || (Flag.Image = {}));
    var Favorite;
    (function (Favorite) {
        Favorite["AddToFavoriteBizType"] = "addToFavorite.bizType";
        Favorite["AddToFavoriteExtraInfo"] = "addToFavorite.extraInfo";
        Favorite["RemoveFromFavoriteBizType"] = "removeFromFavorite.bizType";
        Favorite["RemoveFromFavoriteExtraInfo"] = "removeFromFavorite.extraInfo";
    })(Favorite = Flag.Favorite || (Flag.Favorite = {}));
    var Performance;
    (function (Performance) {
        Performance["EnableSnapshotDisableDynamicPluginCheck"] = "enableSnapshot.disableDynamicPluginCheck";
    })(Performance = Flag.Performance || (Flag.Performance = {}));
})(Flag = exports.Flag || (exports.Flag = {}));
//# sourceMappingURL=flag.js.map