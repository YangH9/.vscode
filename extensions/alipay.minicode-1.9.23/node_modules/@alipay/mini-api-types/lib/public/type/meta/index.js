"use strict";
// 定一个分类
// instance#method
// instance 是有类型的 默认是 My 默认都在 My 下，也有可以 MyAP 下
// CanvasContext 的 method 就是 CanvasContext 下
// 这样 createCanvasContext 就单纯定义成一个 Sync 方法/ Fn 方法就好了
// 所有方法都是 全局注册的 成员方法
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.APIType = void 0;
// my.ap.xxx 的类型 TODO，还没想好
// 还是得全局 Type 注册表
// 默认给固化成 request/response 还是不太好？
// 函数作为一等公民
// 1. 单纯 Type 导出哪些
// 2. APIExport，是定义一个函数的入参出餐，只要是 API 即可
// 3. TypeExport 是定义非 POJO 字面量之外的类型，可以包含 method, property 等，但是除开字面量以外，必须强制引用全局的 TypeExport 或者 APIExport
/**
 * export interface TypeExport<S> {
 *   [Type.CanvasContext]: {
 *     draw: ScopedAPIRef<ScopedAPI.CanvasContext.draw> // 单纯 ...args/ret
 *     fontSize: string;
 *   }
 * }
 *
 * // 以下是否要统一？
 * export interface ScopedAPIExport {
 *   [ScopedAPI.CanvasContext.draw]: {
 *     args: [];
 *     response: {};
 *   }
 * }
 *
 * export interface APIExport<S> {
 *   [API.navigateTo]: {
 *     request: {};
 *     response: {};
 *   }
 * }
 */
__exportStar(require("./api"), exports);
__exportStar(require("./client"), exports);
__exportStar(require("./flag"), exports);
__exportStar(require("./sdk"), exports);
__exportStar(require("./type"), exports);
var APIType;
(function (APIType) {
    APIType["Sync"] = "sync";
    APIType["Fn"] = "fn";
    APIType["Event"] = "event";
    APIType["Property"] = "property";
    APIType["Alias"] = "alias";
    APIType["Async"] = "async";
})(APIType = exports.APIType || (exports.APIType = {}));
//# sourceMappingURL=index.js.map