"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Type = void 0;
var Type;
(function (Type) {
    var Open;
    (function (Open) {
        Open["NSFBizContext"] = "NSFBizContext";
    })(Open = Type.Open || (Type.Open = {}));
    var Interactive;
    (function (Interactive) {
        Interactive["PromptOk"] = "PromptOk";
        Interactive["PromptCancel"] = "PromptCancel";
        Interactive["CancelButtonColor"] = "CancelButtonColor";
        Interactive["ConfirmButtonColor"] = "ConfirmButtonColor";
    })(Interactive = Type.Interactive || (Type.Interactive = {}));
    var App;
    (function (App) {
        App["Rejection"] = "Rejection";
        App["ReferrerInfo"] = "ReferrerInfo";
        App["ReportAnalyticsData"] = "ReportAnalyticsData";
        App["RequirePlugin"] = "requirePlugin";
    })(App = Type.App || (Type.App = {}));
    var Navigation;
    (function (Navigation) {
        Navigation["AlipayPageOptionAppCode"] = "AlipayPageOptionAppCode";
        Navigation["AlipayPageOptionPath"] = "AlipayPageOptionPath";
    })(Navigation = Type.Navigation || (Type.Navigation = {}));
    var Bluetooth;
    (function (Bluetooth) {
        Bluetooth["BLECharacteristic"] = "BLECharacteristic";
        Bluetooth["BLEProperties"] = "BLEProperties";
        Bluetooth["BlueBoothCommonError"] = "BlueBoothCommonError";
        Bluetooth["EBlueBoothErrorCodeCommon"] = "EBlueBoothErrorCodeCommon";
    })(Bluetooth = Type.Bluetooth || (Type.Bluetooth = {}));
    var Shared;
    (function (Shared) {
        Shared["Callback"] = "Callback";
    })(Shared = Type.Shared || (Type.Shared = {}));
    var Worker;
    (function (Worker) {
        Worker["Instance"] = "Worker.Instance";
        Worker["onMessage"] = "Worker.onMessage";
        Worker["MessageCallback"] = "Worker.MessageCallback";
        Worker["postMessage"] = "Worker.postMessage";
        Worker["terminate"] = "Worker.terminate";
    })(Worker = Type.Worker || (Type.Worker = {}));
    var CanvasContext;
    (function (CanvasContext) {
        CanvasContext["Context"] = "CanvasContext";
        CanvasContext["addColorStop"] = "CanvasContext.addColorStop";
        CanvasContext["arc"] = "CanvasContext.arc";
        CanvasContext["beginPath"] = "CanvasContext.beginPath";
        CanvasContext["bezierCurveTo"] = "CanvasContext.bezierCurveTo";
        CanvasContext["clearRect"] = "CanvasContext.clearRect";
        CanvasContext["clip"] = "CanvasContext.clip";
        CanvasContext["closePath"] = "CanvasContext.closePath";
        CanvasContext["createCircularGradient"] = "CanvasContext.createCircularGradient";
        CanvasContext["createLinearGradient"] = "CanvasContext.createLinearGradient";
        CanvasContext["fill"] = "CanvasContext.fill";
        CanvasContext["fillRect"] = "CanvasContext.fillRect";
        CanvasContext["fillText"] = "CanvasContext.fillText";
        CanvasContext["getImageData"] = "CanvasContext.getImageData";
        CanvasContext["lineTo"] = "CanvasContext.lineTo";
        CanvasContext["measureText"] = "CanvasContext.measureText";
        CanvasContext["moveTo"] = "CanvasContext.moveTo";
        CanvasContext["putImageData"] = "CanvasContext.putImageData";
        CanvasContext["quadraticCurveTo"] = "CanvasContext.quadraticCurveTo";
        CanvasContext["rect"] = "CanvasContext.rect";
        CanvasContext["restore"] = "CanvasContext.restore";
        CanvasContext["rotate"] = "CanvasContext.rotate";
        CanvasContext["save"] = "CanvasContext.save";
        CanvasContext["scale"] = "CanvasContext.scale";
        CanvasContext["setFillStyle"] = "CanvasContext.setFillStyle";
        CanvasContext["setFontSize"] = "CanvasContext.setFontSize";
        CanvasContext["setGlobalAlpha"] = "CanvasContext.setGlobalAlpha";
        CanvasContext["setLineCap"] = "CanvasContext.setLineCap";
        CanvasContext["setLineDash"] = "CanvasContext.setLineDash";
        CanvasContext["setLineJoin"] = "CanvasContext.setLineJoin";
        CanvasContext["setLineWidth"] = "CanvasContext.setLineWidth";
        CanvasContext["setMiterLimit"] = "CanvasContext.setMiterLimit";
        CanvasContext["setShadow"] = "CanvasContext.setShadow";
        CanvasContext["setStrokeStyle"] = "CanvasContext.setStrokeStyle";
        CanvasContext["setTextAlign"] = "CanvasContext.setTextAlign";
        CanvasContext["setTextBaseline"] = "CanvasContext.setTextBaseline";
        CanvasContext["setTransform"] = "CanvasContext.setTransform";
        CanvasContext["stroke"] = "CanvasContext.stroke";
        CanvasContext["strokeRect"] = "CanvasContext.strokeRect";
        CanvasContext["toDataURL"] = "CanvasContext.toDataURL";
        CanvasContext["toTempFilePath"] = "CanvasContext.toTempFilePath";
        CanvasContext["transform"] = "CanvasContext.transform";
        CanvasContext["translate"] = "CanvasContext.translate";
        CanvasContext["Draw"] = "CanvasContext.draw";
        CanvasContext["DrawImage"] = "CanvasContext.drawImage";
    })(CanvasContext = Type.CanvasContext || (Type.CanvasContext = {}));
    var Version;
    (function (Version) {
    })(Version = Type.Version || (Type.Version = {}));
    var UpdateManager;
    (function (UpdateManager) {
        UpdateManager["Manager"] = "UpdateManager$Manager";
        UpdateManager["ApplyUpdate"] = "UpdateManager$ApplyUpdate";
        UpdateManager["OnCheckForUpdate"] = "UpdateManager$OnCheckForUpdate";
        UpdateManager["OnCheckForUpdateCallback"] = "UpdateManager$OnCheckForUpdateCallback";
        UpdateManager["OnUpdateReady"] = "UpdateManager$OnUpdateReady";
        UpdateManager["OnUpdateFailed"] = "UpdateManager$OnUpdateFailed";
    })(UpdateManager = Type.UpdateManager || (Type.UpdateManager = {}));
    var SystemInfo;
    (function (SystemInfo) {
        SystemInfo["Env"] = "SystemInfo$Env";
        SystemInfo["Info"] = "SystemInfo$Info";
        SystemInfo["InfoBasic"] = "SystemInfo$InfoBasic";
        SystemInfo["Info140"] = "SystemInfo$Info140";
        SystemInfo["InfoAuthorized"] = "SystemInfo$InfoAuthorized";
        SystemInfo["SafeArea"] = "SystemInfo$SafeArea";
    })(SystemInfo = Type.SystemInfo || (Type.SystemInfo = {}));
    var Storage;
    (function (Storage) {
        Storage["StorageInfo"] = "Storage$StorageInfo";
    })(Storage = Type.Storage || (Type.Storage = {}));
    var UI;
    (function (UI) {
    })(UI = Type.UI || (Type.UI = {}));
    var Dom;
    (function (Dom) {
        Dom["SelectorQuery"] = "SelectorQuery";
        Dom["SelectorQuerySelect"] = "SelectorQuery.select";
        Dom["SelectorQuerySelectAll"] = "SelectorQuery.selectAll";
        Dom["SelectorQueryBoundingClientRect"] = "SelectorQuery.boundingClientRect";
        Dom["SelectorQueryScrollOffset"] = "SelectorQuery.scrollOffset";
        Dom["SelectorQueryExec"] = "SelectorQuery.exec";
        Dom["SelectorQuerySelectViewport"] = "SelectorQuery.selectViewport";
        Dom["IntersectionObserver"] = "IntersectionObserver";
        Dom["IntersectionObserverDisconnect"] = "IntersectionObserver.disconnect";
        Dom["IntersectionObserverObserve"] = "IntersectionObserver.observe";
        Dom["IntersectionObserverRelativeTo"] = "IntersectionObserver.relativeTo";
        Dom["IntersectionObserverRelativeToViewport"] = "IntersectionObserver.relativeToViewport";
        Dom["AnimationContext"] = "AnimationContext";
        Dom["AnimationContextStep"] = "AnimationContext.step";
        Dom["AnimationContextExport"] = "AnimationContext.export";
        Dom["AnimationContextOpacity"] = "AnimationContext.opacity";
        Dom["AnimationContextBackgroundColor"] = "AnimationContext.backgroundColor";
        Dom["AnimationContextWidth"] = "AnimationContext.width";
        Dom["AnimationContextHeight"] = "AnimationContext.height";
        Dom["AnimationContextTop"] = "AnimationContext.top";
        Dom["AnimationContextLeft"] = "AnimationContext.left";
        Dom["AnimationContextBottom"] = "AnimationContext.bottom";
        Dom["AnimationContextRight"] = "AnimationContext.right";
        Dom["AnimationContextRotate"] = "AnimationContext.rotate";
        Dom["AnimationContextRotateX"] = "AnimationContext.rotateX";
        Dom["AnimationContextRotateY"] = "AnimationContext.rotateY";
        Dom["AnimationContextRotateZ"] = "AnimationContext.rotateZ";
        Dom["AnimationContextRotate3d"] = "AnimationContext.rotate3d";
        Dom["AnimationContextScale"] = "AnimationContext.scale";
        Dom["AnimationContextScaleX"] = "AnimationContext.scaleX";
        Dom["AnimationContextScaleY"] = "AnimationContext.scaleY";
        Dom["AnimationContextScaleZ"] = "AnimationContext.scaleZ";
        Dom["AnimationContextScale3d"] = "AnimationContext.scale3d";
        Dom["AnimationContextTranslate"] = "AnimationContext.translate";
        Dom["AnimationContextTranslateX"] = "AnimationContext.translateX";
        Dom["AnimationContextTranslateY"] = "AnimationContext.translateY";
        Dom["AnimationContextTranslateZ"] = "AnimationContext.translateZ";
        Dom["AnimationContextTranslate3d"] = "AnimationContext.translate3d";
        Dom["AnimationContextSkew"] = "AnimationContext.skew";
        Dom["AnimationContextSkewX"] = "AnimationContext.skewX";
        Dom["AnimationContextSkewY"] = "AnimationContext.skewY";
        Dom["AnimationContextMatrix"] = "AnimationContext.matrix";
        Dom["AnimationContextMatrix3d"] = "AnimationContext.matrix3d";
    })(Dom = Type.Dom || (Type.Dom = {}));
    var FileSystem;
    (function (FileSystem) {
        FileSystem["Mkdir"] = "FileSystemManager.mkdir";
        FileSystem["MkdirSync"] = "FileSystemManager.mkdirSync";
        FileSystem["AppendFile"] = "FileSystemManager.appendFile";
        FileSystem["AppendFileSync"] = "FileSystemManager.appendFileSync";
        FileSystem["CopyFile"] = "FileSystemManager.copyFile";
        FileSystem["CopyFileSync"] = "FileSystemManager.copyFileSync";
        FileSystem["Readdir"] = "FileSystemManager.readdir";
        FileSystem["ReaddirSync"] = "FileSystemManager.readdirSync";
        FileSystem["RemoveSavedFile"] = "FileSystemManager.removeSavedFile";
        FileSystem["RemoveSavedFileSync"] = "FileSystemManager.removeSavedFileSync";
        FileSystem["Rename"] = "FileSystemManager.rename";
        FileSystem["RenameSync"] = "FileSystemManager.renameSync";
        FileSystem["Stat"] = "FileSystemManager.stat";
        FileSystem["StatSync"] = "FileSystemManager.statSync";
        FileSystem["Unlink"] = "FileSystemManager.unlink";
        FileSystem["UnlinkSync"] = "FileSystemManager.unlinkSync";
        FileSystem["Unzip"] = "FileSystemManager.unzip";
        FileSystem["WriteFile"] = "FileSystemManager.writeFile";
        FileSystem["WriteFileSync"] = "FileSystemManager.writeFileSync";
        FileSystem["GetFileInfo"] = "FileSystemManager.getFileInfo";
        FileSystem["GetFileInfoSync"] = "FileSystemManager.getFileInfoSync";
        FileSystem["ReadFile"] = "FileSystemManager.readFile";
        FileSystem["ReadFileSync"] = "FileSystemManager.readFileSync";
        FileSystem["GetSavedFileList"] = "FileSystemManager.getSavedFileList";
        FileSystem["GetSavedFileListSync"] = "FileSystemManager.getSavedFileListSync";
        FileSystem["SaveFile"] = "FileSystemManager.saveFile";
        FileSystem["SaveFileSync"] = "FileSystemManager.saveFileSync";
        FileSystem["Access"] = "FileSystemManager.access";
        FileSystem["AccessSync"] = "FileSystemManager.accessSync";
        FileSystem["Rmdir"] = "FileSystemManager.rmdir";
        FileSystem["RmdirSync"] = "FileSystemManager.rmdirSync";
    })(FileSystem = Type.FileSystem || (Type.FileSystem = {}));
    var Audio;
    (function (Audio) {
        Audio["BackgroundAudioManager"] = "BackgroundAudioManager";
        Audio["BackgroundAudioManagerPlay"] = "BackgroundAudioManager.play";
        Audio["BackgroundAudioManagerPause"] = "BackgroundAudioManager.pause";
        Audio["BackgroundAudioManagerStop"] = "BackgroundAudioManager.stop";
        Audio["BackgroundAudioManagerSeek"] = "BackgroundAudioManager.seek";
        Audio["BackgroundAudioManagerOnCanplay"] = "BackgroundAudioManager.onCanplay";
        Audio["BackgroundAudioManagerOnWaiting"] = "BackgroundAudioManager.onWaiting";
        Audio["BackgroundAudioManagerOnError"] = "BackgroundAudioManager.onError";
        Audio["BackgroundAudioManagerOnPlay"] = "BackgroundAudioManager.onPlay";
        Audio["BackgroundAudioManagerOnPause"] = "BackgroundAudioManager.onPause";
        Audio["BackgroundAudioManagerOnSeeking"] = "BackgroundAudioManager.onSeeking";
        Audio["BackgroundAudioManagerOnSeeked"] = "BackgroundAudioManager.onSeeked";
        Audio["BackgroundAudioManagerOnEnded"] = "BackgroundAudioManager.onEnded";
        Audio["BackgroundAudioManagerOnStop"] = "BackgroundAudioManager.onStop";
        Audio["BackgroundAudioManagerOnTimeUpdate"] = "BackgroundAudioManager.onTimeUpdate";
        Audio["BackgroundAudioManagerOnNext"] = "BackgroundAudioManager.onNext";
        Audio["BackgroundAudioManagerOnPrev"] = "BackgroundAudioManager.onPrev";
        Audio["AudioContext"] = "AudioContext";
        Audio["AudioContextSetSrc"] = "AudioContext.setSrc";
        Audio["AudioContextPlay"] = "AudioContext.play";
        Audio["AudioContextPause"] = "AudioContext.pause";
        Audio["AudioContextSeek"] = "AudioContext.seek";
        Audio["InnerAudioContext"] = "InnerAudioContext";
        Audio["InnerAudioContextPlay"] = "InnerAudioContext.play";
        Audio["InnerAudioContextPause"] = "InnerAudioContext.pause";
        Audio["InnerAudioContextStop"] = "InnerAudioContext.stop";
        Audio["InnerAudioContextSeek"] = "InnerAudioContext.seek";
        Audio["InnerAudioContextDestory"] = "InnerAudioContext.destory";
        Audio["InnerAudioContextOnCanplay"] = "InnerAudioContext.onCanplay";
        Audio["InnerAudioContextOnPlay"] = "InnerAudioContext.onPlay";
        Audio["InnerAudioContextOnPause"] = "InnerAudioContext.onPause";
        Audio["InnerAudioContextOnStop"] = "InnerAudioContext.onStop";
        Audio["InnerAudioContextOnEnded"] = "InnerAudioContext.onEnded";
        Audio["InnerAudioContextOnTimeUpdate"] = "InnerAudioContext.onTimeUpdate";
        Audio["InnerAudioContextOnError"] = "InnerAudioContext.onError";
        Audio["InnerAudioContextOnWaiting"] = "InnerAudioContext.onWaiting";
        Audio["InnerAudioContextOnSeeking"] = "InnerAudioContext.onSeeking";
        Audio["InnerAudioContextOnSeeked"] = "InnerAudioContext.onSeeked";
        Audio["InnerAudioContextOffCanplay"] = "InnerAudioContext.offCanplay";
        Audio["InnerAudioContextOffPlay"] = "InnerAudioContext.offPlay";
        Audio["InnerAudioContextOffPause"] = "InnerAudioContext.offPause";
        Audio["InnerAudioContextOffStop"] = "InnerAudioContext.offStop";
        Audio["InnerAudioContextOffEnded"] = "InnerAudioContext.offEnded";
        Audio["InnerAudioContextOffTimeUpdate"] = "InnerAudioContext.offTimeUpdate";
        Audio["InnerAudioContextOffError"] = "InnerAudioContext.offError";
        Audio["InnerAudioContextOffWaiting"] = "InnerAudioContext.offWaiting";
        Audio["InnerAudioContextOffSeeking"] = "InnerAudioContext.offSeeking";
        Audio["InnerAudioContextOffSeeked"] = "InnerAudioContext.offSeeked";
    })(Audio = Type.Audio || (Type.Audio = {}));
    var RecorderManager;
    (function (RecorderManager) {
        RecorderManager["RecorderManager"] = "RecorderManager";
        RecorderManager["RecorderManagerStart"] = "RecorderManager.start";
        RecorderManager["RecorderManagerStop"] = "RecorderManager.stop";
        RecorderManager["RecorderManagerPause"] = "RecorderManager.pause";
        RecorderManager["RecorderManagerResume"] = "RecorderManager.resume";
        RecorderManager["RecorderManagerOnError"] = "RecorderManager.onError";
        RecorderManager["RecorderManagerOnDecibelChange"] = "RecorderManager.onDecibelChange";
        RecorderManager["RecorderManagerOnStart"] = "RecorderManager.onStart";
        RecorderManager["RecorderManagerOnStop"] = "RecorderManager.onStop";
        RecorderManager["RecorderManagerOnPause"] = "RecorderManager.onPause";
        RecorderManager["RecorderManagerOnResume"] = "RecorderManager.onResume";
        RecorderManager["RecorderManagerOffError"] = "RecorderManager.offError";
        RecorderManager["RecorderManagerOffDecibelChange"] = "RecorderManager.offDecibelChange";
        RecorderManager["RecorderManagerOffStart"] = "RecorderManager.offStart";
        RecorderManager["RecorderManagerOffStop"] = "RecorderManager.offStop";
        RecorderManager["RecorderManagerOffPause"] = "RecorderManager.offPause";
        RecorderManager["RecorderManagerOffResume"] = "RecorderManager.offResume";
        RecorderManager["RecorderManagerOnFrameRecorded"] = "RecorderManager.onFrameRecorded";
        RecorderManager["RecorderManagerOffFrameRecorded"] = "RecorderManager.offFrameRecorded";
    })(RecorderManager = Type.RecorderManager || (Type.RecorderManager = {}));
    var Live;
    (function (Live) {
        Live["LivePusherContext"] = "LivePusherContext";
        Live["LivePusherContextStart"] = "LivePusherContext.start";
        Live["LivePusherContextPause"] = "LivePusherContext.pause";
        Live["LivePusherContextResume"] = "LivePusherContext.resume";
        Live["LivePusherContextStop"] = "LivePusherContext.stop";
        Live["LivePusherContextSwitchCamera"] = "LivePusherContext.switchCamera";
        Live["LivePusherContextToggleTorch"] = "LivePusherContext.toggleTorch";
        Live["LivePlayerContext"] = "LivePlayerContext";
        Live["LivePlayerContextPlay"] = "LivePlayerContext.play";
        Live["LivePlayerContextPause"] = "LivePlayerContext.pause";
        Live["LivePlayerContextResume"] = "LivePlayerContext.resume";
        Live["LivePlayerContextStop"] = "LivePlayerContext.stop";
        Live["LivePlayerContextMute"] = "LivePlayerContext.mute";
        Live["LivePlayerContextRequestFullScreen"] = "LivePlayerContext.requestFullScreen";
        Live["LivePlayerContextShowFloatingWindow"] = "LivePlayerContext.showFloatingWindow";
    })(Live = Type.Live || (Type.Live = {}));
    var Map;
    (function (Map) {
        Map["MapContext"] = "MapContext";
        Map["MapContextCalculateDistance"] = "MapContext.calculateDistance";
        Map["MapContextChangeMarkers"] = "MapContext.changeMarkers";
        Map["MapContextClearRoute"] = "MapContext.clearRoute";
        Map["MapContextGestureEnable"] = "MapContext.gestureEnable";
        Map["MapContextGetCenterLocation"] = "MapContext.getCenterLocation";
        Map["MapContextGetMapProperties"] = "MapContext.getMapProperties";
        Map["MapContextGetRegion"] = "MapContext.getRegion";
        Map["MapContextMoveToLocation"] = "MapContext.moveToLocation";
        Map["MapContextShowRoute"] = "MapContext.showRoute";
        Map["MapContextShowsCompass"] = "MapContext.showsCompass";
        Map["MapContextShowsScale"] = "MapContext.showsScale";
        Map["MapContextSmoothMoveMarker"] = "MapContext.smoothMoveMarker";
        Map["MapContextSmoothMovePolyline"] = "MapContext.smoothMovePolyline";
        Map["MapContextTranslateMarker"] = "MapContext.translateMarker";
        Map["MapContextUpdateComponents"] = "MapContext.updateComponents";
    })(Map = Type.Map || (Type.Map = {}));
    var AR;
    (function (AR) {
        AR["ARContext"] = "ARContext";
        AR["ARContextGetCameraPosition"] = "ARContext.getCameraPosition";
        AR["ARContextSwitchCameraPosition"] = "ARContext.switchCameraPosition";
        AR["ARContextRotateScene"] = "ARContext.rotateScene";
        AR["ARContextTranslateScene"] = "ARContext.translateScene";
        AR["ARContextScaleScene"] = "ARContext.scaleScene";
        AR["ARContextTransformCoordinate"] = "ARContext.transformCoordinate";
        AR["ARContextHitTest"] = "ARContext.hitTest";
        AR["ARContextIsNodeVisible"] = "ARContext.isNodeVisible";
        AR["ARContextSetNodeVisible"] = "ARContext.setNodeVisible";
        AR["ARContextGetNodePosition"] = "ARContext.getNodePosition";
        AR["ARContextGetNodeRotation"] = "ARContext.getNodeRotation";
        AR["ARContextGetNodeScale"] = "ARContext.getNodeScale";
        AR["ARContextSetNodePosition"] = "ARContext.setNodePosition";
        AR["ARContextTranslateNode"] = "ARContext.translateNode";
        AR["ARContextRotateNode"] = "ARContext.rotateNode";
        AR["ARContextScaleNode"] = "ARContext.scaleNode";
        AR["ARContextSetNodeBillboard"] = "ARContext.setNodeBillboard";
        AR["ARContextSetNodeStatic"] = "ARContext.setNodeStatic";
        AR["ARContextSetLightAmbientColor"] = "ARContext.setLightAmbientColor";
        AR["ARContextSetLightColor"] = "ARContext.setLightColor";
        AR["ARContextSetLightRange"] = "ARContext.setLightRange";
        AR["ARContextSetLightInnerAngle"] = "ARContext.setLightInnerAngle";
        AR["ARContextSetLightOuterAngle"] = "ARContext.setLightOuterAngle";
        AR["ARContextSetNodeTexture"] = "ARContext.setNodeTexture";
        AR["ARContextRemoveTextureCache"] = "ARContext.removeTextureCache";
        AR["ARContextModulateAlpha"] = "ARContext.modulateAlpha";
        AR["ARContextModulateColor"] = "ARContext.modulateColor";
        AR["ARContextStartEnvironmentTexturing"] = "ARContext.startEnvironmentTexturing";
        AR["ARContextStopEnvironmentTexturing"] = "ARContext.stopEnvironmentTexturing";
        AR["ARContextPlayAnimation"] = "ARContext.playAnimation";
        AR["ARContextPauseAnimation"] = "ARContext.pauseAnimation";
        AR["ARContextResumeAnimation"] = "ARContext.resumeAnimation";
        AR["ARContextStopAnimation"] = "ARContext.stopAnimation";
        AR["ARContextCreateAnimation"] = "ARContext.createAnimation";
        AR["ARContextCreateAnimationClip"] = "ARContext.createAnimationClip";
        AR["ARContextSetAnimationAdditiveBlending"] = "ARContext.setAnimationAdditiveBlending";
        AR["ARContextClearAnimationAdditiveBlending"] = "ARContext.clearAnimationAdditiveBlending";
        AR["ARContextCrossFadeAnimation"] = "ARContext.crossFadeAnimation";
        AR["ARContextLoadAnimation"] = "ARContext.loadAnimation";
        AR["ARContextEmitParticle"] = "ARContext.emitParticle";
        AR["ARContextGetTrackMode"] = "ARContext.getTrackMode";
        AR["ARContextResetScene"] = "ARContext.resetScene";
        AR["ARContextGetFaceTrackingStatus"] = "ARContext.getFaceTrackingStatus";
        AR["ARContextStartFaceTracking"] = "ARContext.startFaceTracking";
        AR["ARContextSetFaceTrackingNode"] = "ARContext.setFaceTrackingNode";
        AR["ARContextGetFaceInfo"] = "ARContext.getFaceInfo";
        AR["ARContextStopFaceTracking"] = "ARContext.stopFaceTracking";
        AR["ARContextGetSmileDetectingStatus"] = "ARContext.getSmileDetectingStatus";
        AR["ARContextStartSmileDetecting"] = "ARContext.startSmileDetecting";
        AR["ARContextGetSmileDetectingScore"] = "ARContext.getSmileDetectingScore";
        AR["ARContextStopSmileDetecting"] = "ARContext.stopSmileDetecting";
        AR["ARContextGetGestureDetectingStatus"] = "ARContext.getGestureDetectingStatus";
        AR["ARContextStartGestureDetecting"] = "ARContext.startGestureDetecting";
        AR["ARContextStopGestureDetecting"] = "ARContext.stopGestureDetecting";
        AR["ARContextGetGestureDetectingResult"] = "ARContext.getGestureDetectingResult";
        AR["ARContextGetGestureDetectingScore"] = "ARContext.getGestureDetectingScore";
        /** 姿势识别 */
        AR["ARPoseOnPoseResult"] = "AR.onPoseResult";
        AR["ARPoseConfig"] = "AR.pose.config";
        AR["ARPoseStatus"] = "AR.pose.status";
        AR["ARPoseStart"] = "AR.pose.start";
        AR["ARPoseStop"] = "AR.pose.stop";
        AR["ARPoseScore"] = "AR.pose.score";
        AR["ARContextGetPoseDetectingStatus"] = "ARContext.getPoseDetectingStatus";
        AR["ARContextStartPoseDetecting"] = "ARContext.startPoseDetecting";
        AR["ARContextGetPoseDetectingScore"] = "ARContext.getPoseDetectingScore";
        AR["ARContextStopPoseDetecting"] = "ARContext.stopPoseDetecting";
    })(AR = Type.AR || (Type.AR = {}));
    var RtcRoom;
    (function (RtcRoom) {
        RtcRoom["RtcRoomContext"] = "RtcRoomContext";
        RtcRoom["RtcRoomContextStart"] = "RtcRoomContext.start";
        RtcRoom["RtcRoomContextStop"] = "RtcRoomContext.stop";
        RtcRoom["RtcRoomContextMute"] = "RtcRoomContext.mute";
        RtcRoom["RtcRoomContextSwitchCamera"] = "RtcRoomContext.switchCamera";
        RtcRoom["RtcRoomContextEnableCamera"] = "RtcRoomContext.enableCamera";
        RtcRoom["RtcRoomContextAudioMode"] = "RtcRoomContext.audioMode";
        RtcRoom["RtcRoomContextSendMessage"] = "RtcRoomContext.sendMessage";
        RtcRoom["RtcRoomContextSnapshot"] = "RtcRoomContext.snapshot";
        RtcRoom["RtcRoomContextShowPreView"] = "RtcRoomContext.showPreView";
        RtcRoom["RtcRoomContextStartScreenCapture"] = "RtcRoomContext.startScreenCapture";
        RtcRoom["RtcRoomContextStopScreenCapture"] = "RtcRoomContext.stopScreenCapture";
    })(RtcRoom = Type.RtcRoom || (Type.RtcRoom = {}));
    var Video;
    (function (Video) {
        Video["VideoContext"] = "VideoContext";
        Video["VideoContextPlay"] = "VideoContext.play";
        Video["VideoContextPause"] = "VideoContext.pause";
        Video["VideoContextStop"] = "VideoContext.stop";
        Video["VideoContextSeek"] = "VideoContext.seek";
        Video["VideoContextRequestFullScreen"] = "VideoContext.requestFullScreen";
        Video["VideoContextExitFullScreen"] = "VideoContext.exitFullScreen";
        Video["VideoContextShowStatusBar"] = "VideoContext.showStatusBar";
        Video["VideoContextHideStatusBar"] = "VideoContext.hideStatusBar";
        Video["VideoContextMute"] = "VideoContext.mute";
        Video["VideoContextPlaybackRate"] = "VideoContext.playbackRate";
        Video["VideoContextShowFloatingWindow"] = "VideoContext.showFloatingWindow";
    })(Video = Type.Video || (Type.Video = {}));
    var Camera;
    (function (Camera) {
        Camera["CameraContext"] = "CameraContext";
        Camera["CameraContextOnCameraFrame"] = "CameraContext.onCameraFrame";
        Camera["CameraContextOnCameraFrameCameraFrameListener"] = "CameraFrameListener";
        Camera["CameraContextOnCameraFrameCameraFrameListenerStart"] = "CameraFrameListener.start";
        Camera["CameraContextOnCameraFrameCameraFrameListenerStop"] = "CameraFrameListener.stop";
        Camera["CameraContextStartRecord"] = "CameraContext.startRecord";
        Camera["CameraContextStopRecord"] = "CameraContext.stopRecord";
        Camera["CameraContextTakePhoto"] = "CameraContext.takePhoto";
        Camera["AICameraContext"] = "AICameraContext";
        Camera["AICameraContextTakePhoto"] = "AICameraContext.takePhoto";
        Camera["AICameraContextStartRecord"] = "AICameraContext.startRecord";
        Camera["AICameraContextStopRecord"] = "AICameraContext.stopRecord";
        Camera["AICameraContextStartAudioRecognize"] = "AICameraContext.startAudioRecognize";
        Camera["AICameraContextStopAudioRecognize"] = "AICameraContext.stopAudioRecognize";
        Camera["AICameraContextStartVideoRecognize"] = "AICameraContext.startVideoRecognize";
        Camera["AICameraContextStopVideoRecognize"] = "AICameraContext.stopVideoRecognize";
        Camera["AICameraContextHasHeadset"] = "AICameraContext.hasHeadset";
    })(Camera = Type.Camera || (Type.Camera = {}));
    var Lottie;
    (function (Lottie) {
        Lottie["LottieContext"] = "LottieContext";
        Lottie["LottieContextPlay"] = "LottieContext.play";
        Lottie["LottieContextStop"] = "LottieContext.stop";
        Lottie["LottieContextPause"] = "LottieContext.pause";
        Lottie["LottieContextSetSpeed"] = "LottieContext.setSpeed";
        Lottie["LottieContextGoToAndStop"] = "LottieContext.goToAndStop";
        Lottie["LottieContextGoToAndPlay"] = "LottieContext.goToAndPlay";
        Lottie["LottieContextPlayFromMinToMaxProgress"] = "LottieContext.playFromMinToMaxProgress";
        Lottie["LottieContextPlayFromMinToMaxFrame"] = "LottieContext.playFromMinToMaxFrame";
        Lottie["LottieContextDowngradeToPlaceholder"] = "LottieContext.downgradeToPlaceholder";
    })(Lottie = Type.Lottie || (Type.Lottie = {}));
    var WebView;
    (function (WebView) {
        WebView["WebViewContext"] = "WebViewContext";
        WebView["WebViewContextPostMessage"] = "WebViewContext.postMessage";
    })(WebView = Type.WebView || (Type.WebView = {}));
    var RDS;
    (function (RDS) {
        RDS["RDSContext"] = "RDSContext";
        RDS["RDSContextEnableDetect"] = "RDSContext.enableDetect";
        RDS["RDSContextGetRDSData"] = "RDSContext.getRDSData";
    })(RDS = Type.RDS || (Type.RDS = {}));
})(Type = exports.Type || (exports.Type = {}));
//# sourceMappingURL=type.js.map