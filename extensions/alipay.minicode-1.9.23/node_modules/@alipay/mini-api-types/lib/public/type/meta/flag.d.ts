export declare namespace Flag {
    const enum Navigation {
        AlipayPageAppCode = "Navigation$AlipayPageAppCode"
    }
    const enum Bluetooth {
        ChangeState = "Bluetooth$ChangeState",
        DiscoveryFeature = "Bluetooth$DiscoveryFeature"
    }
    const enum Device {
        SystemInfo140 = "Device$SystemInfo140",
        SystemInfoAuthorized = "Device$SystemInfoAuthorized",
        AddPhoneContact = "Device$AddPhoneContact",
        GetDeviceIDType = "GetDeviceIDType",
        EnvClientName = "Env.clientName",
        EnvClientVersion = "Env.clientVersion",
        EnvLanguage = "Env.language",
        EnvPlatform = "Env.platform"
    }
    const enum UI {
        InteractiveButtonColor = "UI$InteractiveButtonColor",
        ShowActionSheetBadges = "UI$ShowActionSheetBadges",
        DatePickerFormatyyyyMM = "DatePickerFormatyyyy-MM",
        DatePickerFormatyyyy = "DatePickerFormatyyyy"
    }
    const enum Scroll {
        PageScrollToSelector = "PageScrollToSelector",
        PageScrollToDuration = "PageScrollToDuration"
    }
    const enum Internal {
        Zero = "Internal$Zero"
    }
    const enum Request {
        RequestMethodPut = "RequestMethodPut",
        RequestMethodDelete = "RequestMethodDelete",
        RequestDataArrayBuffer = "RequestDataArrayBuffer",
        RequestDataTypeArrayBuffer = "RequestDataTypeArrayBuffer",
        UploadFileUploadTaskAbort = "UploadFileUploadTaskAbort",
        UploadFileUploadTaskonProgressUpdate = "UploadFileUploadTaskonProgressUpdate",
        UploadFileToAliCloudNeedRetry = "UploadFileToAliCloudNeedRetry",
        UploadFileToAliCloudIsPrivate = "UploadFileToAliCloudIsPrivate",
        UploadFileToAliCloudHideLoading = "UploadFileToAliCloudHideLoading",
        UploadFileToAliCloudNeedDelete = "UploadFileToAliCloudNeedDelete",
        UploadFileToAliCloudSharedBiz = "UploadFileToAliCloudSharedBiz"
    }
    const enum FileSystem {
        GetSavedFileList = "FileSystemGetSavedFileList",
        GetSavedFileListSync = "FileSystemGetSavedFileListSync"
    }
    const enum Location {
        ChooseCityLongitude = "ChooseCityLongitude",
        ChooseCityLatitude = "ChooseCityLatitude"
    }
    const enum Audio {
        BackgroundAudioManagerIsRecordAudioPlayState = "BackgroundAudioManagerIsRecordAudioPlayState",
        InnerAudioContextIsRecordAudioPlayState = "InnerAudioContextIsRecordAudioPlayState",
        InnerAudioContextSupportBackgroundPlay = "InnerAudioContext.supportBackgroundPlay"
    }
    const enum RecorderManager {
        RecorderManagerStartFormat = "RecorderManager.start.format",
        RecorderManagerStartFrameSize = "RecorderManager.start.frameSize",
        RecorderManagerOnFrameRecordedFrameBuffer = "RecorderManager.onFrameRecorded.frameBuffer",
        RecorderManagerOnFrameRecordedIsLastFrame = "RecorderManager.onFrameRecorded.isLastFrame"
    }
    const enum Map {
        GetMapInfo = "Map$GetMapInfo",
        MapContextCalculateDistance = "MapContext.calculateDistance",
        MapContextChangeMarkers = "MapContext.changeMarkers",
        MapContextClearRoute = "MapContext.clearRoute",
        MapContextGestureEnable = "MapContext.gestureEnable",
        MapContextGetCenterLocation = "MapContext.getCenterLocation",
        MapContextGetMapProperties = "MapContext.getMapProperties",
        MapContextGetRegion = "MapContext.getRegion",
        MapContextMoveToLocation = "MapContext.moveToLocation",
        MapContextShowRoute = "MapContext.showRoute",
        MapContextShowsCompass = "MapContext.showsCompass",
        MapContextShowsScale = "MapContext.showsScale",
        MapContextSmoothMoveMarker = "MapContext.smoothMoveMarker",
        MapContextSmoothMovePolyline = "MapContext.smoothMovePolyline",
        MapContextTranslateMarker = "MapContext.translateMarker",
        MapContextUpdateComponents = "MapContext.updateComponents",
        MapContextMarkerLevel = "MapContext.markerLevel",
        MapContextMarkerStyle = "MapContext.marker.style",
        MapContextMarkerLabel = "MapContext.marker.label",
        MapContextPolylineIconPath = "MapContext.polyline.iconPath",
        MapContextPolylineIconWidth = "MapContext.polyline.iconWidth",
        MapContextPropertySdkName = "MapContext.property.sdkName",
        MapContextPropertySdkVersion = "MapContext.property.sdkVersion",
        MapContextPropertyIsSupportOversea = "MapContext.property.isSupportOversea",
        MapContextPropertyNeedStyleV7 = "MapContext.marker.needStyleV7",
        MapContextShowRouteSearchType = "MapContext.showRoute.searchType",
        MapContextShowRouteThroughPoints = "MapContext.showRoute.throughPoints",
        MapContextShowRouteZIndex = "MapContext.showRoute.zIndex",
        MapContextMarkerAnimationType = "MapContext.marker.animation.type"
    }
    const enum AR {
        SetFaceTrackingNodeOptionFacePoints = "setFaceTrackingNode.option.facePoints",
        SetFaceTrackingNodeOptionFaceFrame = "setFaceTrackingNode.option.faceFrame"
    }
    const enum Media {
        IsSpeechRecognizeAvailableExtraInfo = "isSpeechRecognizeAvailableExtraInfo.extraInfo",
        StartSpeechRecognizeEncodeAudio = "startSpeechRecognize.encodeAudio",
        StartSpeechRecognizeExtraInfo = "startSpeechRecognize.extraInfo",
        StartSpeechRecognizeExtraInfoEnableDBCallback = "startSpeechRecognize.extraInfo.enableDBCallback",
        OnSpeechRecognizeResultTempAudioPath = "onSpeechRecognizeResult.tempAudioPath"
    }
    const enum Video {
        ChooseVideoResponseTempFilePath = "chooseVideo.response.tempFilePath"
    }
    const enum Image {
        SaveImageShowActionSheet = "saveImage.showActionSheet",
        PreviewImageEnablesavephoto = "previewImage.enablesavephoto",
        PreviewImageEnableShowPhotoDownload = "previewImage.enableShowPhotoDownload"
    }
    const enum Favorite {
        AddToFavoriteBizType = "addToFavorite.bizType",
        AddToFavoriteExtraInfo = "addToFavorite.extraInfo",
        RemoveFromFavoriteBizType = "removeFromFavorite.bizType",
        RemoveFromFavoriteExtraInfo = "removeFromFavorite.extraInfo"
    }
    const enum Performance {
        EnableSnapshotDisableDynamicPluginCheck = "enableSnapshot.disableDynamicPluginCheck"
    }
    type Flags = Internal | Navigation | Bluetooth | UI | Map | Device | Scroll | Request | FileSystem | Audio | RecorderManager | AR | Media | Video | Image | Favorite | Performance | Location;
}
//# sourceMappingURL=flag.d.ts.map