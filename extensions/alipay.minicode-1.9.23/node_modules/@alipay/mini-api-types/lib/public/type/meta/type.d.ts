export declare namespace Type {
    const enum Open {
        NSFBizContext = "NSFBizContext"
    }
    const enum Interactive {
        PromptOk = "PromptOk",
        PromptCancel = "PromptCancel",
        CancelButtonColor = "CancelButtonColor",
        ConfirmButtonColor = "ConfirmButtonColor"
    }
    const enum App {
        Rejection = "Rejection",
        ReferrerInfo = "ReferrerInfo",
        ReportAnalyticsData = "ReportAnalyticsData",
        RequirePlugin = "requirePlugin"
    }
    const enum Navigation {
        AlipayPageOptionAppCode = "AlipayPageOptionAppCode",
        AlipayPageOptionPath = "AlipayPageOptionPath"
    }
    const enum Bluetooth {
        BLECharacteristic = "BLECharacteristic",
        BLEProperties = "BLEProperties",
        BlueBoothCommonError = "BlueBoothCommonError",
        EBlueBoothErrorCodeCommon = "EBlueBoothErrorCodeCommon"
    }
    const enum Shared {
        Callback = "Callback"
    }
    const enum Worker {
        Instance = "Worker.Instance",
        onMessage = "Worker.onMessage",
        MessageCallback = "Worker.MessageCallback",
        postMessage = "Worker.postMessage",
        terminate = "Worker.terminate"
    }
    const enum CanvasContext {
        Context = "CanvasContext",
        addColorStop = "CanvasContext.addColorStop",
        arc = "CanvasContext.arc",
        beginPath = "CanvasContext.beginPath",
        bezierCurveTo = "CanvasContext.bezierCurveTo",
        clearRect = "CanvasContext.clearRect",
        clip = "CanvasContext.clip",
        closePath = "CanvasContext.closePath",
        createCircularGradient = "CanvasContext.createCircularGradient",
        createLinearGradient = "CanvasContext.createLinearGradient",
        fill = "CanvasContext.fill",
        fillRect = "CanvasContext.fillRect",
        fillText = "CanvasContext.fillText",
        getImageData = "CanvasContext.getImageData",
        lineTo = "CanvasContext.lineTo",
        measureText = "CanvasContext.measureText",
        moveTo = "CanvasContext.moveTo",
        putImageData = "CanvasContext.putImageData",
        quadraticCurveTo = "CanvasContext.quadraticCurveTo",
        rect = "CanvasContext.rect",
        restore = "CanvasContext.restore",
        rotate = "CanvasContext.rotate",
        save = "CanvasContext.save",
        scale = "CanvasContext.scale",
        setFillStyle = "CanvasContext.setFillStyle",
        setFontSize = "CanvasContext.setFontSize",
        setGlobalAlpha = "CanvasContext.setGlobalAlpha",
        setLineCap = "CanvasContext.setLineCap",
        setLineDash = "CanvasContext.setLineDash",
        setLineJoin = "CanvasContext.setLineJoin",
        setLineWidth = "CanvasContext.setLineWidth",
        setMiterLimit = "CanvasContext.setMiterLimit",
        setShadow = "CanvasContext.setShadow",
        setStrokeStyle = "CanvasContext.setStrokeStyle",
        setTextAlign = "CanvasContext.setTextAlign",
        setTextBaseline = "CanvasContext.setTextBaseline",
        setTransform = "CanvasContext.setTransform",
        stroke = "CanvasContext.stroke",
        strokeRect = "CanvasContext.strokeRect",
        toDataURL = "CanvasContext.toDataURL",
        toTempFilePath = "CanvasContext.toTempFilePath",
        transform = "CanvasContext.transform",
        translate = "CanvasContext.translate",
        Draw = "CanvasContext.draw",
        DrawImage = "CanvasContext.drawImage"
    }
    const enum Version {
    }
    const enum UpdateManager {
        Manager = "UpdateManager$Manager",
        ApplyUpdate = "UpdateManager$ApplyUpdate",
        OnCheckForUpdate = "UpdateManager$OnCheckForUpdate",
        OnCheckForUpdateCallback = "UpdateManager$OnCheckForUpdateCallback",
        OnUpdateReady = "UpdateManager$OnUpdateReady",
        OnUpdateFailed = "UpdateManager$OnUpdateFailed"
    }
    const enum SystemInfo {
        Env = "SystemInfo$Env",
        Info = "SystemInfo$Info",
        InfoBasic = "SystemInfo$InfoBasic",
        Info140 = "SystemInfo$Info140",
        InfoAuthorized = "SystemInfo$InfoAuthorized",
        SafeArea = "SystemInfo$SafeArea"
    }
    const enum Storage {
        StorageInfo = "Storage$StorageInfo"
    }
    const enum UI {
    }
    const enum Dom {
        SelectorQuery = "SelectorQuery",
        SelectorQuerySelect = "SelectorQuery.select",
        SelectorQuerySelectAll = "SelectorQuery.selectAll",
        SelectorQueryBoundingClientRect = "SelectorQuery.boundingClientRect",
        SelectorQueryScrollOffset = "SelectorQuery.scrollOffset",
        SelectorQueryExec = "SelectorQuery.exec",
        SelectorQuerySelectViewport = "SelectorQuery.selectViewport",
        IntersectionObserver = "IntersectionObserver",
        IntersectionObserverDisconnect = "IntersectionObserver.disconnect",
        IntersectionObserverObserve = "IntersectionObserver.observe",
        IntersectionObserverRelativeTo = "IntersectionObserver.relativeTo",
        IntersectionObserverRelativeToViewport = "IntersectionObserver.relativeToViewport",
        AnimationContext = "AnimationContext",
        AnimationContextStep = "AnimationContext.step",
        AnimationContextExport = "AnimationContext.export",
        AnimationContextOpacity = "AnimationContext.opacity",
        AnimationContextBackgroundColor = "AnimationContext.backgroundColor",
        AnimationContextWidth = "AnimationContext.width",
        AnimationContextHeight = "AnimationContext.height",
        AnimationContextTop = "AnimationContext.top",
        AnimationContextLeft = "AnimationContext.left",
        AnimationContextBottom = "AnimationContext.bottom",
        AnimationContextRight = "AnimationContext.right",
        AnimationContextRotate = "AnimationContext.rotate",
        AnimationContextRotateX = "AnimationContext.rotateX",
        AnimationContextRotateY = "AnimationContext.rotateY",
        AnimationContextRotateZ = "AnimationContext.rotateZ",
        AnimationContextRotate3d = "AnimationContext.rotate3d",
        AnimationContextScale = "AnimationContext.scale",
        AnimationContextScaleX = "AnimationContext.scaleX",
        AnimationContextScaleY = "AnimationContext.scaleY",
        AnimationContextScaleZ = "AnimationContext.scaleZ",
        AnimationContextScale3d = "AnimationContext.scale3d",
        AnimationContextTranslate = "AnimationContext.translate",
        AnimationContextTranslateX = "AnimationContext.translateX",
        AnimationContextTranslateY = "AnimationContext.translateY",
        AnimationContextTranslateZ = "AnimationContext.translateZ",
        AnimationContextTranslate3d = "AnimationContext.translate3d",
        AnimationContextSkew = "AnimationContext.skew",
        AnimationContextSkewX = "AnimationContext.skewX",
        AnimationContextSkewY = "AnimationContext.skewY",
        AnimationContextMatrix = "AnimationContext.matrix",
        AnimationContextMatrix3d = "AnimationContext.matrix3d"
    }
    const enum FileSystem {
        Mkdir = "FileSystemManager.mkdir",
        MkdirSync = "FileSystemManager.mkdirSync",
        AppendFile = "FileSystemManager.appendFile",
        AppendFileSync = "FileSystemManager.appendFileSync",
        CopyFile = "FileSystemManager.copyFile",
        CopyFileSync = "FileSystemManager.copyFileSync",
        Readdir = "FileSystemManager.readdir",
        ReaddirSync = "FileSystemManager.readdirSync",
        RemoveSavedFile = "FileSystemManager.removeSavedFile",
        RemoveSavedFileSync = "FileSystemManager.removeSavedFileSync",
        Rename = "FileSystemManager.rename",
        RenameSync = "FileSystemManager.renameSync",
        Stat = "FileSystemManager.stat",
        StatSync = "FileSystemManager.statSync",
        Unlink = "FileSystemManager.unlink",
        UnlinkSync = "FileSystemManager.unlinkSync",
        Unzip = "FileSystemManager.unzip",
        WriteFile = "FileSystemManager.writeFile",
        WriteFileSync = "FileSystemManager.writeFileSync",
        GetFileInfo = "FileSystemManager.getFileInfo",
        GetFileInfoSync = "FileSystemManager.getFileInfoSync",
        ReadFile = "FileSystemManager.readFile",
        ReadFileSync = "FileSystemManager.readFileSync",
        GetSavedFileList = "FileSystemManager.getSavedFileList",
        GetSavedFileListSync = "FileSystemManager.getSavedFileListSync",
        SaveFile = "FileSystemManager.saveFile",
        SaveFileSync = "FileSystemManager.saveFileSync",
        Access = "FileSystemManager.access",
        AccessSync = "FileSystemManager.accessSync",
        Rmdir = "FileSystemManager.rmdir",
        RmdirSync = "FileSystemManager.rmdirSync"
    }
    const enum Audio {
        BackgroundAudioManager = "BackgroundAudioManager",
        BackgroundAudioManagerPlay = "BackgroundAudioManager.play",
        BackgroundAudioManagerPause = "BackgroundAudioManager.pause",
        BackgroundAudioManagerStop = "BackgroundAudioManager.stop",
        BackgroundAudioManagerSeek = "BackgroundAudioManager.seek",
        BackgroundAudioManagerOnCanplay = "BackgroundAudioManager.onCanplay",
        BackgroundAudioManagerOnWaiting = "BackgroundAudioManager.onWaiting",
        BackgroundAudioManagerOnError = "BackgroundAudioManager.onError",
        BackgroundAudioManagerOnPlay = "BackgroundAudioManager.onPlay",
        BackgroundAudioManagerOnPause = "BackgroundAudioManager.onPause",
        BackgroundAudioManagerOnSeeking = "BackgroundAudioManager.onSeeking",
        BackgroundAudioManagerOnSeeked = "BackgroundAudioManager.onSeeked",
        BackgroundAudioManagerOnEnded = "BackgroundAudioManager.onEnded",
        BackgroundAudioManagerOnStop = "BackgroundAudioManager.onStop",
        BackgroundAudioManagerOnTimeUpdate = "BackgroundAudioManager.onTimeUpdate",
        BackgroundAudioManagerOnNext = "BackgroundAudioManager.onNext",
        BackgroundAudioManagerOnPrev = "BackgroundAudioManager.onPrev",
        AudioContext = "AudioContext",
        AudioContextSetSrc = "AudioContext.setSrc",
        AudioContextPlay = "AudioContext.play",
        AudioContextPause = "AudioContext.pause",
        AudioContextSeek = "AudioContext.seek",
        InnerAudioContext = "InnerAudioContext",
        InnerAudioContextPlay = "InnerAudioContext.play",
        InnerAudioContextPause = "InnerAudioContext.pause",
        InnerAudioContextStop = "InnerAudioContext.stop",
        InnerAudioContextSeek = "InnerAudioContext.seek",
        InnerAudioContextDestory = "InnerAudioContext.destory",
        InnerAudioContextOnCanplay = "InnerAudioContext.onCanplay",
        InnerAudioContextOnPlay = "InnerAudioContext.onPlay",
        InnerAudioContextOnPause = "InnerAudioContext.onPause",
        InnerAudioContextOnStop = "InnerAudioContext.onStop",
        InnerAudioContextOnEnded = "InnerAudioContext.onEnded",
        InnerAudioContextOnTimeUpdate = "InnerAudioContext.onTimeUpdate",
        InnerAudioContextOnError = "InnerAudioContext.onError",
        InnerAudioContextOnWaiting = "InnerAudioContext.onWaiting",
        InnerAudioContextOnSeeking = "InnerAudioContext.onSeeking",
        InnerAudioContextOnSeeked = "InnerAudioContext.onSeeked",
        InnerAudioContextOffCanplay = "InnerAudioContext.offCanplay",
        InnerAudioContextOffPlay = "InnerAudioContext.offPlay",
        InnerAudioContextOffPause = "InnerAudioContext.offPause",
        InnerAudioContextOffStop = "InnerAudioContext.offStop",
        InnerAudioContextOffEnded = "InnerAudioContext.offEnded",
        InnerAudioContextOffTimeUpdate = "InnerAudioContext.offTimeUpdate",
        InnerAudioContextOffError = "InnerAudioContext.offError",
        InnerAudioContextOffWaiting = "InnerAudioContext.offWaiting",
        InnerAudioContextOffSeeking = "InnerAudioContext.offSeeking",
        InnerAudioContextOffSeeked = "InnerAudioContext.offSeeked"
    }
    const enum RecorderManager {
        RecorderManager = "RecorderManager",
        RecorderManagerStart = "RecorderManager.start",
        RecorderManagerStop = "RecorderManager.stop",
        RecorderManagerPause = "RecorderManager.pause",
        RecorderManagerResume = "RecorderManager.resume",
        RecorderManagerOnError = "RecorderManager.onError",
        RecorderManagerOnDecibelChange = "RecorderManager.onDecibelChange",
        RecorderManagerOnStart = "RecorderManager.onStart",
        RecorderManagerOnStop = "RecorderManager.onStop",
        RecorderManagerOnPause = "RecorderManager.onPause",
        RecorderManagerOnResume = "RecorderManager.onResume",
        RecorderManagerOffError = "RecorderManager.offError",
        RecorderManagerOffDecibelChange = "RecorderManager.offDecibelChange",
        RecorderManagerOffStart = "RecorderManager.offStart",
        RecorderManagerOffStop = "RecorderManager.offStop",
        RecorderManagerOffPause = "RecorderManager.offPause",
        RecorderManagerOffResume = "RecorderManager.offResume",
        RecorderManagerOnFrameRecorded = "RecorderManager.onFrameRecorded",
        RecorderManagerOffFrameRecorded = "RecorderManager.offFrameRecorded"
    }
    const enum Live {
        LivePusherContext = "LivePusherContext",
        LivePusherContextStart = "LivePusherContext.start",
        LivePusherContextPause = "LivePusherContext.pause",
        LivePusherContextResume = "LivePusherContext.resume",
        LivePusherContextStop = "LivePusherContext.stop",
        LivePusherContextSwitchCamera = "LivePusherContext.switchCamera",
        LivePusherContextToggleTorch = "LivePusherContext.toggleTorch",
        LivePlayerContext = "LivePlayerContext",
        LivePlayerContextPlay = "LivePlayerContext.play",
        LivePlayerContextPause = "LivePlayerContext.pause",
        LivePlayerContextResume = "LivePlayerContext.resume",
        LivePlayerContextStop = "LivePlayerContext.stop",
        LivePlayerContextMute = "LivePlayerContext.mute",
        LivePlayerContextRequestFullScreen = "LivePlayerContext.requestFullScreen",
        LivePlayerContextShowFloatingWindow = "LivePlayerContext.showFloatingWindow"
    }
    const enum Map {
        MapContext = "MapContext",
        MapContextCalculateDistance = "MapContext.calculateDistance",
        MapContextChangeMarkers = "MapContext.changeMarkers",
        MapContextClearRoute = "MapContext.clearRoute",
        MapContextGestureEnable = "MapContext.gestureEnable",
        MapContextGetCenterLocation = "MapContext.getCenterLocation",
        MapContextGetMapProperties = "MapContext.getMapProperties",
        MapContextGetRegion = "MapContext.getRegion",
        MapContextMoveToLocation = "MapContext.moveToLocation",
        MapContextShowRoute = "MapContext.showRoute",
        MapContextShowsCompass = "MapContext.showsCompass",
        MapContextShowsScale = "MapContext.showsScale",
        MapContextSmoothMoveMarker = "MapContext.smoothMoveMarker",
        MapContextSmoothMovePolyline = "MapContext.smoothMovePolyline",
        MapContextTranslateMarker = "MapContext.translateMarker",
        MapContextUpdateComponents = "MapContext.updateComponents"
    }
    const enum AR {
        ARContext = "ARContext",
        ARContextGetCameraPosition = "ARContext.getCameraPosition",
        ARContextSwitchCameraPosition = "ARContext.switchCameraPosition",
        ARContextRotateScene = "ARContext.rotateScene",
        ARContextTranslateScene = "ARContext.translateScene",
        ARContextScaleScene = "ARContext.scaleScene",
        ARContextTransformCoordinate = "ARContext.transformCoordinate",
        ARContextHitTest = "ARContext.hitTest",
        ARContextIsNodeVisible = "ARContext.isNodeVisible",
        ARContextSetNodeVisible = "ARContext.setNodeVisible",
        ARContextGetNodePosition = "ARContext.getNodePosition",
        ARContextGetNodeRotation = "ARContext.getNodeRotation",
        ARContextGetNodeScale = "ARContext.getNodeScale",
        ARContextSetNodePosition = "ARContext.setNodePosition",
        ARContextTranslateNode = "ARContext.translateNode",
        ARContextRotateNode = "ARContext.rotateNode",
        ARContextScaleNode = "ARContext.scaleNode",
        ARContextSetNodeBillboard = "ARContext.setNodeBillboard",
        ARContextSetNodeStatic = "ARContext.setNodeStatic",
        ARContextSetLightAmbientColor = "ARContext.setLightAmbientColor",
        ARContextSetLightColor = "ARContext.setLightColor",
        ARContextSetLightRange = "ARContext.setLightRange",
        ARContextSetLightInnerAngle = "ARContext.setLightInnerAngle",
        ARContextSetLightOuterAngle = "ARContext.setLightOuterAngle",
        ARContextSetNodeTexture = "ARContext.setNodeTexture",
        ARContextRemoveTextureCache = "ARContext.removeTextureCache",
        ARContextModulateAlpha = "ARContext.modulateAlpha",
        ARContextModulateColor = "ARContext.modulateColor",
        ARContextStartEnvironmentTexturing = "ARContext.startEnvironmentTexturing",
        ARContextStopEnvironmentTexturing = "ARContext.stopEnvironmentTexturing",
        ARContextPlayAnimation = "ARContext.playAnimation",
        ARContextPauseAnimation = "ARContext.pauseAnimation",
        ARContextResumeAnimation = "ARContext.resumeAnimation",
        ARContextStopAnimation = "ARContext.stopAnimation",
        ARContextCreateAnimation = "ARContext.createAnimation",
        ARContextCreateAnimationClip = "ARContext.createAnimationClip",
        ARContextSetAnimationAdditiveBlending = "ARContext.setAnimationAdditiveBlending",
        ARContextClearAnimationAdditiveBlending = "ARContext.clearAnimationAdditiveBlending",
        ARContextCrossFadeAnimation = "ARContext.crossFadeAnimation",
        ARContextLoadAnimation = "ARContext.loadAnimation",
        ARContextEmitParticle = "ARContext.emitParticle",
        ARContextGetTrackMode = "ARContext.getTrackMode",
        ARContextResetScene = "ARContext.resetScene",
        ARContextGetFaceTrackingStatus = "ARContext.getFaceTrackingStatus",
        ARContextStartFaceTracking = "ARContext.startFaceTracking",
        ARContextSetFaceTrackingNode = "ARContext.setFaceTrackingNode",
        ARContextGetFaceInfo = "ARContext.getFaceInfo",
        ARContextStopFaceTracking = "ARContext.stopFaceTracking",
        ARContextGetSmileDetectingStatus = "ARContext.getSmileDetectingStatus",
        ARContextStartSmileDetecting = "ARContext.startSmileDetecting",
        ARContextGetSmileDetectingScore = "ARContext.getSmileDetectingScore",
        ARContextStopSmileDetecting = "ARContext.stopSmileDetecting",
        ARContextGetGestureDetectingStatus = "ARContext.getGestureDetectingStatus",
        ARContextStartGestureDetecting = "ARContext.startGestureDetecting",
        ARContextStopGestureDetecting = "ARContext.stopGestureDetecting",
        ARContextGetGestureDetectingResult = "ARContext.getGestureDetectingResult",
        ARContextGetGestureDetectingScore = "ARContext.getGestureDetectingScore",
        /** 姿势识别 */
        ARPoseOnPoseResult = "AR.onPoseResult",
        ARPoseConfig = "AR.pose.config",
        ARPoseStatus = "AR.pose.status",
        ARPoseStart = "AR.pose.start",
        ARPoseStop = "AR.pose.stop",
        ARPoseScore = "AR.pose.score",
        ARContextGetPoseDetectingStatus = "ARContext.getPoseDetectingStatus",
        ARContextStartPoseDetecting = "ARContext.startPoseDetecting",
        ARContextGetPoseDetectingScore = "ARContext.getPoseDetectingScore",
        ARContextStopPoseDetecting = "ARContext.stopPoseDetecting"
    }
    const enum RtcRoom {
        RtcRoomContext = "RtcRoomContext",
        RtcRoomContextStart = "RtcRoomContext.start",
        RtcRoomContextStop = "RtcRoomContext.stop",
        RtcRoomContextMute = "RtcRoomContext.mute",
        RtcRoomContextSwitchCamera = "RtcRoomContext.switchCamera",
        RtcRoomContextEnableCamera = "RtcRoomContext.enableCamera",
        RtcRoomContextAudioMode = "RtcRoomContext.audioMode",
        RtcRoomContextSendMessage = "RtcRoomContext.sendMessage",
        RtcRoomContextSnapshot = "RtcRoomContext.snapshot",
        RtcRoomContextShowPreView = "RtcRoomContext.showPreView",
        RtcRoomContextStartScreenCapture = "RtcRoomContext.startScreenCapture",
        RtcRoomContextStopScreenCapture = "RtcRoomContext.stopScreenCapture"
    }
    const enum Video {
        VideoContext = "VideoContext",
        VideoContextPlay = "VideoContext.play",
        VideoContextPause = "VideoContext.pause",
        VideoContextStop = "VideoContext.stop",
        VideoContextSeek = "VideoContext.seek",
        VideoContextRequestFullScreen = "VideoContext.requestFullScreen",
        VideoContextExitFullScreen = "VideoContext.exitFullScreen",
        VideoContextShowStatusBar = "VideoContext.showStatusBar",
        VideoContextHideStatusBar = "VideoContext.hideStatusBar",
        VideoContextMute = "VideoContext.mute",
        VideoContextPlaybackRate = "VideoContext.playbackRate",
        VideoContextShowFloatingWindow = "VideoContext.showFloatingWindow"
    }
    const enum Camera {
        CameraContext = "CameraContext",
        CameraContextOnCameraFrame = "CameraContext.onCameraFrame",
        CameraContextOnCameraFrameCameraFrameListener = "CameraFrameListener",
        CameraContextOnCameraFrameCameraFrameListenerStart = "CameraFrameListener.start",
        CameraContextOnCameraFrameCameraFrameListenerStop = "CameraFrameListener.stop",
        CameraContextStartRecord = "CameraContext.startRecord",
        CameraContextStopRecord = "CameraContext.stopRecord",
        CameraContextTakePhoto = "CameraContext.takePhoto",
        AICameraContext = "AICameraContext",
        AICameraContextTakePhoto = "AICameraContext.takePhoto",
        AICameraContextStartRecord = "AICameraContext.startRecord",
        AICameraContextStopRecord = "AICameraContext.stopRecord",
        AICameraContextStartAudioRecognize = "AICameraContext.startAudioRecognize",
        AICameraContextStopAudioRecognize = "AICameraContext.stopAudioRecognize",
        AICameraContextStartVideoRecognize = "AICameraContext.startVideoRecognize",
        AICameraContextStopVideoRecognize = "AICameraContext.stopVideoRecognize",
        AICameraContextHasHeadset = "AICameraContext.hasHeadset"
    }
    const enum Lottie {
        LottieContext = "LottieContext",
        LottieContextPlay = "LottieContext.play",
        LottieContextStop = "LottieContext.stop",
        LottieContextPause = "LottieContext.pause",
        LottieContextSetSpeed = "LottieContext.setSpeed",
        LottieContextGoToAndStop = "LottieContext.goToAndStop",
        LottieContextGoToAndPlay = "LottieContext.goToAndPlay",
        LottieContextPlayFromMinToMaxProgress = "LottieContext.playFromMinToMaxProgress",
        LottieContextPlayFromMinToMaxFrame = "LottieContext.playFromMinToMaxFrame",
        LottieContextDowngradeToPlaceholder = "LottieContext.downgradeToPlaceholder"
    }
    const enum WebView {
        WebViewContext = "WebViewContext",
        WebViewContextPostMessage = "WebViewContext.postMessage"
    }
    const enum RDS {
        RDSContext = "RDSContext",
        RDSContextEnableDetect = "RDSContext.enableDetect",
        RDSContextGetRDSData = "RDSContext.getRDSData"
    }
    type Types = Shared | Open | Navigation | Bluetooth | App | CanvasContext | Worker | Version | UpdateManager | Interactive | SystemInfo | Storage | UI | Dom | Audio | RecorderManager | Live | Map | AR | RtcRoom | Video | Camera | Lottie | WebView | RDS | FileSystem;
}
//# sourceMappingURL=type.d.ts.map