import { API, APIDefaultErrorResponse, APIType } from '../../type';
export interface TypeExport<S> {
}
/**
 * @name 用户信息
 */
export interface APIExport<S> {
    [API.getAuthCode]: getAuthCode;
    [API.ap$getAuthCode]: ap$getAuthCode;
    [API.authorize]: authorize;
    [API.ap$authorize]: ap$authorize;
    [API.getAuthUserInfo]: getAuthUserInfo;
    [API.ap$getAuthUserInfo]: ap$getAuthUserInfo;
    [API.getOpenUserInfo]: getOpenUserInfo;
    [API.getUserInfo]: getUserInfo;
    [API.ap$getUserInfo]: ap$getUserInfo;
    [API.getOpenUserData]: getOpenUserData;
    [API.getPhoneNumber]: getPhoneNumber;
    [API.getIDNumber]: getIDNumber;
    [API.getVisitToken]: getVisitToken;
}
/**
 * @description 调用接口获取授权码（authCode）。通过授权码可进而换取支付宝用户登录态信息、给用户发会员卡等，从而方便地获取支付宝用户身份标识，快速建立小程序内的用户体系。
 *
 * 登录流程时序等更多介绍信息请参见 [用户授权](https://docs.alipay.com/mini/introduce/authcode)。
 * 相关问题请参见 [用户授权 FAQ](https://docs.alipay.com/mini/api/bpubha)。
 *
 * 注意点：
 * - 请勿在小程序的可重复触发的生命周期（例如 onShow）中调用 `getAuthCode`，授权弹窗的消失会触发小程序的 onShow 事件，若接入方未对是否已展现过授权做标识与逻辑判断，将引起重复触发授权。
 * - 为了创造更良好的支付宝小程序用户体验，在小程序的首屏引导用户授权是不被允许的。需要在用户充分了解小程序的业务内容后再引导用户授权，建议将小程序授权环节放在业务流程中。
 * - 小程序 不支持 使用拼接授权链接进行授权，建议使用 `getAuthCode` 实现用户授权、用户登录等。
 */
interface getAuthCode {
    type: APIType.Async;
    request: {
        /**
         * @description 授权类型
         * @default auth_base
         */
        scopes?: `${EAuthCodeScope}` | `${EAuthCodeScope}`[];
    };
    response: {
        /**
         * @description 授权码
         */
        authCode: string;
        /**
         * @description 失败的授权类型，key 是授权失败的 scope，value 是对应的错误码
         */
        authErrorScopes: Record<EAuthCodeScope, string>;
        /**
         * @description 成功的授权 scope
         */
        authSuccessScopes: `${EAuthCodeScope}`[];
    };
}
/**
 * @name Scope
 */
declare const enum EAuthCodeScope {
    /**
     * @description 静默授权。
     */
    'auth_base' = "auth_base",
    /**
     * @description 主动授权。
     */
    'auth_user' = "auth_user",
    /**
     * @description 获取用户芝麻信息。
     */
    'auth_zhima' = "auth_zhima"
}
interface ap$getAuthCode {
    type: APIType.Alias;
    alias: API.getAuthCode;
}
/**
 * @description 向用户发起授权请求。调用后会立刻弹窗询问用户是否同意授权小程序使用某项功能或获取用户的某些数据。如果用户之前已经同意授权，则不会出现弹窗，直接返回成功。
 */
interface authorize {
    type: APIType.Async;
    request: {
        /**
         * @description 需要获取权限类型
         */
        scopes: `${EAuthCodeScope}` | `${EAuthCodeScope}`[];
    };
    response: {
        /**
         * @description 授权码
         */
        authCode: string;
        /**
         * @description 失败的授权类型，key 是授权失败的 scope，value 是对应的错误码
         */
        authErrorScopes: Record<EAuthCodeScope, string>;
        /**
         * @description 成功的授权 scope
         */
        authSuccessScopes: `${EAuthCodeScope}`[];
    };
}
interface ap$authorize {
    type: APIType.Alias;
    alias: API.authorize;
}
/**
 * @description 客户端获取会员信息。获取会员信息首先需要获取用户授权，详细会员信息获取参考 [指引](https://opendocs.alipay.com/mini/introduce/twn8vq)。
 */
interface getAuthUserInfo {
    type: APIType.Async;
    request: void;
    response: {
        /**
         * @description 用户昵称。
         */
        nickName: string;
        /**
         * @description 用户头像链接。
         */
        avatar: string;
    };
}
interface ap$getAuthUserInfo {
    type: APIType.Alias;
    alias: API.getAuthUserInfo;
}
/**
 * @description 此接口可获取支付宝会员的基础信息（头像图片地址、昵称、性别、国家码、省份、所在市区）。
 * - 接入方法请参考 [获取会员基础信息介绍](https://docs.alipay.com/mini/introduce/twn8vq)。
 * - 本功能需要用户主动触发才能激活，所以该功能不由 API 直接调用，需用 `button` 组件 的点击来触发。将 `button 组件 `open-type` 的值设置为 `getAuthorize`，当用户点击并同意之后，可以通过 `getOpenUserInfo` 接口获取到支付宝服务器返回的基础信息，若用户未授权，直接调用 `getOpenUserInfo` 接口，则无法返回正确信息。
 */
interface getOpenUserInfo {
    type: APIType.Async;
    request: void;
    response: {
        /**
         * @description 字符串（切记先 `JSON.parse` 一下）。
         * 内部字段(两层 response)：
         * - `response` 完整的对象，其值如下：
         * - `response.avatar`，类型 `string`，头像图片地址
         * - `response.nickName`，类型 `string`，昵称
         * - `response.gender`，类型 `string`，性别，男对应“m”，女对应“f”
         * - `response.countryCode`，类型 `string`，国家码
         * - `response.province`，类型 `string`，省份
         * - `response.city`，类型 `string`， 所在市区
         */
        response: string;
    };
}
/**
 * @description 获取用户标识（加密的数据）。
 */
interface getOpenUserData {
    type: APIType.Async;
    request: void;
    response: {
        /**
         * @description 用户唯一标识（加密的数据）
         */
        uid: string;
    };
}
/**
 * @description 获取支付宝用户绑定的手机号。
 * - **不建议使用，一二方如需使用该 API 需要财务审批，建议通过 `rpc` 请求后端获取。**
 * - 因为需要用户主动触发才能发起获取手机号，所以该功能不由 API 直接调用，需用 `button` 组件 的点击来触发。
 * - 注意：目前该功能需要在开发者后台完成敏感信息申请才可以使用此功能，入口为 开发管理 > 功能列表 > 添加功能  > 获取会员手机号 > 用户信息申请，此功能需谨慎使用，若支付宝发现信息存在超出约定范围使用或者不合理使用等情况，支付宝有权永久回收该小程序的该接口权限。
 */
interface getPhoneNumber {
    type: APIType.Async;
    request: void;
    response: {
        /**
         * @description 加密的数据，前端需要将该报文发送到开发者服务端做验签和解密处理（详细的服务端处理流程参考[敏感信息加解密方法](https://docs.alipay.com/mini/introduce/aes)）。
         * 解密后的字段如下：
         * - `mobile`，类型 `string`，手机号。
         */
        response: string;
    };
}
/**
 * @description 获取会员的身份信息，包括姓名、证件号、证件类型、是否通过实名认证。
 * - 因为需要用户主动触发才能发起获取姓名和身份证号，所以该功能不由 API 直接调用，需用 `button` 组件的点击来触发。
 * - 注意：目前该功能需要在开发者后台完成敏感信息申请才可以使用此功能，入口为[开发管理]-->[功能列表]-->[获取会员信息]-->[敏感信息申请]，此功能需谨慎使用，若用户举报较多或被发现在不必要场景下使用，支付宝有权永久回收该小程序的该接口权限。
 */
interface getIDNumber {
    type: APIType.Async;
    request: void;
    response: {
        /**
         * @description 加密的数据，前端需要将该报文发送到开发者服务端做验签和解密处理（详细的服务端处理流程参考[敏感信息加解密方法](https://docs.alipay.com/mini/introduce/aes)）。
         * 解密后的字段如下：
         * - `userName`，类型 `string`，用户姓名，注意：只有is_certified为T的时候才有意义，否则不保证准确性。
         * - `certNo`，类型 `string`，证件号码，注意：只有is_certified为T的时候才有意义，否则不保证准确性。
         * - `certType`，类型 `string`，证件类型，注意：只有is_certified为T的时候才有意义，否则不保证准确性.。取值枚举： 0:身份证 1:护照 2:军官证 3:士兵证 4:回乡证 5:临时身份证 6:户口簿 7:警官证 8:台胞证 9:营业执照 10:其它证件 11:港澳居民来往内地通行证 12:台湾居民来往大陆通行证
         * - `isCertified`，类型 `string`，是否通过实名认证，T:是；F:否。
         */
        response: string;
    };
}
/**
 * @description 获取用户访问小程序 token。
 */
interface getVisitToken {
    type: APIType.Async;
    request: {
        /**
         * @description token 类型。
         * - `COMMON` 通用 token 类型。
         */
        tokenType: string;
    };
    response: {
        /**
         * @description 生产的 token 值。
         */
        token: string;
    };
    error: getVisitTokenError;
}
interface getVisitTokenError extends APIDefaultErrorResponse {
    /**
     * @description 错误码。
     */
    error: getVisitTokenErrorCode;
}
declare const enum getVisitTokenErrorCode {
    /**
     * @description 参数无效，格式不对、非法值、越界等
     */
    '_50001' = 50001,
    /**
     * @description 系统错误
     */
    '_50000' = 50000
}
interface ap$getUserInfo {
    type: APIType.Alias;
    alias: API.getUserInfo;
}
/**
 * @description 获取当前用户的信息。
 */
interface getUserInfo {
    type: APIType.Async;
    request: void;
    response: {
        /**
         * @description 用户id，以 "2088" 开头
         */
        userId: string;
        /**
         * @description 用户的头像图片 URL
         */
        avatar: string;
        /**
         * @description 用户的脱敏登录账号
         */
        loginId: string;
        /**
         * @description 用户的脱敏真实姓名
         */
        userName: string;
    };
    error: void;
}
export {};
//# sourceMappingURL=userinfo.d.ts.map