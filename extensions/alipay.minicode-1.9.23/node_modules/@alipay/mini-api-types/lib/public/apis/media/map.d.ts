import { API, APIType, Flag, FlagDef, Type, TypeRef } from '../../type';
export interface TypeExport<S> {
    [Type.Map.MapContext]: MapContext<S>;
    [Type.Map.MapContextCalculateDistance]: calculateDistance<S>;
    [Type.Map.MapContextChangeMarkers]: changeMarkers<S>;
    [Type.Map.MapContextClearRoute]: clearRoute<S>;
    [Type.Map.MapContextGestureEnable]: gestureEnable<S>;
    [Type.Map.MapContextGetCenterLocation]: getCenterLocation<S>;
    [Type.Map.MapContextGetMapProperties]: getMapProperties<S>;
    [Type.Map.MapContextGetRegion]: getRegion<S>;
    [Type.Map.MapContextMoveToLocation]: moveToLocation<S>;
    [Type.Map.MapContextShowRoute]: showRoute<S>;
    [Type.Map.MapContextShowsCompass]: showsCompass<S>;
    [Type.Map.MapContextShowsScale]: showsScale<S>;
    [Type.Map.MapContextSmoothMoveMarker]: smoothMoveMarker<S>;
    [Type.Map.MapContextSmoothMovePolyline]: smoothMovePolyline<S>;
    [Type.Map.MapContextTranslateMarker]: translateMarker<S>;
    [Type.Map.MapContextUpdateComponents]: updateComponents<S>;
}
/**
 * @name 地图
 */
export interface APIExport<S> {
    [API.createMapContext]: createMapContext<S>;
    [API.calculateRoute]: calculateRoute;
}
/**
 * @description 创建并返回一个地图上下文对象 `mapContext`。
 */
interface createMapContext<S> {
    type: APIType.Fn;
    /**
     * @param mapId `<map />` 组件的 `id`。
     */
    fn: (mapId: string) => TypeRef<S, Type.Map.MapContext>;
}
/**
 * @description  `MapContext` 通过 `id` 跟一个 `map` 组件绑定，操作对应的 `map` 组件。
 */
interface MapContext<S> {
    type: APIType.Property;
    property: {
        calculateDistance: TypeRef<S, Type.Map.MapContextCalculateDistance, Flag.Map.MapContextCalculateDistance>;
        changeMarkers: TypeRef<S, Type.Map.MapContextChangeMarkers>;
        clearRoute: TypeRef<S, Type.Map.MapContextClearRoute>;
        gestureEnable: TypeRef<S, Type.Map.MapContextGestureEnable>;
        getCenterLocation: TypeRef<S, Type.Map.MapContextGetCenterLocation>;
        getMapProperties: TypeRef<S, Type.Map.MapContextGetMapProperties>;
        getRegion: TypeRef<S, Type.Map.MapContextGetRegion>;
        moveToLocation: TypeRef<S, Type.Map.MapContextMoveToLocation>;
        showRoute: TypeRef<S, Type.Map.MapContextShowRoute>;
        showsCompass: TypeRef<S, Type.Map.MapContextShowsCompass>;
        showsScale: TypeRef<S, Type.Map.MapContextShowsScale>;
        smoothMoveMarker: TypeRef<S, Type.Map.MapContextSmoothMoveMarker>;
        smoothMovePolyline: TypeRef<S, Type.Map.MapContextSmoothMovePolyline>;
        translateMarker: TypeRef<S, Type.Map.MapContextTranslateMarker>;
        updateComponents: TypeRef<S, Type.Map.MapContextUpdateComponents>;
    };
}
/**
 * @description 地图路径计算能力，用于计算途径地图上多个点的总路线距离。也可根据该路线截取部分子路线，加上其他目标点的路径规划后，组合成新的路径。
 */
interface calculateDistance<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 路线中点的经纬度数组。
         */
        points: location[];
        /**
         * @description 是否需要计算总距离。
         * @default true
         */
        exportTotalDistance?: boolean;
        /**
         * @description 目标距离（直线距离）数组。
         */
        targetDistances?: number[];
    };
    response: {
        /**
         * @description 总路径长度。（如果传入的 exportTotalDistance 为 false，则不返回 distance。）
         */
        distance: number;
        /**
         * @description 符合目标距离的点，对应的经纬度。
         */
        targetPoints: targetPoint[];
    };
}
interface targetPoint {
    /**
     * @description 与 points 数组中首个点的直线距离符合目标距离的点，在 targetDistances 中的索引。
     */
    index: number;
    /**
     * @description 目标距离的数值。（如果不传 targetPoints 或 targetPoints 参数为空，则返回的 targetDistances字段也为空。）
     */
    targetDistance: number;
    /**
     * @description 纬度。
     */
    latitude: number;
    /**
     * @description 经度。
     */
    longitude: number;
    /**
     * @description 假设 points 数组为 [A,B,C]，符合目标距离的点为 B'， 且 B'- A 直线距离在 B-A 直线距离、C-A 直线距离之间，则 targetLineIndex 为 points 数组中的点 B 的索引数值。
     */
    targetLineIndex: number;
}
/**
 * @description 添加、删除、更新指定的标记（marker）。
 */
interface changeMarkers<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 需要添加的 marker 数组。
         */
        add?: marker<S>[];
        /**
         * @description 需要删除的 marker 数组。
         */
        remove?: marker<S>[];
        /**
         * @description 需要更新的 marker 数组。
         */
        update?: marker<S>[];
    };
}
/**
 * @description 清除地图上的步行导航路线。
 */
interface clearRoute<S> {
    type: APIType.Fn;
    fn: () => void;
}
/**
 * @description 设置所有手势是否可用。
 */
interface gestureEnable<S> {
    type: APIType.Fn;
    fn: (option: gestureEnableOption) => void;
}
/**
 * @name gestureEnable.option
 */
interface gestureEnableOption {
    /**
     * @description 指定手势是否可用。1：可用，0：不可用。
     */
    isGestureEnable: 0 | 1;
}
/**
 * @description 获取当前地图中心位置。
 */
interface getCenterLocation<S> {
    type: APIType.Async;
    request: void;
    response: location;
}
/**
 * @description 获取地图的属性信息。
 */
interface getMapProperties<S> {
    type: APIType.Async;
    request: void;
    response: {
        /**
         * @description 是否是3D地图引擎。
         */
        is3d: boolean;
        /**
         * @description 是否支持动画。
         */
        isSupportAnim: boolean;
        /**
         * @description SDK名称。
         */
        sdkName: FlagDef<S, string, Flag.Map.MapContextPropertySdkName>;
        /**
         * @description SDK版本号。
         */
        sdkVersion: FlagDef<S, string, Flag.Map.MapContextPropertySdkVersion>;
        /**
         * @description 是否支持海外地图。
         */
        isSupportOversea: FlagDef<S, boolean, Flag.Map.MapContextPropertyIsSupportOversea>;
        /**
         * @description 需要7.x版本样式文件。
         */
        needStyleV7: FlagDef<S, boolean, Flag.Map.MapContextPropertyNeedStyleV7>;
    };
}
/**
 * @description 可获取地图东北角、西南角的经纬度，从而获取地图整体的视野范围。
 * ![image](http://mdn.alipayobjects.com/afts/img/A*9KnRSZHPtBZ9xbJMl2ucnwBkAa8wAA/original?bz=openpt_doc&t=FDATT4LmNWYCQJlzrCcm0QAAAABkMK8AAAAA)
 */
interface getRegion<S> {
    type: APIType.Async;
    request: void;
    response: {
        /**
         * @description 地图的西南角经纬度。
         */
        southwest: location;
        /**
         * @description 地图的东北角经纬度。
         */
        northeast: location;
    };
}
/**
 * @description 移动视野到定位点并恢复到默认缩放级别，需要配合 `map` 组件的 `show-location` 使用。
 */
interface moveToLocation<S> {
    type: APIType.Fn;
    fn: (option?: location) => void;
}
/**
 * @description 默认规划步行路线，只能显示一条。
 */
interface showRoute<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 搜索类型。
         * @default walk
         */
        searchType?: FlagDef<S, `${ECalculateRouteSearchType}`, Flag.Map.MapContextShowRouteSearchType>;
        /**
         * @description 起点纬度。
         */
        startLat: number;
        /**
         * @description 起点经度。
         */
        startLng: number;
        /**
         * @description 终点纬度。
         */
        endLat: number;
        /**
         * @description 终点经度。
         */
        endLng: number;
        /**
         * @description 途径点，仅驾车规划有效，即 `searchType="drive"` 时有效。
         */
        throughPoints?: FlagDef<S, throughPoint[], Flag.Map.MapContextShowRouteThroughPoints>;
        /**
         * @description 路线颜色，该值仅在2d地图中生效。
         */
        routeColor?: string;
        /**
         * @description 路线纹理，`3d` 地图其优先级高于 `routeColor`，即纹理会覆盖颜色值；在 `3d` 地图下提供了默认的纹理图案, 图片尺寸建议为 `2` 的整数幂，如 `64*64`。
         */
        iconPath?: string;
        /**
         * @description 纹理宽度，`iconPath` 设置时才生效，在 `3d` 地图下提供了默认的纹理宽度。
         */
        iconWidth?: number;
        /**
         * @description 路线宽度在不设置纹理时有效。在 `2d` 地图下提供了默认值，`3d` 地图不需要设置。
         */
        routeWidth?: number;
        /**
         * @description 覆盖物 Z 轴坐标。
         */
        zIndex?: FlagDef<S, number, Flag.Map.MapContextShowRouteZIndex>;
        /**
         * @description 仅在 驾车模式（`searchType="drive"`）和 公交模式（`searchType="bus"`）支持，具体值见 mode 参数列表。
         */
        mode?: ECalculateRouteMode;
        /**
         * @description 公交模式（`searchType="bus"`）下必填。传参可填写城市中文名称或城市名称拼音。例如：`city:'hangzhou'` 或 `city: '杭州'`。
         */
        city?: string;
        /**
         * @description 公交跨城模式下必填。
         */
        destinationCity?: string;
    };
    response: {
        /**
         * @description 是否成功。
         */
        success: boolean;
        /**
         * @description 距离。
         */
        distance: number;
        /**
         * @description 时间，单位 秒。
         */
        duration: number;
    };
}
/**
 * @description 设置指南针是否可见。
 */
interface showsCompass<S> {
    type: APIType.Fn;
    fn: (option: showsCompassOption) => void;
}
/**
 * @name showsCompass.option
 */
interface showsCompassOption {
    /**
     * @description 设置指南针是否可见，1：可见，0：不可见。
     */
    isShowsCompass: 0 | 1;
}
/**
 * @description 设置比例尺控件是否可见。
 */
interface showsScale<S> {
    type: APIType.Fn;
    fn: (option: showsScaleOption) => void;
}
/**
 * @name showsScale.option
 */
interface showsScaleOption {
    /**
     * @description 设置比例尺控件是否可见，1：可见，0：不可见。
     */
    isShowsScale: 0 | 1;
}
/**
 * @description 指定标记（marker）进行动画。会触发 `onMarkerMove` 与 `onMarkerMoveEnd` 动画事件。
 */
interface smoothMoveMarker<S> {
    type: APIType.Fn;
    fn: (option: smoothMoveMarkerOption<S>) => void;
}
/**
 * @name smoothMoveMarker.option
 */
interface smoothMoveMarkerOption<S> {
    /**
     * @description 执行动画的 markerId，确保此时 marker 已经在地图上。
     */
    markerId: number;
    /**
     * @description 对未在地图上的 marker 做动画，传入 marker 对象。
     */
    markerData?: marker<S>;
    /**
     * @description 动画路线的经纬度集合。
     */
    points: location[];
    /**
     * @description 动画执行时间，单位 毫秒（ms）。
     * @default 5000
     */
    duration?: number;
    /**
     * @description 指定需要 callback 的目标距离数组。
     */
    targetDistances?: number[];
    /**
     * @description 指定操作动画。`stop`：表示提前结束动画。
     */
    action: string;
}
/**
 * @description 轨迹动画。会触发 `onPolylineMoveEnd` 动画事件。
 */
interface smoothMovePolyline<S> {
    type: APIType.Fn;
    fn: (option: smoothMovePolylineOption) => void;
}
/**
 * @name smoothMovePolyline.option
 */
interface smoothMovePolylineOption {
    /**
     * @description 执行动画的路线id。
     */
    polylineId: number;
    /**
     * @description 动画的路线经纬度集合。
     */
    points: location[];
    /**
     * @description 动画执行时间，单位 毫秒（ms）。
     * @default 5000
     */
    duration?: number;
    /**
     * @description 轨迹动画颜色。
     */
    color?: string;
    /**
     * @description 路线宽度。
     */
    width?: number;
    /**
     * @description 是否虚线。
     */
    dottedLine?: boolean;
    /**
     * @description 线的纹理地址。
     */
    iconPath?: string;
    /**
     * @description 线的纹理宽度。
     */
    iconWidth?: number;
    /**
     * @description 线的Z轴坐标。
     */
    zIndex?: number;
    /**
     * @description 彩虹线。
     */
    colorList?: string[];
    /**
     * @description 指定操作动画。`stop`：表示提前结束动画。
     */
    action: string;
}
/**
 * @description 平移 marker 接口。
 * - 对同一个 markerId 在 translateMarker 没 animationEnd 之前再次调动会被丢掉，下一次动画需要在 animationEnd 之后再调用才有效。
 */
interface translateMarker<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 指定 marker。
         */
        markerId: number;
        /**
         * @description 指定 marker 移动到的目标点。
         */
        destination: location;
        /**
         * @description 移动过程中是否自动旋转 marker。
         */
        autoRotate?: boolean;
        /**
         * @description marker 的旋转角度。在 `autoRotate` 为 `false` 的情况下才有效。
         * @default 0
         */
        rotate?: number;
        /**
         * @description 动画持续时长，单位 毫秒。
         * @default 1000
         */
        duration?: number;
        /**
         * @description 动画结束回调函数。
         */
        animationEnd?: Function;
    };
}
/**
 * @description 增量更新地图接口。
 */
interface updateComponents<S> {
    type: APIType.Fn;
    fn: (option: updateComponentsOption<S>) => void;
}
/**
 * @name updateComponents.option
 */
interface updateComponentsOption<S> {
    /**
     * @description 中心纬度。
     */
    latitude?: number;
    /**
     * @description 中心经度。
     */
    longitude?: number;
    /**
     * @description 缩放级别，取值范围 5~18。
     * @default 16
     */
    scale?: number;
    /**
     * @description 覆盖物，在地图上的一个点绘制图标。
     */
    markers?: marker<S>[];
    /**
     * @description 覆盖物，多个连贯点的集合（路线）。
     */
    polyline?: polyline<S>[];
    /**
     * @description 视野将进行小范围延伸包含传入的坐标。
     */
    'include-points'?: location[];
    /**
     * @description 视野在地图 padding 范围内展示。
     */
    'include-padding'?: includePadding[];
    /**
     * @description 地图相关设置。
     */
    setting?: setting;
    /**
     * @description 地图相关命令，可用于更新 marker 动画。
     */
    command?: command<S>;
}
interface location {
    /**
     * @description 纬度。
     */
    latitude: number;
    /**
     * @description 经度。
     */
    longitude: number;
}
/**
 * @description 标记点，用于在地图上显示标记的位置。
 */
interface marker<S> {
    /**
     * @description 标记点 id，点击事件回调会返回此 id。
     */
    id?: number;
    /**
     * @description 纬度，范围 -90 ~ 90。
     */
    latitude: number;
    /**
     * @description 经度，范围 -180 ~ 180。
     */
    longitude: number;
    /**
     * @description 标注点名。
     */
    title?: string;
    /**
     * @description 显示的图标，项目目录下的图片路径，可以用相对路径写法，以 `'/'` 开头则表示相对小程序根目录。
     */
    iconPath: string;
    /**
     * @description 旋转角度，顺时针旋转的角度，范围 0 ~ 360。
     * @default 0
     */
    rotate?: number;
    /**
     * @description 标注的透明度，是否透明。
     * @default 1
     */
    alpha?: number;
    /**
     * @description 标注图标宽度，默认为图片的实际宽度。
     */
    width?: number;
    /**
     * @description 标注图标高度，默认为图片的实际高度。
     */
    height?: number;
    /**
     * @description 自定义标记点上方的气泡窗口。
     */
    callout?: callout;
    /**
     * @description 经纬度在标注图标的锚点-横向值，这两个值需要成对出现，anchorX 表示横向(0-1)，anchorY 表示竖向(0-1)。
     */
    anchorX?: number;
    /**
     * @description 经纬度在标注图标的锚点-竖向值，`anchorX: 0.5, anchorY: 1` 表示底边中点。
     */
    anchorY?: number;
    /**
     * @description callout 背景自定义，目前只支持高德地图 style。
     */
    customCallout?: customCallout;
    /**
     * @description 和 iconPath 一起使用，会将 iconPath 对应的图片及该字符串共同生成一个图片，当成 marker 的图标。
     */
    iconAppendStr?: string;
    /**
     * @description 底部描述文本颜色。
     * @default #33B276
     */
    iconAppendStrColor?: string;
    /**
     * @description 基于屏幕位置扎点。
     */
    fixedPoint?: fixedPoint;
    /**
     * @description marker 在地图上的绘制层级，与地图上其他覆盖物统一的 Z 坐标系。
     */
    markerLevel?: FlagDef<S, number, Flag.Map.MapContextMarkerLevel>;
    /**
     * @description 自定义 marker 样式。
     */
    style?: FlagDef<S, object, Flag.Map.MapContextMarkerStyle>;
    /**
     * @description marker 上的气泡，marker 上的气泡，地图上可同时展示多个。
     */
    label?: FlagDef<S, label<S>, Flag.Map.MapContextMarkerLabel>;
}
interface callout {
    /**
     * @description 内容。
     */
    content?: string;
}
/**
 * @description <img src="https://gw.alipayobjects.com/mdn/rms_5d3049/afts/img/A*dF5gQ51ap24AAAAAAAAAAAAAARQnAQ" width="300" />
 */
interface customCallout {
    /**
     * @description `0` 为黑色 style，`1` 为白色style，`2` 为背景+文本。
     */
    type: 0 | 1 | 2;
    /**
     * @description 时间值。
     */
    time: number;
    /**
     * @description 描述数组。
     */
    descList: desc[];
}
interface desc {
    /**
     * @description 内容。
     */
    desc: string;
    /**
     * @description 颜色。
     */
    descColor: string;
}
interface fixedPoint {
    /**
     * @description 横向像素点，距离地图左上角的像素数值，从 0 开始。
     */
    originX: number;
    /**
     * @description 纵向像素点，距离地图左上角的像素数值，从 0 开始。
     */
    originY: number;
}
interface label<S> {
    /**
     * @description 内容。
     */
    content: string;
    /**
     * @default #000000
     */
    color?: string;
    /**
     * @default 14
     */
    fontsize?: number;
    /**
     * @default 20
     */
    borderRadius?: number;
    /**
     * @default #FFFFFF
     */
    bgColor?: string;
    /**
     * @default 10
     */
    padding?: number;
}
/**
 * @description 用于指定一系列坐标点，从数组第一项连线至最后一项。
 */
interface polyline<S> {
    /**
     * @description 经纬度数组。
     */
    points: location[];
    /**
     * @description 线的颜色，用 8 位十六进制表示，后两位表示 alpha 值，如：`#eeeeeeAA`。
     */
    color?: string;
    /**
     * @description 线的宽度。
     */
    width?: number;
    /**
     * @description 是否为虚线。
     * @default false
     */
    dottedLine?: boolean;
    /**
     * @description 线的纹理地址，项目目录下的图片路径，可以用相对路径写法，以 `'/'` 开头则表示相对小程序根目录。
     */
    iconPath?: FlagDef<S, string, Flag.Map.MapContextPolylineIconPath>;
    /**
     * @description 使用纹理时的宽度。
     */
    iconWidth?: FlagDef<S, number, Flag.Map.MapContextPolylineIconWidth>;
}
interface includePadding {
    top: number;
    bottom: number;
    left: number;
    right: number;
}
interface setting {
    /**
     * @description 设置所有手势是否可用，1：开启，0：关闭。
     */
    gestureEnable: 0 | 1;
    /**
     * @description 设置比例尺控件是否可见，1：开启，0：关闭。
     */
    showScale: 0 | 1;
    /**
     * @description 设置指南针是否可见，1：开启，0：关闭。
     */
    showCompass: 0 | 1;
    /**
     * @description 是否开启双手下滑，1：开启，0：关闭。
     */
    tiltGesturesEnabled: 0 | 1;
    /**
     * @description 设置交通路况是否可见，1：开启，0：关闭。
     */
    trafficEnabled: 0 | 1;
    /**
     * @description 设置地图POI信息是否可见，1：开启，0：关闭。
     */
    showMapText: 0 | 1;
    /**
     * @description 高德地图logo位置。
     */
    logoPosition: logoPosition;
}
interface logoPosition {
    centerX: number;
    centerY: number;
}
interface command<S> {
    /**
     * @description marker 动画配置。
     */
    markerAnim: markerAnim<S>;
}
interface markerAnim<S> {
    /**
     * @description 动画类型。
     * - `0` 代表跳动动画。
     */
    type: FlagDef<S, 0, Flag.Map.MapContextMarkerAnimationType>;
    /**
     * @description markerId。
     */
    markerId: number;
}
/**
 * @description 计算路径 API。根据起点和终点的地理位置，智能规划最佳出行路线，并计算不同出行方式下的行动距离和所需时间，默认规划步行路线，支持规划步行、公交、骑行和驾车四种路线。
 */
interface calculateRoute {
    type: APIType.Async;
    request: {
        /**
         * @description 搜索类型。
         * @default walk
         */
        searchType?: `${ECalculateRouteSearchType}`;
        /**
         * @description 起点纬度。
         */
        startLat: number;
        /**
         * @description 起点经度。
         */
        startLng: number;
        /**
         * @description 终点纬度。
         */
        endLat: number;
        /**
         * @description 终点经度。
         */
        endLng: number;
        /**
         * @description 途径点，仅驾车规划有效，即 `searchType="drive"` 时有效。
         */
        throughPoints?: throughPoint[];
        /**
         * @description 仅在 驾车模式（`searchType="drive"`）和 公交模式（`searchType="bus"`）支持，具体值见 mode 参数列表。
         */
        mode?: ECalculateRouteMode;
        /**
         * @description 公交模式（`searchType="bus"`）下必填。传参可填写城市中文名称或城市名称拼音。例如：`city:'hangzhou'` 或 `city: '杭州'`。
         */
        city?: string;
        /**
         * @description 公交跨城模式下必填。
         */
        destinationCity?: string;
    };
    response: {
        /**
         * @description 是否成功。成功返回 true，失败返回 false。
         */
        success: boolean;
        /**
         * @description 距离，单位为 米。
         */
        distance: number;
        /**
         * @description 时间，单位为 秒。
         */
        duration: number;
    };
}
declare const enum ECalculateRouteSearchType {
    walk = "walk",
    bus = "bus",
    drive = "drive",
    ride = "ride"
}
declare const enum ECalculateRouteMode {
    /**
     * @description 最快捷模式，速度优先（时间）。
     */
    '_0' = 0,
    /**
     * @description 最经济模式，费用优先（不走收费路段的最快道路）。
     */
    '_1' = 1,
    /**
     * @description 最少换乘模式，距离优先。
     */
    '_2' = 2,
    /**
     * @description 最少步行模式，不走快速路。
     */
    '_3' = 3,
    /**
     * @description 最舒适模式，结合实时交通（躲避拥堵）。
     */
    '_4' = 4,
    /**
     * @description 不乘地铁模式，多策略（同时使用速度优先、费用优先、距离优先三个策略）。
     */
    '_5' = 5,
    /**
     * @description 不走高速。
     */
    '_6' = 6,
    /**
     * @description 不走高速且避免收费。
     */
    '_7' = 7,
    /**
     * @description 躲避收费和拥堵。
     */
    '_8' = 8,
    /**
     * @description 不走高速且躲避收费和拥堵。
     */
    '_9' = 9
}
interface throughPoint {
    /**
     * @description 纬度。
     */
    lat: number;
    /**
     * @description 经度。
     */
    lng: number;
}
export {};
//# sourceMappingURL=map.d.ts.map