import { API, APIType, Type, TypeRef } from '../../type';
export interface TypeExport<S> {
    [Type.App.ReportAnalyticsData]: ReportAnalyticsData<S>;
}
/**
 * @name 埋点上报
 */
export interface APIExport<S> {
    [API.reportAnalytics]: reportAnalytics<S>;
    [API.reportCustomEvent]: reportCustomEvent;
    [API.reportCustomError]: reportCustomError;
    [API.getChinfoChain]: getChinfoChain;
    [API.appendChinfoChain]: appendChinfoChain;
    [API.reportBizReady]: reportBizReady;
}
/**
 * @description 自定义分析数据的上报接口，使用前需要在 [小程序开发者中心控制台](https://openhome.alipay.com/) > 小程序详情页 > 数据中心 > 自定义分析 > 事件 中新建事件，并配置事件名和字段。
 * @tutorial api reportAnalytics
 * @file
 * ```js
 * my.reportAnalytics('demo_click', {});
 * my.alert({
 *   content: '数据上报成功，请到小程序管理后台-数据分析中查看',
 * });
 * ```
 */
interface reportAnalytics<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 自定义事件名，需申请！
         */
        eventName: string;
        /**
         * @description 要上报的数据对象。
         */
        data: TypeRef<S, Type.App.ReportAnalyticsData>;
    };
    response: void;
}
/**
 * @name reportAnalytics.data
 */
interface ReportAnalyticsData<S> {
    /**
     * @description 配置的字段名
     */
    key: string;
    /**
     * @description 需要上报的数据
     */
    value: object | string | number | boolean;
}
/**
 * @description 小程序事件埋点。事件管理相关请见 [此处](https://log.alipay.com/index_v3.htm#/manage/eventmanage/eventmanagement)
 */
interface reportCustomEvent {
    type: APIType.Fn;
    /**
     * @param eventId 事件ID，需要在 [事件管理](https://log.alipay.com/index_v3.htm#/manage/eventmanage/eventmanagement) 内申请。
     * @param extData 额外参数。
     */
    fn: (eventId: string, extData: reportCustomEventExtData) => void;
}
/**
 * @name reportCustomEvent.extData
 */
interface reportCustomEventExtData {
    bizType?: string;
    logLevel?: number;
    antLogCategory?: `${EAntLogCatgory}`;
}
declare const enum EAntLogCatgory {
    Basic = "tinyapp-group-default"
}
/**
 * @description 上报自定义的 error 到雨燕/lego平台(clue只上报到单小程序监控盘，不再上报到全局盘)。
 * - 自定义错误 code 统一为 `14`，可在雨燕监控大盘上看到详细的错误信息, https://appx.antfin-inc.com/docs/extend/yuyan
 */
interface reportCustomError {
    type: APIType.Fn;
    /**
     * @param error 错误对象实例，例如 `new Error('自定义错误')`。
     */
    fn: (error: Error) => void;
}
/**
 * @description 获取渠道透传信息。
 */
interface getChinfoChain {
    type: APIType.Async;
    request: void;
    response: Record<string, unknown>;
}
/**
 * @description 追加渠道透传信息。
 */
interface appendChinfoChain {
    type: APIType.Async;
    request: {
        chinfo: string;
        scm: string;
    };
    response: void;
}
/**
 * @description 手动上报首屏时间。
 * - 小程序发布都有提审环节，会有相应的审核报告，如果待发布版本相对线上版本有恶化，审核同学通常会卡点。由于审核的时间限制，实验室跑的审核数据可能会存在数据“飘”的问题，所以业务在首屏渲染完成合适的点加入埋点也可以为审核同学作为参考；
 * - T2计算是一个回溯的方式去算的。页面打开的过程，到页面结束，内核会把每一帧都记录起来。在结束时再一帧一帧的比对，渲染面积最大的那次作为T2值。**可能存在跟业务认为的 "渲染完成可用" 理解不一致**的问题，所以业务可以在 **合适的点** 主动接入 `reportBizReady` 作为参考。
 *
 * 注意事项：
 * - 如果小程序里有多个 Page，只需要针对 `firstPage` 添加该逻辑。
 * - 找到影响首页渲染的各个模块，获取到数据并在 `setData` 的 `callback` 里，调用 `reportBizReady`。
 * - 如果影响首屏渲染的有多个模块，则在各自模块的 `setData` 的 `callback` 分别调用 `reportBizReady`。
 * - 需要排除非首屏 `setData` 的 `callback` 里 `reportBizReady` 的调用，比如进入首页后，下拉刷新这种手动触发引起的 `setData`。
 * - `reportBizReady` 在比较早的版本已经支持，不过在使用之前也使用` canIUse` 做下判断。
 *
 * 更多详细介绍参考[此处](https://yuque.antfin-inc.com/docs/share/69cd1cfc-e647-4942-a2cc-7c0b49995e07?#)
 */
interface reportBizReady {
    type: APIType.Fn;
    fn: (option?: reportBizReadyOption) => void;
}
/**
 * @name reportBizReady.option
 */
interface reportBizReadyOption {
    /**
     * @description 可用时间戳。
     */
    availableTime?: number;
}
export {};
//# sourceMappingURL=report.d.ts.map