import { API, APIDefaultErrorResponse, APIType } from '../../../type';
export interface TypeExport<S> {
}
/**
 * @name 图像识别
 */
export interface APIExport<S> {
    [API.ocr]: ocr<S>;
    [API.ap$ocr]: ap$ocr;
    [API.ap$xnnOcr]: ap$xnnOcr;
}
/**
 * @description 图像智能识别。
 */
interface ocr<S> {
    type: APIType.Async;
    request: {
        /**
         * @description OCR 类型
         */
        ocrType: `${EOCRType}`;
        /**
         * @description 需要做 OCR 识别的图片路径：支持网络路径、apFilePath、包文件路径
         * - `path` 和 `imageBase64` 必须存在一个
         */
        path?: string;
        /**
         * @description 待识别图片的 base64 编码
         * - `path` 和 `imageBase64` 必须存在一个
         */
        imageBase64?: string;
        /**
         * @description 当 `ocrType` 为 `ocr_idcard` 或者 `ocr_driver_license` 时，需传正反面参数，face/back 正/反
         */
        side?: 'face' | 'back';
    };
    response: {
        /**
         * @description 更多 OCR 返回值示例 可见 https://yuque.antfin.com/tiny-tmp/api/ocr#GidZM
         */
        result: OCRResult4Card | OCRResult4Vin | OCRResult4General | OCRResult4Ticket;
    };
}
declare const enum EOCRType {
    /**
     * @description 银行卡识别
     */
    'ocr_bank_card' = "ocr_bank_card",
    /**
     * @description 名片识别
     */
    'ocr_business_card' = "ocr_business_card",
    /**
     * @description 营业执照识别
     */
    'ocr_business_license' = "ocr_business_license",
    /**
     * @description 驾驶证识别，face/back 主页/副页
     */
    'ocr_driver_license' = "ocr_driver_license",
    /**
     * @description 身份证识别，face/back 正/反
     */
    'ocr_idcard' = "ocr_idcard",
    /**
     * @description 护照识别
     */
    'ocr_passport' = "ocr_passport",
    /**
     * @description 火车票识别
     */
    'ocr_train_ticket' = "ocr_train_ticket",
    /**
     * @description 行驶证识别
     */
    'ocr_vehicle' = "ocr_vehicle",
    /**
     * @description 车牌识别
     */
    'ocr_vehicle_plate' = "ocr_vehicle_plate",
    /**
     * @description 通用文字识别
     */
    'ocr_general' = "ocr_general",
    /**
     * @description vin识别
     */
    'ocr_vin' = "ocr_vin"
}
/**
 * @description 卡片/证件类 OCR 识别结果，符合此种 `result` 结构的 `ocrType` 包括：
 * - `ocrBankCard`
 * - `ocrBusinessCard`
 * - `ocrBusinessLicense`
 * - `ocrDriverLicense`
 * - `ocrIdcard`
 * - `ocrPassport`
 * - `ocrVehicle`
 * - `ocrVehiclePlate`
 */
interface OCRResult4Card {
    outputs: Output4Card[];
}
interface Output4Card {
    /**
     * @description OCR 识别结果对应 `ocrType` 类型
     */
    outputLabel: string;
    /**
     * @description 其他内容
     */
    outputMulti: Record<string, unknown>;
    /**
     * @description OCR 具体返回值
     */
    outputValue: OutputValue4Card;
}
interface OutputValue4Card {
    /**
     * @description OCR 识别结果返回数据类型
     */
    dataType: number;
    /**
     * @description OCR 识别结果具体列表，不同 `ocrType` 对应的 `dataValue` 内容列表不一致
     */
    dataValue: Record<string, unknown>;
}
/**
 * @description 车架识别结果，符合此种 `result` 结构的 `ocrType` 包括：
 * - `ocrVin`
 */
interface OCRResult4Vin {
    /**
     * @description OCR 请求Id
     */
    'request_id': string;
    /**
     * @description OCR 结果布尔值，true 代表成功，false 则失败
     */
    success: boolean;
    /**
     * @description OCR 具体返回值
     */
    vin: string;
}
/**
 * @description 通用类识别结果，符合此种 `result` 结构的 `ocrType` 包括：
 * - `ocrGeneral`
 */
interface OCRResult4General {
    /**
     * @description OCR 请求Id
     */
    'request_id': string;
    /**
     * @description OCR 结果布尔值，true 代表成功，false 则失败
     */
    success: boolean;
    /**
     * @description OCR 具体返识别内容数组
     */
    text: string[];
}
/**
 * @description 票类识别结果，如车票，符合此种 `result` 结构的 `ocrType` 包括：
 * - `ocrTrainTicket`
 */
interface OCRResult4Ticket {
    /**
     * @description OCR 请求Id
     */
    'request_id': string;
    /**
     * @description OCR 结果布尔值，true 代表成功，false 则失败
     */
    success: boolean;
    /**
     * @description 火车票日期
     */
    date: string;
    /**
     * @description 火车票目的地
     */
    destination: string;
    /**
     * @description 当前火车票座位类型（硬卧、硬座等）
     */
    level: string;
    /**
     * @description 当前火车票车次
     */
    number: string;
    /**
     * @description 当前火车票起始站
     */
    origin: string;
    /**
     * @description 当前火车票车厢信息
     */
    place: string;
    /**
     * @description 当前火车票价格
     */
    price: string;
}
interface ap$ocr {
    type: APIType.Alias;
    alias: API.ocr;
}
/**
 * @description xnnOcr 识别。
 */
interface ap$xnnOcr {
    type: APIType.Async;
    request: {
        /**
         * @description 识别类型。
         */
        type: `${EXnnOcrType}`;
    };
    response: {
        name: string;
        /**
         * @description 返回结果结构类型。
         */
        type: string;
        /**
         * @description 结果主体。
         */
        body: Record<string, unknown>[];
    };
    error: xnnOcrError;
}
declare const enum EXnnOcrType {
    /**
     * @description 身份证正面
     */
    'identityCardAvatar' = "identityCardAvatar",
    /**
     * @description 身份证背面
     */
    'identityCardEmblem' = "identityCardEmblem",
    /**
     * @description 银行卡
     */
    'bankcard' = "bankcard",
    /**
     * @description 车牌
     */
    'plate' = "plate",
    /**
     * @description vin码
     */
    'vinCode' = "vinCode"
}
interface xnnOcrError extends APIDefaultErrorResponse {
    /**
     * @description 错误码。
     */
    error: EXnnOcrErrorCode;
}
declare const enum EXnnOcrErrorCode {
    /**
     * @description 输入参数错误。
     */
    '_1' = 1,
    /**
     * @description 机型不支持或者被降级。
     */
    '_2' = 2,
    /**
     * @description 未处理，可能引擎处于busy状态。
     */
    '_3' = 3,
    /**
     * @description 算法引擎初始化/处理等内部错误。
     */
    '_4' = 4,
    /**
     * @description 内部配置信息拉取/解析失败。
     */
    '_5' = 5,
    /**
     * @description 模型文件未下载或相关错误。
     */
    '_6' = 6,
    /**
     * @description 内存太小。
     */
    '_7' = 7,
    /**
     * @description CPU太高。
     */
    '_8' = 8
}
export {};
//# sourceMappingURL=ocr.d.ts.map