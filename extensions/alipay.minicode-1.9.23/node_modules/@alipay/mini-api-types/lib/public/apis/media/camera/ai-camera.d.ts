import { API, APIType, Type, TypeRef } from '../../../type';
export interface TypeExport<S> {
    [Type.Camera.AICameraContext]: AICameraContext<S>;
    [Type.Camera.AICameraContextTakePhoto]: takePhoto4AICamera<S>;
    [Type.Camera.AICameraContextStartRecord]: startRecord4AICamera<S>;
    [Type.Camera.AICameraContextStopRecord]: stopRecord4AICamera<S>;
    [Type.Camera.AICameraContextStartAudioRecognize]: startAudioRecognize4AICamera<S>;
    [Type.Camera.AICameraContextStopAudioRecognize]: stopAudioRecognize4AICamera<S>;
    [Type.Camera.AICameraContextStartVideoRecognize]: startVideoRecognize4AICamera<S>;
    [Type.Camera.AICameraContextStopVideoRecognize]: stopVideoRecognize4AICamera<S>;
    [Type.Camera.AICameraContextHasHeadset]: hasHeadset4AICamera<S>;
}
/**
 * @name 智能相机
 */
export interface APIExport<S> {
    [API.createAICameraContext]: createAICameraContext<S>;
}
/**
 * @description 图片质量
 */
declare const enum EQuality {
    /**
     * @description 高质量。
     */
    high = "high",
    /**
     * @description 普通质量。
     */
    normal = "normal",
    /**
     * @description 低质量。
     */
    low = "low"
}
/**
 * @description 传入 `aicameraId`，返回一个 `AICameraContext` 上下文。通过 `AICameraContext` 可以操作一个 `ai-camera` 组件。
 */
interface createAICameraContext<S> {
    type: APIType.Fn;
    fn: (aicameraId: string) => TypeRef<S, Type.Camera.AICameraContext>;
}
/**
 * @description `AICameraContext` 上下文对象，用于操作对应的 `ai-camera` 组件。
 */
interface AICameraContext<S> {
    type: APIType.Property;
    property: {
        takePhoto: TypeRef<S, Type.Camera.AICameraContextTakePhoto>;
        startRecord: TypeRef<S, Type.Camera.AICameraContextStartRecord>;
        stopRecord: TypeRef<S, Type.Camera.AICameraContextStopRecord>;
        startAudioRecognize: TypeRef<S, Type.Camera.AICameraContextStartAudioRecognize>;
        stopAudioRecognize: TypeRef<S, Type.Camera.AICameraContextStopAudioRecognize>;
        startVideoRecognize: TypeRef<S, Type.Camera.AICameraContextStartVideoRecognize>;
        stopVideoRecognize: TypeRef<S, Type.Camera.AICameraContextStopVideoRecognize>;
        hasHeadset: TypeRef<S, Type.Camera.AICameraContextHasHeadset>;
    };
}
/**
 * @description 拍照，可指定质量，成功则返回图片。
 */
interface takePhoto4AICamera<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 成像质量。
         * @default normal
         */
        quality?: `${EQuality}`;
        /**
         * @description 出参是否需要 base64。
         * @default false
         */
        isNeedBase64?: boolean;
    };
    response: {
        /**
         * @description 照片文件的临时路径。
         */
        tempImagePath: string;
        /**
         * @description 照片文件 base64 编码。
         */
        imageBase64?: string;
    };
}
/**
 * @description 开始录像。
 */
interface startRecord4AICamera<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 视频比特率。
         * @default 2.5\*1000\*1000
         */
        bitrate?: number;
        /**
         * @default 30
         */
        fps?: number;
        /**
         * @description 音频采样率。
         * 有效值：
         * - `16000`
         * - `44100`
         * @default 默认取系统采样率
         */
        sampleRate?: number;
    };
}
/**
 * @description 结束录像，成功则返回封面与视频。
 */
interface stopRecord4AICamera<S> {
    type: APIType.Async;
    response: {
        /**
         * @description 封面图片文件的临时路径。
         */
        tempThumbPath: string;
        /**
         * @description 视频的文件的临时路径。
         */
        tempVideoPath: string;
    };
}
/**
 * @description 开始语音识别。
 */
interface startAudioRecognize4AICamera<S> {
    type: APIType.Async;
    request: void;
    response: void;
}
/**
 * @description 结束语音识别。
 */
interface stopAudioRecognize4AICamera<S> {
    type: APIType.Async;
    request: void;
    response: void;
}
/**
 * @description 开始视频流识别。
 */
interface startVideoRecognize4AICamera<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 模型id。
         */
        modelId: string;
        /**
         * @description 模型md5。
         */
        md5: string;
        /**
         * @description 识别类型。
         */
        bizType: `${EBizType}`;
        /**
         * @description 拓展参数。
         */
        options?: Record<string, unknown>;
    };
}
declare const enum EBizType {
    /**
     * @description 通用检测
     */
    commonDetect = "commonDetect",
    /**
     * @description 通用分类
     */
    commonClassify = "commonClassify",
    /**
     * @description 通用预测
     */
    commonPredict = "commonPredict",
    /**
     * @description 通用OCR
     */
    commonOcr = "commonOcr",
    /**
     * @description 驾驶证正面
     */
    driverLicenseFront = "driverLicenseFront",
    /**
     * @description 驾驶证反面
     */
    driverLicenseBack = "driverLicenseBack",
    /**
     * @description 行驶证正面
     */
    vehicleFront = "vehicleFront",
    /**
     * @description 行驶证反面
     */
    vehicleBack = "vehicleBack",
    /**
     * @description 身份证正面
     */
    idcardFront = "idcardFront",
    /**
     * @description 身份证反面
     */
    idcardBack = "idcardBack",
    /**
     * @description 银行卡
     */
    bankcard = "bankcard",
    /**
     * @description 车牌
     */
    vehiclePlate = "vehiclePlate",
    /**
     * @description 汽车VIN码
     */
    vinCode = "vinCode",
    /**
     * @description 燃气表示数识别
     */
    gasMeters = "gasMeters",
    /**
     * @description 护照识别
     */
    passport = "passport"
}
/**
 * @description 结束视频流识别。
 */
interface stopVideoRecognize4AICamera<S> {
    type: APIType.Async;
    request: void;
    response: void;
}
/**
 * @description 检测是否链接耳机。
 */
interface hasHeadset4AICamera<S> {
    type: APIType.Async;
    request: void;
    response: {
        /**
         * @description 是否连接耳机。
         */
        hasHeadset: boolean;
    };
}
export {};
//# sourceMappingURL=ai-camera.d.ts.map