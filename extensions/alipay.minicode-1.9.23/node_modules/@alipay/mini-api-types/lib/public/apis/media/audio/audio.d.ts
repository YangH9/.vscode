import { API, APIType, Type, TypeRef } from '../../../type';
export interface TypeExport<S> {
    [Type.Audio.AudioContext]: AudioContext<S>;
    [Type.Audio.AudioContextSetSrc]: setSrc;
    [Type.Audio.AudioContextPlay]: play;
    [Type.Audio.AudioContextPause]: pause;
    [Type.Audio.AudioContextSeek]: seek;
}
/**
 * @name 播放音频(旧)
 */
export interface APIExport<S> {
    [API.createAudioContext]: createAudioContext<S>;
}
/**
 * @description 创建并返回 `audio` 上下文 `AudioContext` 对象。
 */
interface createAudioContext<S> {
    type: APIType.Fn;
    fn: (audioId: string) => TypeRef<S, Type.Audio.AudioContext>;
}
/**
 * @description `AudioContext` 通过 `audioId` 跟一个 `<audio/>` 组件绑定，通过它可以操作对应的 <audio/> 组件。
 */
interface AudioContext<S> {
    type: APIType.Property;
    property: {
        /**
         * @description 设置音频地址。
         */
        setSrc: TypeRef<S, Type.Audio.AudioContextSetSrc>;
        /**
         * @description 播放。
         */
        play: TypeRef<S, Type.Audio.AudioContextPlay>;
        /**
         * @description 暂停。
         */
        pause: TypeRef<S, Type.Audio.AudioContextPause>;
        /**
         * @description 跳转到指定位置，单位 s。
         */
        seek: TypeRef<S, Type.Audio.AudioContextSeek>;
    };
}
/**
 * @description 设置音频地址。
 */
interface setSrc {
    type: APIType.Fn;
    /**
     * @param src 音频地址。
     */
    fn: (src: string) => void;
}
/**
 * @description 播放。
 */
interface play {
    type: APIType.Fn;
    fn: () => void;
}
/**
 * @description 暂停。
 */
interface pause {
    type: APIType.Fn;
    fn: () => void;
}
/**
 * @description 跳转到指定位置，单位 s。
 */
interface seek {
    type: APIType.Fn;
    /**
     * @param position 指定未知，单位 s。
     */
    fn: (position: number) => void;
}
export {};
//# sourceMappingURL=audio.d.ts.map