import { APIType, Flag, FlagDef, Type } from '../../../type';
export interface TypeExport<S> {
    [Type.AR.ARContextGetFaceTrackingStatus]: getFaceTrackingStatus<S>;
    [Type.AR.ARContextStartFaceTracking]: startFaceTracking<S>;
    [Type.AR.ARContextSetFaceTrackingNode]: setFaceTrackingNode<S>;
    [Type.AR.ARContextGetFaceInfo]: getFaceInfo<S>;
    [Type.AR.ARContextStopFaceTracking]: stopFaceTracking<S>;
}
/**
 * @name 人脸跟踪(算法相关)
 * @description 本文主要介绍 **算法方面** 的 **人脸跟踪** 相关接口。
 * - 相关接口请先通过 `createARContext` 获取 `ARContext` 后，才能调用 `ARContext` 内的接口。
 *
 * 人脸跟踪使用流程：
 * - 首先使用 getFaceTrackingStatus 获取人脸跟踪的算法引擎状态。
 * - 如果支持人脸跟踪，使用 startFaceTracking 开启人脸跟踪。
 * - 然后通过 setFaceTrackingNode 设置需要跟踪人脸的节点。
 * - 跟踪过程中可通过 getFaceInfo 获取跟踪人脸的相关信息。
 * - 使用结束后使用 stopFaceTracking 关闭人脸跟踪能力。
 */
export interface APIExport<S> {
}
/**
 * @description 【人脸跟踪】获取人脸检测引擎状态。
 */
interface getFaceTrackingStatus<S> {
    type: APIType.Async;
    request: void;
    response: {
        /**
         * @description 引擎状态。
         */
        status: `${EFaceTrackingStatus}`;
    };
}
/**
 * @description 【人脸跟踪】开启人脸检测。
 */
interface startFaceTracking<S> {
    type: APIType.Async;
    request: void;
    response: {
        /**
         * @description 引擎状态。
         */
        status: `${EFaceTrackingStatus}`;
    };
}
/**
 * @description 【人脸跟踪】设置人脸跟踪节点。
 */
interface setFaceTrackingNode<S> {
    type: APIType.Fn;
    fn: (option?: setFaceTrackingNodeOption<S>) => void;
}
/**
 * @name setFaceTrackingNode.option
 */
interface setFaceTrackingNodeOption<S> {
    /**
     * @description 是否开启人脸关键点输出。
     */
    facePoints: FlagDef<S, boolean, Flag.AR.SetFaceTrackingNodeOptionFacePoints>;
    /**
     * @description 是否保存人脸跟踪第一帧。
     */
    faceFrame: FlagDef<S, boolean, Flag.AR.SetFaceTrackingNodeOptionFaceFrame>;
}
/**
 * @description 【人脸跟踪】获取当前跟踪节点的人脸信息。
 */
interface getFaceInfo<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 节点名称。
         */
        nodeId: string;
    };
    response: {
        /**
         * @description 人脸信息，如果无人脸跟踪，返回空字符串。
         */
        info: faceInfo;
    };
}
interface faceInfo {
    /**
     * @description 节点名称。
     */
    nodeId: string;
    /**
     * @description 该人脸跟踪节点的欧拉角信息。
     */
    angle: string[];
}
/**
 * @description 【人脸跟踪】关闭人脸检测，关闭后人脸跟踪不再有效。
 */
interface stopFaceTracking<S> {
    type: APIType.Fn;
    fn: () => void;
}
/**
 * @description 人脸检测引擎状态。
 */
export declare const enum EFaceTrackingStatus {
    /**
     * @description 设备不支持。
     */
    NotSupport = "NotSupport",
    /**
     * @description 正在初始化。
     */
    Initializing = "Initializing",
    /**
     * @description 准备就绪。
     */
    Ready = "Ready",
    /**
     * @description 未知。
     */
    Unknow = "Unknow"
}
export {};
//# sourceMappingURL=face-track.d.ts.map