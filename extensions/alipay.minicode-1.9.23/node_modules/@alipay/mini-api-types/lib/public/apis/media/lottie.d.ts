import { API, APIType, Type, TypeRef } from '../../type';
export interface TypeExport<S> {
    [Type.Lottie.LottieContext]: LottieContext<S>;
    [Type.Lottie.LottieContextPlay]: play<S>;
    [Type.Lottie.LottieContextStop]: stop<S>;
    [Type.Lottie.LottieContextPause]: pause<S>;
    [Type.Lottie.LottieContextSetSpeed]: setSpeed<S>;
    [Type.Lottie.LottieContextGoToAndStop]: goToAndStop<S>;
    [Type.Lottie.LottieContextGoToAndPlay]: goToAndPlay<S>;
    [Type.Lottie.LottieContextPlayFromMinToMaxProgress]: playFromMinToMaxProgress<S>;
    [Type.Lottie.LottieContextPlayFromMinToMaxFrame]: playFromMinToMaxFrame<S>;
    [Type.Lottie.LottieContextDowngradeToPlaceholder]: downgradeToPlaceholder<S>;
}
/**
 * @name Lottie动画
 */
export interface APIExport<S> {
    [API.createLottieContext]: createLottieContext<S>;
}
/**
 * @description 用于创建并返回一个 `lottieId` 上下文对象 `LottieContext`。
 */
interface createLottieContext<S> {
    type: APIType.Fn;
    fn: (lottieId: string) => TypeRef<S, Type.Lottie.LottieContext>;
}
/**
 * @description `LottieContext` 上下文对象，用于操作对应的 `lottie` 组件。
 */
interface LottieContext<S> {
    type: APIType.Property;
    property: {
        play: TypeRef<S, Type.Lottie.LottieContextPlay>;
        stop: TypeRef<S, Type.Lottie.LottieContextStop>;
        pause: TypeRef<S, Type.Lottie.LottieContextPause>;
        setSpeed: TypeRef<S, Type.Lottie.LottieContextSetSpeed>;
        goToAndStop: TypeRef<S, Type.Lottie.LottieContextGoToAndStop>;
        goToAndPlay: TypeRef<S, Type.Lottie.LottieContextGoToAndPlay>;
        playFromMinToMaxProgress: TypeRef<S, Type.Lottie.LottieContextPlayFromMinToMaxProgress>;
        playFromMinToMaxFrame: TypeRef<S, Type.Lottie.LottieContextPlayFromMinToMaxFrame>;
        downgradeToPlaceholder: TypeRef<S, Type.Lottie.LottieContextDowngradeToPlaceholder>;
    };
}
/**
 * @description 开始播放。
 */
interface play<S> {
    type: APIType.Fn;
    fn: () => void;
}
/**
 * @description 停止播放。
 */
interface stop<S> {
    type: APIType.Fn;
    fn: () => void;
}
/**
 * @description 暂停。
 */
interface pause<S> {
    type: APIType.Fn;
    fn: () => void;
}
/**
 * @description 设置播放速度。正数为正向播放，负数负向播放。示例：`setSpeed({ value: 1.5 })`
 */
interface setSpeed<S> {
    type: APIType.Fn;
    fn: (option: setSpeedOption) => void;
}
/**
 * @name setSpeed.option
 */
interface setSpeedOption {
    /**
     * @description 播放速度（倍速），负数代表倒序播放。
     * @default 1
     */
    value?: number;
}
/**
 * @description 跳转至并停在该进度。示例：`goToAndStop({ value: 对应的值 })`
 */
interface goToAndStop<S> {
    type: APIType.Fn;
    fn: (option: goToAndStopOption) => void;
}
/**
 * @name goToAndStop.option
 */
interface goToAndStopOption {
    /**
     * @description 跳转至 `value` 并停在该进度，value 值范围为 `0 <= value <= 1`。
     */
    value: number;
}
/**
 * @description 跳转至并从该进度开始播放。示例：`goToAndPlay({ value: 对应的值 })`
 */
interface goToAndPlay<S> {
    type: APIType.Fn;
    fn: (option: goToAndPlayOption) => void;
}
/**
 * @name goToAndPlay.option
 */
interface goToAndPlayOption {
    /**
     * @description 跳转至 `value` 并从该进度开始播放，value 值范围为 `0 <= value <= 1`。
     */
    value: number;
}
/**
 * @description 从最小到最大的进度区间进行播放。示例：`playFromMinToMaxProgress({ min:对应的值, max:对应的值 })`
 */
interface playFromMinToMaxProgress<S> {
    type: APIType.Fn;
    fn: (option: playFromMinToMaxProgressOption) => void;
}
/**
 * @name playFromMinToMaxProgress.option
 */
interface playFromMinToMaxProgressOption {
    /**
     * @description 最小进度，值范围 `0 <= min <= 1`。
     */
    min: number;
    /**
     * @description 最小进度，值范围 `0 <= max <= 1`。
     */
    max: number;
}
/**
 * @description 从最小到最大的 `Frame` 区间进行播放。示例：`playFromMinToMaxFrame({ min:对应的值, max:对应的值 })`
 */
interface playFromMinToMaxFrame<S> {
    type: APIType.Fn;
    fn: (option: playFromMinToMaxFrameOption) => void;
}
/**
 * @name playFromMinToMaxFrame.option
 */
interface playFromMinToMaxFrameOption {
    /**
     * @description 最小帧，值范围 `0 <= min <= 1`。
     */
    min: number;
    /**
     * @description 最小帧，值范围 `0 <= max <= 1`。
     */
    max: number;
}
/**
 * @description 当前 `Lottie` 视图指定降级为展示 `placeholder`。
 */
interface downgradeToPlaceholder<S> {
    type: APIType.Fn;
    fn: () => void;
}
export {};
//# sourceMappingURL=lottie.d.ts.map