import { API, APIDefaultErrorResponse, APIType } from '../../type';
export interface TypeExport<S> {
}
/**
 * @name WiFi
 * @description 在小程序中支持搜索周边的 Wifi，同时可以针对指定 Wifi，传入密码发起连接。
 *
 * **连接指定 Wifi 接口调用时序**：
 * - **Android**：`startWifi` —> `connectWifi` —> `onWifiConnected`。
 * - **iOS**（仅iOS 11及以上版本支持）：`startWifi` —> `connectWifi` —> `onWifiConnected`。
 *
 * **连周边 Wifi 接口调用时序**：
 * - **Android**：`startWifi` —> `getWifiList` —> `onGetWifiList` —> `connectWifi` —> `onWifiConnected`。
 * - **iOS**（iOS 11.0及11.1版本因系统原因暂不支持）：`startWifi` —> `getWifiList` —> `onGetWifiList` —> `setWifiList` —> `onWifiConnected`。
 *
 * **注意事项**：
 * - Android 6.0 以上版本，在没有打开定位开关的时候会导致设备不能正常获取周边的 Wifi 信息。
 */
export interface APIExport<S> {
    [API.startWifi]: startWifi;
    [API.stopWifi]: stopWifi;
    [API.connectWifi]: connectWifi;
    [API.getWifiList]: getWifiList;
    [API.setWifiList]: setWifiList;
    [API.getConnectedWifi]: getConnectedWifi;
    [API.onGetWifiList]: onGetWifiList;
    [API.offGetWifiList]: offGetWifiList;
    [API.onWifiConnected]: onWifiConnected;
    [API.offWifiConnected]: offWifiConnected;
    [API.getWifiBroadcastInfo]: getWifiBroadcastInfo;
    [API.registerSSID]: registerSSID;
    [API.unregisterSSID]: unregisterSSID;
}
/**
 * @description 开启 Wifi。
 */
interface startWifi {
    type: APIType.Async;
    request: void;
    response: {
        /**
         * @description 是否成功。
         */
        success: boolean;
    };
    error: wifiApiError;
}
/**
 * @description 关闭 Wifi。
 */
interface stopWifi {
    type: APIType.Async;
    request: void;
    response: {
        /**
         * @description 是否成功。
         */
        success: boolean;
    };
    error: wifiApiError;
}
/**
 * @description 连接 Wifi。
 */
interface connectWifi {
    type: APIType.Async;
    request: {
        /**
         * @description Wifi 设备 SSID。
         */
        SSID?: string;
        /**
         * @description Wifi 设备 BSSID。
         */
        BSSID?: string;
        /**
         * @description Wifi 设备密码。
         */
        password?: string;
        /**
         * @description Wifi 是 WEP Wifi 还是 WPA or WPA2 personal Wifi。
         * @default false
         */
        isWEP?: boolean;
    };
    response: {
        /**
         * @description 是否成功。
         */
        success: boolean;
    };
    error: wifiApiError;
}
interface wifiApiError extends APIDefaultErrorResponse {
    /**
     * @description 错误码。
     */
    error: EWifiApiErrorCode;
}
declare const enum EWifiApiErrorCode {
    /**
     * @description 当前系统不支持相关能力。
     */
    '_12001' = 12001,
    /**
     * @description 未先调用 `startWifi` 接口。
     */
    '_12000' = 12000,
    /**
     * @description Wifi 密码错误。
     */
    '_12002' = 12002,
    /**
     * @description 重复连接 Wifi。
     */
    '_12004' = 12004,
    /**
     * @description 用户拒绝授权连接 Wifi。
     */
    '_12007' = 12007,
    /**
     * @description 无效 SSID。
     */
    '_12008' = 12008,
    /**
     * @description 应用在后台无法配置 Wifi。
     */
    '_12011' = 12011,
    /**
     * @description Wifi 功能暂时不能使用。
     */
    '_12012' = 12012
}
/**
 * @description 请求获取 Wifi 列表，在 `onGetWifiList` 注册的回调中返回 `wifiList` 数据。
 * - `iOS` 将跳转到系统的 Wifi 界面，`Android` 不会跳转。
 * - iOS 11.0 及 iOS 11.1 两个版本因系统问题，该方法失效。但在 iOS 11.2 中已修复。
 */
interface getWifiList {
    type: APIType.Fn;
    fn: () => void;
}
/**
 * @description **iOS 特有接口** 在 `onGetWifiList` 回调后，利用接口设置 `wifiList` 中 AP 的相关信息。
 * 注意事项：
 * - 该接口只能在 `onGetWifiList` 回调之后才能调用。
 * - 此时客户端会挂起，等待小程序设置 Wifi 信息，请务必尽快调用该接口，若无数据请传入一个空数组。
 * - 有可能随着周边 Wifi 列表的刷新，单个流程内收到多次带有存在重复的 Wifi 列表的回调。
 */
interface setWifiList {
    type: APIType.Async;
    request: {
        /**
         * @description 提供预设的 Wifi 信息列表。
         */
        wifiList: wifiInfo4SetWifiList[];
    };
}
/**
 * @name setWifiList.object.wifiList
 */
interface wifiInfo4SetWifiList {
    /**
     * @description Wifi 的 SSID。
     */
    SSID: string;
    /**
     * @description Wifi 的 BSSID。
     */
    BSSID: string;
    /**
     * @description Wifi 的设备密码。
     */
    password: string;
}
/**
 * @description 获取已连接中的 Wifi 信息。
 */
interface getConnectedWifi {
    type: APIType.Async;
    request: void;
    response: {
        /**
         * @description Wifi 信息。
         */
        wifi: wifiInfo;
    };
}
/**
 * @description 监听在获取到 Wifi 列表数据时的事件，在回调中将返回 `wifiList`。
 */
interface onGetWifiList {
    type: APIType.Async;
    request: void;
    response: {
        /**
         * @description Wifi 列表数据。
         */
        wifiList: wifiInfo[];
    };
}
interface wifiInfo {
    /**
     * @description Wifi 的 SSID。
     */
    SSID: string;
    /**
     * @description Wifi 的 BSSID。
     */
    BSSID: string;
    /**
     * @description Wifi 是否安全。
     */
    secure: boolean;
    /**
     * @description Wifi 信号强度。
     */
    signalStrength: number;
}
/**
 * @description 取消监听在获取到 Wifi 列表数据。
 */
interface offGetWifiList {
    type: APIType.Fn;
    /**
     * @param callback
     * - 不传递 `callback` 值，则会移除监听**所有**的事件回调。
     * - 传递 `callback` 值，只移除**对应**的 `callback` 事件。
     */
    fn: (callback?: Function) => void;
}
/**
 * @description 监听连接上 Wifi 的事件。
 */
interface onWifiConnected {
    type: APIType.Async;
    request: void;
    response: {
        /**
         * @description Wifi 信息。
         */
        wifi: wifiInfo;
    };
}
/**
 * @description 取消监听连接上 Wifi 的事件。
 */
interface offWifiConnected {
    type: APIType.Fn;
    /**
     * @param callback
     * - 不传递 `callback` 值，则会移除监听**所有**的事件回调。
     * - 传递 `callback` 值，只移除**对应**的 `callback` 事件。
     */
    fn: (callback?: Function) => void;
}
/**
 * @description 获取 Wifi 组播信息，包括 IP 地址，组播地址。
 */
interface getWifiBroadcastInfo {
    type: APIType.Async;
    request: void;
    response: {
        /**
         * @description Wifi IP 地址。
         */
        address: string;
        /**
         * @description Wifi 组播地址。
         */
        broadcastAddr: string;
    };
    error: getWifiBroadcastInfoError;
}
interface getWifiBroadcastInfoError extends APIDefaultErrorResponse {
    /**
     * @description 错误码。
     */
    error: EGetWifiBroadcastInfoErrorCode;
}
declare const enum EGetWifiBroadcastInfoErrorCode {
    /**
     * @description 未打开设备的 Wifi 开关。
     */
    '_60000' = 60000,
    /**
     * @description 设备未连接 Wifi。
     */
    '_60001' = 60001
}
/**
 * @description 信任该 SSID，对于需要 Portal 认证的 Wifi，不会弹出 portal 认证页面。
 */
interface registerSSID {
    type: APIType.Async;
    request: {
        /**
         * @description Wifi 设备 SSID。
         */
        SSID: string;
    };
}
/**
 * @description 不再信任该 SSID，对于需要 Portal 认证的 Wifi，继续弹出 portal 认证页面。
 */
interface unregisterSSID {
    type: APIType.Async;
    request: {
        /**
         * @description Wifi 设备 SSID。
         */
        SSID: string;
    };
}
export {};
//# sourceMappingURL=wifi.d.ts.map