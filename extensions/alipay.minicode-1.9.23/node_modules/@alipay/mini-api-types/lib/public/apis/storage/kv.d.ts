import { API, APIType, Type, TypeRef } from '../../type';
export interface TypeExport<S> {
    [Type.Storage.StorageInfo]: StorageInfo<S>;
}
/**
 * @name 本地缓存
 * @description
 * 本文档提供了以下本地缓存数据相关需求的 API 能力，进行存储、获取和删除等控制
 * - 单个小程序的缓存总上限为 10MB。
 * - 同步方法会阻塞当前任务，直到同步方法处理返回。异步方法不会阻塞当前任务。
 */
export interface APIExport<S> {
    [API.setStorage]: setStorage;
    [API.getStorage]: getStorage<S>;
    [API.removeStorage]: removeStorage;
    [API.clearStorage]: clearStorage;
    [API.getStorageInfo]: getStorageInfo<S>;
    [API.setStorageSync]: setStorageSync;
    [API.getStorageSync]: getStorageSync<S>;
    [API.removeStorageSync]: removeStorageSync;
    [API.clearStorageSync]: clearStorageSync;
    [API.getStorageInfoSync]: getStorageInfoSync<S>;
}
/**
 * @description 将数据存储在本地缓存中指定的 key 中的异步接口。
 * - 支持内嵌 webview 的存储与小程序存储隔离，内嵌 webview 中指定 key 存储数据不会覆盖小程序自身相同 key 对应的数据。
 * - 单个 key 允许存储的最大数据大小为 200KB，所有数据存储上限为 10MB。
 * - 缓存数据本地加密存储，通过 API 读取时会自动解密返回。
 * - 覆盖安装支付宝（不是先删除再安装）、支付宝设置中心清除缓存、关闭小程序，这三种操作均不会导致小程序缓存失效。
 * - 小程序缓存默认具有支付宝账号和小程序 ID 两级隔离。
 * - iOS 客户端支持 iTunes 备份。
 */
interface setStorage {
    type: APIType.Async;
    request: {
        /**
         * @description 缓存数据的 key。
         */
        key: string;
        /**
         * @description 要缓存的数据。
         */
        data: unknown;
    };
}
/**
 * @description 删除缓存数据的异步接口。
 * - 移除内嵌 webview 的存储数据时不会移除当前小程序的存储数据。
 */
interface removeStorage {
    type: APIType.Async;
    request: {
        /**
         * @description 缓存数据的 key。
         */
        key: string;
    };
}
/**
 * @description 清除本地数据缓存的异步接口。
 * - 清空内嵌 webview 的存储时不会同时清空当前小程序本身的存储数据。
 */
interface clearStorage {
    type: APIType.Async;
    request: void;
    response: void;
}
/**
 * @description 获取当前 storage 的相关信息的异步接口。在内嵌 webview 内获取当前 storage 的相关信息，但不会获取到当前小程序 storage 的相关信息
 */
interface getStorageInfo<S> {
    type: APIType.Async;
    response: TypeRef<S, Type.Storage.StorageInfo>;
    error: never;
}
/**
 * @description 获取当前 storage 的相关信息的同步接口。在内嵌 webview 内获取当前 storage 的相关信息，但不会获取到当前小程序 storage 的相关信息
 */
interface getStorageInfoSync<S> {
    type: APIType.Sync;
    response: TypeRef<S, Type.Storage.StorageInfo>;
    error: never;
}
/**
 * @name StorageInfo
 */
interface StorageInfo<S> {
    /**
     * @description 当前 storage 中所有的 key
     */
    keys: string[];
    /**
     * @description 当前占用的空间大小，单位为 KB
     */
    currentSize: number;
    /**
     * @description 限制的空间大小，单位为 KB
     */
    limitSize: number;
}
/**
 * @description 将数据存储在本地缓存中指定的 key 中的同步接口。
 */
interface setStorageSync {
    type: APIType.Sync;
    request: {
        /**
         * @description 缓存数据的 key。
         */
        key: string;
        /**
         * @description 要缓存的数据。
         */
        data: unknown;
    };
}
/**
 * @name 获取缓存数据
 * @description 获取缓存数据的异步接口
 */
interface getStorage<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 缓存数据的 key
         */
        key: string;
    };
    response: {
        /**
         * @description key 对应的值
         */
        data?: object | string | number | boolean;
    };
}
/**
 * @name 获取缓存数据
 * @description 获取缓存数据的同步接口
 */
interface getStorageSync<S> {
    type: APIType.Sync;
    request: {
        /**
         * @description 缓存数据的 key
         */
        key: string;
    };
    response: {
        /**
         * @description key 对应的值
         */
        data?: object | string | number | boolean;
    };
}
/**
 * @description 删除缓存数据的同步接口。
 */
interface removeStorageSync {
    type: APIType.Sync;
    request: {
        /**
         * @description 缓存数据的 key。
         */
        key: string;
    };
}
/**
 * @description 清除本地数据缓存的同步接口。
 */
interface clearStorageSync {
    type: APIType.Sync;
    request: void;
    response: void;
}
export {};
//# sourceMappingURL=kv.d.ts.map