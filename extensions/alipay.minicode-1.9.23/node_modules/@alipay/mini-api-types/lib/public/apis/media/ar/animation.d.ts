import { APIType, Type } from '../../../type';
export interface TypeExport<S> {
    [Type.AR.ARContextPlayAnimation]: playAnimation<S>;
    [Type.AR.ARContextPauseAnimation]: pauseAnimation<S>;
    [Type.AR.ARContextResumeAnimation]: resumeAnimation<S>;
    [Type.AR.ARContextStopAnimation]: stopAnimation<S>;
    [Type.AR.ARContextCreateAnimation]: createAnimation<S>;
    [Type.AR.ARContextCreateAnimationClip]: createAnimationClip<S>;
    [Type.AR.ARContextSetAnimationAdditiveBlending]: setAnimationAdditiveBlending<S>;
    [Type.AR.ARContextClearAnimationAdditiveBlending]: clearAnimationAdditiveBlending<S>;
    [Type.AR.ARContextCrossFadeAnimation]: crossFadeAnimation<S>;
    [Type.AR.ARContextLoadAnimation]: loadAnimation<S>;
}
/**
 * @name 动画控制(图形渲染)
 * @description 本文主要介绍 **图形渲染** 方面的 **动画控制** 相关接口。
 * - 相关接口请先通过 `createARContext` 获取 `ARContext` 后，才能调用 `ARContext` 内的接口。
 */
export interface APIExport<S> {
}
/**
 * @description 【动画控制】播放指定动画片段，注意：如果动画片段已暂停，则继续播放(若要重新播放，先调用 stopAnimation)。
 */
interface playAnimation<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 动画片段id。
         */
        clipId: string;
        /**
         * @description 重复次数，`0` 表示无限循环。
         */
        repeat: number;
        /**
         * @description 播放速度(正常速度为1.0)。
         */
        speed: number;
        /**
         * @description 动画混合的权重(默认为1.0)。
         */
        blendWeight?: number;
    };
}
/**
 * @description 【动画控制】暂停播放指定动画片段。
 */
interface pauseAnimation<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 动画片段id。
         */
        clipId: string;
    };
}
/**
 * @description 【动画控制】继续播放指定动画片段。
 */
interface resumeAnimation<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 动画片段id。
         */
        clipId: string;
        /**
         * @description 重复次数，`0` 表示无限循环。
         */
        repeat: number;
        /**
         * @description 播放速度(正常速度为1.0)。
         */
        speed: number;
        /**
         * @description 动画混合的权重(默认为1.0)。
         */
        blendWeight?: number;
    };
}
/**
 * @description 【动画控制】停止指定动画片段。
 */
interface stopAnimation<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 动画片段id。
         */
        clipId: string;
    };
}
/**
 * @description 【动画控制】创建属性动画，并自动创建id为 'Default' 的动画片段。
 */
interface createAnimation<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 要创建的动画id (如有重复会创建失败)。
         */
        animId: string;
        /**
         * @description 动画对应的节点id。
         */
        nodeId: string;
        /**
         * @description 动画属性类型。
         */
        propertyId: EPropertyId;
        /**
         * @description 关键帧的帧数。
         */
        keyCount: number;
        /**
         * @description 关键帧时间点数组。
         */
        keyTimes: number[];
        /**
         * @description 关键帧属性值数组。
         */
        keyValues: number[];
        /**
         * @description 插值类型。
         */
        type: EAnimationType;
    };
}
/**
 * @description 【动画控制】基于已有动画创建一个片段。
 */
interface createAnimationClip<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 动画片段id。
         */
        clipId: string;
        /**
         * @description 动画id。
         */
        animId: string;
        /**
         * @description 片段动画开始时间，毫秒单位。
         */
        begin: number;
        /**
         * @description 片段动画结束时间，毫秒单位。
         */
        end: number;
    };
}
/**
 * @description 【动画控制】创建加法动画，在已有动画的基础上，对某个骨骼节点进行调整，调整后的动作与动画叠加播放。
 */
interface setAnimationAdditiveBlending<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 目标节点id。
         */
        targetNodeId: string;
        /**
         * @description 动画属性类型。
         */
        propertyId: EPropertyId;
        /**
         * @description 帧属性值数组。
         */
        keyValues: number[];
    };
}
/**
 * @description 【动画控制】清除加法动画。
 */
interface clearAnimationAdditiveBlending<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 目标节点id。
         */
        targetNodeId: string;
    };
}
/**
 * @description 【动画控制】动画淡入淡出效果，从 srcClipId 过渡到 dstClipId，持续时间为 duration，如果 srcClipId 没有在播放，则先播放它再开始淡入淡出效果。
 */
interface crossFadeAnimation<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 源动画片段。
         */
        srcClipId: string;
        /**
         * @description 目标动画片段。
         */
        dstClipId: string;
        /**
         * @description 淡入淡出效果持续的时间，单位为ms。
         */
        duration: number;
    };
}
/**
 * @description 【动画控制】加载动画，动态的加载动画，对于已有的模型，其中包含了一些骨骼节点，通过此API可以动态的加载离线制作的动画数据，而不需要去更新模型。
 */
interface loadAnimation<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 动画文件路径。
         */
        filePath: string;
    };
}
/**
 * @description propertyId 对应的动画属性类型。
 */
declare const enum EPropertyId {
    /**
     * @description 整体缩放，每帧一个scale值，data = scale
     */
    SCALE_UNIT = 0,
    /**
     * @description 各分量缩放，每帧三个值，data = sx, sy, sz
     */
    SCALE = 1,
    /**
     * @description 缩放x分量，x方向上缩放，data = sx
     */
    SCALE_X = 2,
    /**
     * @description 缩放y分量，y方向上缩放，data = sy
     */
    SCALE_Y = 3,
    /**
     * @description 缩放z分量，z方向上缩放，data = sz
     */
    SCALE_Z = 4,
    /**
     * @description 各方向旋转，每帧一个旋转四元数，data = qx, qy, qz, qw
     */
    ROTATE = 8,
    /**
     * @description 各方向位移，每帧一个位移向量，data = tx, ty, tz
     */
    TRANSLATE = 9,
    /**
     * @description x方向上位移，data = tx
     */
    TRANSLATE_X = 10,
    /**
     * @description y方向上位移，data = ty
     */
    TRANSLATE_Y = 11,
    /**
     * @description z方向位移，data = tz
     */
    TRANSLATE_Z = 12,
    /**
     * @description 旋转、位移，data = qx, qy, qz, qw, tx, ty, tz
     */
    ROTATE_TRANSLATE = 16,
    /**
     * @description 缩放、旋转加上位移，data = sx, sy, sz, qx, qy, qz, qw, tx, ty, tz
     */
    SCALE_ROTATE_TRANSLATE = 17,
    /**
     * @description 缩放、位移，data = sx, sy, sz, tx, ty, tz
     */
    SCALE_TRANSLATE = 18,
    /**
     * @description 缩放、旋转，data = sx, sy, sz, qx, qy, qz, qw
     */
    SCALE_ROTATE = 19
}
/**
 * @description 动画插值类型。
 */
declare const enum EAnimationType {
    /**
     * @description BSPLINE，B样条曲线动画。
    */
    BSPLINE = 1,
    /**
     * @description FLAT，平滑动画。
    */
    FLAT = 2,
    /**
     * @description LINEAR，线性动画。
    */
    LINEAR = 4,
    /**
     * @description SMOOTH，光滑曲线动画。
    */
    SMOOTH = 5,
    /**
     * @description STEP，阶梯曲线动画。
    */
    STEP = 6,
    /**
     * @description QUADRATIC_IN。
    */
    QUADRATIC_IN = 7,
    /**
     * @description QUADRATIC_OUT。
    */
    QUADRATIC_OUT = 8,
    /**
     * @description QUADRATIC_IN_OUT。
    */
    QUADRATIC_IN_OUT = 9,
    /**
     * @description QUADRATIC_OUT_IN。
    */
    QUADRATIC_OUT_IN = 10,
    /**
     * @description CUBIC_IN。
    */
    CUBIC_IN = 11,
    /**
     * @description CUBIC_OUT。
    */
    CUBIC_OUT = 12,
    /**
     * @description CUBIC_IN_OUT。
    */
    CUBIC_IN_OUT = 13,
    /**
     * @description CUBIC_OUT_IN。
    */
    CUBIC_OUT_IN = 14,
    /**
     * @description QUARTIC_IN。
    */
    QUARTIC_IN = 15,
    /**
     * @description QUARTIC_OUT。
    */
    QUARTIC_OUT = 16,
    /**
     * @description QUARTIC_IN_OUT。
    */
    QUARTIC_IN_OUT = 17,
    /**
     * @description QUARTIC_OUT_IN。
    */
    QUARTIC_OUT_IN = 18,
    /**
     * @description QUINTIC_IN。
    */
    QUINTIC_IN = 19,
    /**
     * @description QUINTIC_OUT。
    */
    QUINTIC_OUT = 20,
    /**
     * @description QUINTIC_IN_OUT。
    */
    QUINTIC_IN_OUT = 21,
    /**
     * @description QUINTIC_OUT_IN。
    */
    QUINTIC_OUT_IN = 22,
    /**
     * @description SINE_IN。
    */
    SINE_IN = 23,
    /**
     * @description SINE_OUT。
    */
    SINE_OUT = 24,
    /**
     * @description SINE_IN_OUT。
    */
    SINE_IN_OUT = 25,
    /**
     * @description SINE_OUT_IN。
    */
    SINE_OUT_IN = 26,
    /**
     * @description EXPONENTIAL_IN。
    */
    EXPONENTIAL_IN = 27,
    /**
     * @description EXPONENTIAL_OUT。
    */
    EXPONENTIAL_OUT = 28,
    /**
     * @description EXPONENTIAL_IN_OUT。
    */
    EXPONENTIAL_IN_OUT = 29,
    /**
     * @description EXPONENTIAL_OUT_IN。
    */
    EXPONENTIAL_OUT_IN = 30,
    /**
     * @description CIRCULAR_IN。
    */
    CIRCULAR_IN = 31,
    /**
     * @description CIRCULAR_OUT。
    */
    CIRCULAR_OUT = 32,
    /**
     * @description CIRCULAR_IN_OUT。
    */
    CIRCULAR_IN_OUT = 33,
    /**
     * @description CIRCULAR_OUT_IN。
    */
    CIRCULAR_OUT_IN = 34,
    /**
     * @description ELASTIC_IN。
    */
    ELASTIC_IN = 35,
    /**
     * @description ELASTIC_OUT。
    */
    ELASTIC_OUT = 36,
    /**
     * @description ELASTIC_IN_OUT。
    */
    ELASTIC_IN_OUT = 37,
    /**
     * @description ELASTIC_OUT_IN。
    */
    ELASTIC_OUT_IN = 38,
    /**
     * @description OVERSHOOT_IN。
    */
    OVERSHOOT_IN = 39,
    /**
     * @description OVERSHOOT_OUT。
    */
    OVERSHOOT_OUT = 40,
    /**
     * @description OVERSHOOT_IN_OUT。
    */
    OVERSHOOT_IN_OUT = 41,
    /**
     * @description OVERSHOOT_OUT_IN。
    */
    OVERSHOOT_OUT_IN = 42,
    /**
     * @description BOUNCE_IN。
    */
    BOUNCE_IN = 43,
    /**
     * @description BOUNCE_OUT。
    */
    BOUNCE_OUT = 44,
    /**
     * @description BOUNCE_IN_OUT。
    */
    BOUNCE_IN_OUT = 45,
    /**
     * @description BOUNCE_OUT_IN。
    */
    BOUNCE_OUT_IN = 46
}
export {};
//# sourceMappingURL=animation.d.ts.map