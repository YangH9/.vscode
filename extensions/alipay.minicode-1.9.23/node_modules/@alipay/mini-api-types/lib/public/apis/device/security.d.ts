import { API, APIType, APIDefaultErrorResponse } from '../../type';
export interface TypeExport<S> {
}
/**
 * @name 设备安全
 */
export interface APIExport<S> {
    [API.rsa]: rsa;
    [API.isSystemRoot]: isSystemRoot;
}
/**
 * @description 非对称加密。加密与解密过程分别放置在客户端与服务端，私钥也放在服务端（若私钥放在客户端，容易泄露而导致安全问题）。
 */
interface rsa {
    type: APIType.Async;
    request: {
        /**
         * @description 使用 RSA 加密还是 RSA 解密。
         */
        action: `${ERSAAction}`;
        /**
         * @description 要处理的文本。
         * - `加密` 为 原始文本。
         * - `解密` 为 `Base64` 编码格式文本。
         */
        text: string;
        /**
         * @description RSA 密钥。
         * - `加密` 使用公钥
         * - `解密` 使用私钥。
         */
        key: string;
    };
    response: {
        /**
         * @description 经过处理过后得到的文本。
         * - `加密` 为 `Base64` 编码文本。
         * - `解密` 为 原始文本。
         */
        text: string;
    };
    error: RASError;
}
interface RASError extends APIDefaultErrorResponse {
    /**
     * @description 错误码。
     */
    error: ERASErrorCode;
}
declare const enum ERASErrorCode {
    /**
     * @description 参数错误。
     */
    '_10' = 10,
    /**
     * @description key 错误。
     */
    '_11' = 11
}
/**
 * @name rsa.action
 */
declare const enum ERSAAction {
    /**
     * @description 加密。
     */
    encrypt = "encrypt",
    /**
     * @description 解密。
     */
    decrypt = "decrypt"
}
/**
 * @description 设备是否越狱。
 */
interface isSystemRoot {
    type: APIType.Async;
    request: void;
    response: {
        /**
         * @description 是否越狱（注意返回值类型为 `string`）。
         * - `'true'` 设备越狱。
         * - `'false'` 设备未越狱。
         */
        isSystemRoot: string;
    };
}
export {};
//# sourceMappingURL=security.d.ts.map