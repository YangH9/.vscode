import { API, APIType, Type, TypeRef } from '../../../type';
export interface TypeExport<S> {
    [Type.Dom.IntersectionObserver]: IntersectionObserver<S>;
    [Type.Dom.IntersectionObserverDisconnect]: disconnect<S>;
    [Type.Dom.IntersectionObserverObserve]: observe<S>;
    [Type.Dom.IntersectionObserverRelativeTo]: relativeTo<S>;
    [Type.Dom.IntersectionObserverRelativeToViewport]: relativeToViewport<S>;
}
/**
 * @name 节点观测
 */
export interface APIExport<S> {
    [API.createIntersectionObserver]: createIntersectionObserver<S>;
}
/**
 * @description 用于创建并返回一个 `IntersectionObserver` 对象实例。需在 `page.onReady` 之后执行 `my.createIntersectionObserver()`。
 */
interface createIntersectionObserver<S> {
    type: APIType.Fn;
    fn: (option?: createIntersectionObserverOption<S>) => TypeRef<S, Type.Dom.IntersectionObserver>;
}
interface createIntersectionObserverOption<S> {
    /**
     * @description 一个数值数组，包含所有阈值。
     * @default [0]
     */
    thresholds?: number[];
    /**
     * @description 初始的相交比例，如果调用时检测到的相交比例与这个值不相等且达到阈值，则会触发一次监听器的回调函数。
     * @default 0
     */
    initialRatio?: number;
    /**
     * @description 是否同时观测多个目标节点（而非一个），如果设为 `true`，`observe` 的 `targetSelector` 将选中多个节点（注意：同时选中过多节点将影响渲染性能）。
     * @default false
     */
    selectAll?: boolean;
}
/**
 * @description `IntersectionObserver` 对象，用于推断某些节点是否可以被用户看见、有多大比例可以被用户看见。
 */
interface IntersectionObserver<S> {
    type: APIType.Property;
    property: {
        disconnect: TypeRef<S, Type.Dom.IntersectionObserverDisconnect>;
        observe: TypeRef<S, Type.Dom.IntersectionObserverObserve>;
        relativeTo: TypeRef<S, Type.Dom.IntersectionObserverRelativeTo>;
        relativeToViewport: TypeRef<S, Type.Dom.IntersectionObserverRelativeToViewport>;
    };
}
/**
 * @description 停止监听，`observe` 内的回调函数将不再触发。
 */
interface disconnect<S> {
    type: APIType.Fn;
    fn: () => void;
}
/**
 * @description 指定目标节点，并开始监听相交状态变化情况。
 */
interface observe<S> {
    type: APIType.Fn;
    /**
     * @param selector 元素选择器。
     */
    fn: (selector: string, callback: observeCallback<S>) => void;
}
/**
 * @name observe.callback
 */
declare type observeCallback<S> = (result: observeCallbackResult<S>) => void;
interface observeCallbackResult<S> {
    /**
     * @description 相交比例。
     */
    intersectionRatio: number;
    /**
     * @description 相交区域的边界。
     */
    intersectionRect: Rect;
    /**
     * @description 目标边界。
     */
    boundingClientRect: Rect;
    /**
     * @description 参照区域的边界。
     */
    relativeRect: Rect;
    /**
     * @description 相交检测时的时间戳。
     */
    time: number;
}
interface Rect {
    /**
     * @description 左边界。
     */
    left: number;
    /**
     * @description 右边界。
     */
    right: number;
    /**
     * @description 上边界。
     */
    top: number;
    /**
     * @description 下边界。
     */
    bottom: number;
}
/**
 * @description 使用选择器指定一个节点，作为参照区域之一。
 */
interface relativeTo<S> {
    type: APIType.Fn;
    /**
     * @param selector 元素选择器。
     */
    fn: (selector: string, margin?: Margin) => TypeRef<S, Type.Dom.IntersectionObserver>;
}
/**
 * @description 指定页面显示区域作为参照区域之一。
 */
interface relativeToViewport<S> {
    type: APIType.Fn;
    fn: (margin?: Margin) => TypeRef<S, Type.Dom.IntersectionObserver>;
}
/**
 * @description 用来扩展（或收缩）参照节点布局区域的边界。
 */
interface Margin {
    /**
     * @description 节点布局区域的左边界。
     * @default 0
     */
    left?: number;
    /**
     * @description 节点布局区域的右边界。
     * @default 0
     */
    right?: number;
    /**
     * @description 节点布局区域的上边界。
     * @default 0
     */
    top?: number;
    /**
     * @description 节点布局区域的下边界。
     * @default 0
     */
    bottom?: number;
}
export {};
//# sourceMappingURL=intersection-observer.d.ts.map