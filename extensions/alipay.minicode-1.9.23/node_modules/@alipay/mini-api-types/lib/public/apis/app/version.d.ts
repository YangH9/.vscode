import { API, APIDefaultErrorResponse, APIType, Type, TypeRef } from '../../type';
export interface TypeExport<S> {
    [Type.UpdateManager.Manager]: UpdateManager<S>;
    [Type.UpdateManager.ApplyUpdate]: UpdateManagerApplyUpdate;
    [Type.UpdateManager.OnCheckForUpdate]: UpdateManager$OnCheckForUpdate<S>;
    [Type.UpdateManager.OnCheckForUpdateCallback]: UpdateManager$OnCheckForUpdateCallback;
    [Type.UpdateManager.OnUpdateReady]: UpdateManager$OnUpdateReady<S>;
    [Type.UpdateManager.OnUpdateFailed]: UpdateManager$OnUpdateFailed<S>;
}
/**
 * @name 版本管理
 */
export interface APIExport<S> {
    [API.getUpdateManager]: getUpdateManager<S>;
    [API.ap$updateAlipayClient]: ap$updateAlipayClient;
}
/**
 * @description 用于打开支付宝客户端升级界面，用户可主动选择升级支付宝客户端
 */
interface ap$updateAlipayClient {
    type: APIType.Async;
    request: void;
    response: {
        /**
         * @description 代表是否跳转成功
         */
        success: boolean;
    };
    error: APUpdateAlipayClientError;
}
interface APUpdateAlipayClientError extends APIDefaultErrorResponse {
    /**
     * @description 错误码。
     */
    error: EAPUpdateAlipayClientErrorCode;
}
declare const enum EAPUpdateAlipayClientErrorCode {
    /**
     * @description 代表发生未知错误。
     */
    '_3' = 3
}
/**
 * @description 创建一个 UpdateManager 对象，获取全局唯一的版本更新管理器，用于管理小程序更新
 */
interface getUpdateManager<S> {
    type: APIType.Fn;
    fn: () => TypeRef<S, Type.UpdateManager.Manager>;
}
/**
 * @name UpdateManager
 */
interface UpdateManager<S> {
    applyUpdate: TypeRef<S, Type.UpdateManager.ApplyUpdate>;
    onCheckForUpdate: TypeRef<S, Type.UpdateManager.OnCheckForUpdate>;
    onUpdateReady: TypeRef<S, Type.UpdateManager.OnUpdateReady>;
    onUpdateFailed: TypeRef<S, Type.UpdateManager.OnUpdateFailed>;
}
/**
 * @description 当小程序新版本下载完成后（即收到 onUpdateReady 回调），强制小程序重启并使用新版本。
 */
interface UpdateManagerApplyUpdate {
    (): void;
}
/**
 * @description 监听向支付宝后台请求检查更新结果事件。
 */
interface UpdateManager$OnCheckForUpdate<S> {
    (callback: TypeRef<S, Type.UpdateManager.OnCheckForUpdateCallback>): void;
}
interface UpdateManager$OnCheckForUpdateCallback {
    (hasUpdate: boolean): void;
}
/**
 * @description 监听小程序有版本更新事件。
 */
interface UpdateManager$OnUpdateReady<S> {
    (callback: TypeRef<S, Type.Shared.Callback>): void;
}
/**
 * @description 监听小程序更新失败事件。
 */
interface UpdateManager$OnUpdateFailed<S> {
    (callback: TypeRef<S, Type.Shared.Callback>): void;
}
export {};
//# sourceMappingURL=version.d.ts.map