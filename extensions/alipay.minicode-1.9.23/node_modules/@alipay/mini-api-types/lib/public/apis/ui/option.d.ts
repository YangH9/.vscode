import { API, APIType, Flag, FlagDef } from '../../type';
export interface TypeExport<S> {
}
/**
 * @name 多选项
 * @description
 * 本文档提供了以下多选项相关需求的 API 能力
 * - 想使用 **多选项的操作菜单(ActionSheet)** 显示系统提供的操作菜单
 * - 想使用 **级联选择(multiLevelSelect)** 进行多级关联数据选择
 * - 想使用 **选项选择器(optionsSelect)** 替代 select，或者用于 2 级数据的选择
 * - 想使用 **日期选择器(datePicker)** 打开日期选择列表
 */
export interface APIExport<S> {
    [API.showActionSheet]: showActionSheet<S>;
    [API.multiLevelSelect]: multiLevelSelect;
    [API.optionsSelect]: optionsSelect;
    [API.datePicker]: datePicker<S>;
}
/**
 * @name 显示操作菜单
 * @description 显示系统提供的操作菜单 API
 * @tutorial api 获取宽高
 * @file
 * ```js
 * my.showActionSheet({
 *   title: 'ActionSheet',
 *   items: ['菜单一', '菜单二', '菜单三'],
 *   cancelButtonText: '取消好了',
 *   success: (res) => {
 *     const btn = res.index === -1 ? '取消' : '第' + res.index + '个';
 *     my.alert({
 *       title: '你点了' + btn + '按钮',
 *     });
 *   },
 * });
 * ```
 */
interface showActionSheet<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 菜单标题
         */
        title?: string;
        /**
         * @description 菜单按钮文字数组
         */
        items?: string[];
        /**
         * @description 取消按钮文案。注：`Android` 平台此字段无效，不会显示取消按钮
         * @default "取消"
         */
        cancelButtonText?: string;
        /**
         * @description （`iOS 特殊处理`）指定按钮的索引号，从 `0` 开始。使用场景：需要删除或清除数据等类似场景，默认为红色
         */
        destructiveBtnIndex?: number;
        /**
         * @description 需飘红选项的数组
         */
        badges?: FlagDef<S, ShowActionSheetBadges, Flag.UI.ShowActionSheetBadges>;
    };
    response: ShowActionSheetConfirm<S> | ShowActionSheetCancel;
    error: never;
}
/**
 * @description 级联选择功能，主要使用在于多级关联数据选择，比如省市区的信息选择。
 */
interface multiLevelSelect {
    type: APIType.Async;
    request: {
        /**
         * @description 标题。
         */
        title?: string;
        list: MultiLevelSelectList[];
    };
    response: {
        /**
         * @description 是否选择完成，取消返回 `false`。
         */
        success: boolean;
        /**
         * @description 选择的结果，如 `[{"name":"杭州市"},{"name":"上城区"},{"name":"古翠街道"}]`。
         */
        result: MultiLevelSelectSubList[];
    };
}
/**
 * @name multiLevelSelect.list
 * @description 选择数据列表。
 */
interface MultiLevelSelectList {
    name: string;
    subList: MultiLevelSelectSubList[];
}
/**
 * @name multiLevelSelect.list.subList
 */
interface MultiLevelSelectSubList {
    name: string;
}
/**
 * @description 类似于 safari 原生 select 的组件，但是功能更加强大，一般用来替代 select，或者 2 级数据的选择。注意**不支持 2 级数据之间的联动**。
 */
interface optionsSelect {
    type: APIType.Async;
    request: {
        /**
         * @description 头部标题信息。
         */
        title?: string;
        /**
         * @description 选项一列表。
         */
        optionsOne: string[];
        /**
         * @description 选项二列表。
         */
        optionsTwo?: string[];
        /**
         * @description 选项一（`optionsOne`）内默认选中项目的索引。
         * @default 0
         */
        selectedOneIndex?: number;
        /**
         * @description 选项二（`optionsTwo`）内默认选中项目的索引。
         * @default 0
         */
        selectedTwoIndex?: number;
        /**
         * @description 确定按钮文案。
         * @default 确定
         */
        positiveString?: string;
        /**
         * @description 取消按钮文案。
         * @default 取消
         */
        negativeString?: string;
    };
    response: {
        /**
         * @description 选项一选择的值。若选择取消，则返回空字符串。
         */
        selectedOneIndex: number | string;
        /**
         * @description 选项一选择的内容。若选择取消，则返回空字符串。
         */
        selectedOneOption: string;
        /**
         * @description 选项二选择的值。若选择取消，则返回空字符串。
         */
        selectedTwoIndex?: number | string;
        /**
         * @description 选项二选择的内容。若选择取消，则返回空字符串。
         */
        selectedTwoOption?: string;
    };
}
/**
 * @description 打开日期选择列表。
 */
interface datePicker<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 返回的日期格式。
         * 有效值：
         * - `HH:mm`
         * - `yyyy-MM-dd HH:mm`
         * - `yyyy-MM`（可通过 canIUse('datePicker.object.format.yyyy-MM') 判断）。
         * - `yyyy`（可通过 canIUse('datePicker.object.format.yyyy') 判断）。
         * @default yyyy-MM-dd
         */
        format: 'yyyy-MM-dd' | 'HH:mm' | FlagDef<S, 'yyyy-MM', Flag.UI.DatePickerFormatyyyyMM> | FlagDef<S, 'yyyy', Flag.UI.DatePickerFormatyyyy>;
        /**
         * @description 初始选择的日期时间。
         * @default 默认当前时间
         */
        currentDate?: string;
        /**
         * @description 最小日期时间。
         */
        startDate?: string;
        /**
         * @description 最大日期时间。
         */
        endDate?: string;
    };
    response: {
        /**
         * @description 用户选择日期。
         */
        date: string;
    };
    error: {
        /**
         * @description 若用户取消选择。
         * 有效值：
         * - `11` 代表用户取消选择。
         */
        error: number;
    };
}
/**
 * @name badges
 */
interface ShowActionSheetBadges {
    /**
     * @description 需要飘红的选项的索引，从 0 开始
     */
    index: number;
    /**
     * @description 飘红类型
     */
    type: `${ShowActionSheetBadgeType}`;
    /**
     * @description 自定义飘红文案：type 为 none / point / more 时，text 可不填；type 为 num 时，text 为小数或 ≤ 0 均不显示，≥ 100 显示 "..."
     */
    text: string;
}
/**
 * @name badgeType
 * @description 红点展示样式
 */
declare const enum ShowActionSheetBadgeType {
    /**
     * @description 展示样式：无红点
     */
    none = "none",
    /**
     * @description 展示样式：纯红点
     */
    point = "point",
    /**
     * @description 展示样式：数字红点
     */
    num = "num",
    /**
     * @description 展示样式：文案红点
     */
    text = "text",
    /**
     * @description 展示样式：...
     */
    more = "more"
}
/**
 * @name showActionSheet.confirm
 * @description showActionSheet 内，**选中选项时**，返回以下数据结构
 */
interface ShowActionSheetConfirm<S> {
    /**
     * @description 返回用户传入的 `items` 内被选中的索引，从 `0` 开始
     */
    index: number;
    success: true;
}
/**
 * @name showActionSheet.cancel
 * @description showActionSheet 内，**取消选择时**
 */
interface ShowActionSheetCancel {
    /**
     * @description 取消选择时，返回 `-1`
     */
    index: -1;
    success: true;
}
export {};
//# sourceMappingURL=option.d.ts.map