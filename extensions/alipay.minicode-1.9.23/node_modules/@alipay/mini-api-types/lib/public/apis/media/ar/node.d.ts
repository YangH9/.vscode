import { APIType, Type } from '../../../type';
export interface TypeExport<S> {
    [Type.AR.ARContextIsNodeVisible]: isNodeVisible<S>;
    [Type.AR.ARContextSetNodeVisible]: setNodeVisible<S>;
    [Type.AR.ARContextGetNodePosition]: getNodePosition<S>;
    [Type.AR.ARContextGetNodeRotation]: getNodeRotation<S>;
    [Type.AR.ARContextGetNodeScale]: getNodeScale<S>;
    [Type.AR.ARContextSetNodePosition]: setNodePosition<S>;
    [Type.AR.ARContextTranslateNode]: translateNode<S>;
    [Type.AR.ARContextRotateNode]: rotateNode<S>;
    [Type.AR.ARContextScaleNode]: scaleNode<S>;
    [Type.AR.ARContextSetNodeBillboard]: setNodeBillboard<S>;
    [Type.AR.ARContextSetNodeStatic]: setNodeStatic<S>;
}
/**
 * @name 节点控制(图形渲染)
 * @description 本文主要介绍 **图形渲染** 方面的 **节点控制** 相关接口。
 * - 相关接口请先通过 `createARContext` 获取 `ARContext` 后，才能调用 `ARContext` 内的接口。
 */
export interface APIExport<S> {
}
/**
 * @description 【节点控制】判断指定节点是否处于可见状态。
 */
interface isNodeVisible<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 节点 id。
         */
        nodeId: string;
    };
    response: {
        /**
         * @description 节点可见否状态。
         */
        visible: boolean;
    };
}
/**
 * @description 【节点控制】设置指定节点的可见性。
 */
interface setNodeVisible<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 节点 id。
         */
        nodeId: string;
        /**
         * @description 节点是否可见。
         */
        visible: boolean;
    };
}
/**
 * @description 【节点控制】获取指定节点的坐标位置，可指定坐标系。
 */
interface getNodePosition<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 节点 id。
         */
        nodeId: string;
        /**
         * @description 坐标系。
         * - `0` 本地坐标系。
         * - `1` 世界坐标系。
         * @default 1
         */
        space: number;
    };
    response: NodePosition;
}
/**
 * @description 【节点控制】获取指定节点的旋转向量。
 */
interface getNodeRotation<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 节点 id。
         */
        nodeId: string;
        /**
         * @description 坐标系。
         * - `0` 本地坐标系。
         * - `1` 世界坐标系。
         */
        space: number;
    };
    response: RotatePosition;
}
/**
 * @description 【节点控制】获取指定节点的缩放尺度。
 */
interface getNodeScale<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 节点 id。
         */
        nodeId: string;
        /**
         * @description 坐标系。
         * - `0` 本地坐标系。
         * - `1` 世界坐标系。
         * @default 1
         */
        space: number;
    };
    response: ScalePosition;
}
/**
 * @description 【节点控制】设置指定节点坐标系位置，可选坐标系。
 */
interface setNodePosition<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 节点 id。
         */
        nodeId: string;
        /**
         * @description 坐标系。
         * - `0` 本地坐标系。
         * - `1` 世界坐标系。
         * @default 0
         */
        space: number;
    } & NodePosition;
}
/**
 * @description 【节点控制】移动指定节点。
 */
interface translateNode<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 节点 id。
         */
        nodeId: string;
        /**
         * @description 坐标系。
         * - `0` 本地坐标系。
         * - `1` 世界坐标系。
         */
        space: number;
    } & TranslatePosition;
}
/**
 * @description 【节点控制】旋转指定节点（只有本地坐标系）。
 */
interface rotateNode<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 节点 id。
         */
        nodeId: string;
    } & RotatePosition;
}
/**
 * @description 【节点控制】缩放指定节点。
 */
interface scaleNode<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 节点 id。
         */
        nodeId: string;
    } & ScalePosition;
}
/**
 * @description 【节点控制】设置指定节点为 billboard 效果(始终面向相机)。
 */
interface setNodeBillboard<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 节点 id。
         */
        nodeId: string;
        /**
         * @description 是否开启 billboard 效果。
         */
        active: boolean;
    };
}
/**
 * @description 【节点控制】设置指定节点为static效果(与相机保持固定位置关系(旋转、平移、缩放))。
 */
interface setNodeStatic<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 节点 id。
         */
        nodeId: string;
        /**
         * @description 是否开启 static 效果。
         */
        active: boolean;
    };
}
interface TranslatePosition {
    /**
     * @description x轴位移。
     */
    x: number;
    /**
     * @description y轴位移。
     */
    y: number;
    /**
     * @description z轴位移。
     */
    z: number;
}
interface RotatePosition {
    /**
     * @description 旋转向量 roll 值。
     */
    x: number;
    /**
     * @description 旋转向量 yaw 值。
     */
    y: number;
    /**
     * @description 旋转向量 pitch 值。
     */
    z: number;
}
interface ScalePosition {
    /**
     * @description x轴缩放量。
     */
    x: number;
    /**
     * @description y轴缩放量。
     */
    y: number;
    /**
     * @description z轴缩放量。
     */
    z: number;
}
interface NodePosition {
    /**
     * @description x轴坐标。
     */
    x: number;
    /**
     * @description y轴坐标。
     */
    y: number;
    /**
     * @description z轴坐标。
     */
    z: number;
}
export {};
//# sourceMappingURL=node.d.ts.map