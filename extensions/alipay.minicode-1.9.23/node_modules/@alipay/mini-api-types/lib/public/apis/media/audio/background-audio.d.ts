import { API, APIType } from '../../../type';
export interface TypeExport<S> {
}
/**
 * @name 后台播放(旧)
 */
export interface APIExport<S> {
    [API.playBackgroundAudio]: playBackgroundAudio;
    [API.pauseBackgroundAudio]: pauseBackgroundAudio;
    [API.stopBackgroundAudio]: stopBackgroundAudio;
    [API.seekBackgroundAudio]: seekBackgroundAudio;
    [API.getBackgroundAudioPlayerState]: getBackgroundAudioPlayerState;
    [API.onBackgroundAudioPlay]: onBackgroundAudioPlay;
    [API.offBackgroundAudioPlay]: offBackgroundAudioPlay;
    [API.onBackgroundAudioPause]: onBackgroundAudioPause;
    [API.offBackgroundAudioPause]: offBackgroundAudioPause;
    [API.onBackgroundAudioStop]: onBackgroundAudioStop;
    [API.offBackgroundAudioStop]: offBackgroundAudioStop;
}
/**
 * @description 使用后台播放器播放音乐。
 */
interface playBackgroundAudio {
    type: APIType.Async;
    request: {
        /**
         * @description 音乐链接地址。
         */
        url: string;
        /**
         * @description 音乐标题。
         */
        title?: string;
        /**
         * @description 演唱者。
         */
        singer?: string;
        /**
         * @description 音乐描述。
         */
        describe?: string;
        /**
         * @description logo URL。
         */
        logo?: string;
        /**
         * @description 封面 URL。
         */
        cover?: string;
    };
}
/**
 * @description 暂停播放音乐。
 */
interface pauseBackgroundAudio {
    type: APIType.Fn;
    fn: () => void;
}
/**
 * @description 停止播放音乐。
 */
interface stopBackgroundAudio {
    type: APIType.Fn;
    fn: () => void;
}
/**
 * @description 控制音乐播放进度。
 */
interface seekBackgroundAudio {
    type: APIType.Async;
    request: {
        /**
         * @description 音乐位置，单位秒。
         */
        position: number;
    };
}
/**
 * @description 获取后台音乐播放状态。
 */
interface getBackgroundAudioPlayerState {
    type: APIType.Async;
    request: void;
    response: {
        /**
         * @description 音乐播放状态。
         * - `0` 暂停中。
         * - `1` 播放中。
         * - `2` 没有音乐在播放。
         */
        status: number;
        /**
         * @description 音乐总时长，单位秒。
         */
        duration: number;
        /**
         * @description 当前播放位置，单位秒。
         */
        currentPosition: number;
        /**
         * @description 缓冲百分比。
         */
        downloadPercent: number;
    };
}
/**
 * @description 开始播放音乐时触发此事件。
 */
interface onBackgroundAudioPlay {
    type: APIType.Event;
    event: void;
}
/**
 * @description 停止监听音乐播放事件。
 */
interface offBackgroundAudioPlay {
    type: APIType.Fn;
    /**
     * @param callback
     * - 不传递 `callback` 值，则会移除监听**所有**的事件回调。
     * - 传递 `callback` 值，只移除**对应**的 `callback` 事件。
     */
    fn: (callback?: Function) => void;
}
/**
 * @description 暂停播放音乐时触发此事件。
 */
interface onBackgroundAudioPause {
    type: APIType.Event;
    event: void;
}
/**
 * @description 停止监听音乐暂停事件。
 */
interface offBackgroundAudioPause {
    type: APIType.Fn;
    /**
     * @param callback
     * - 不传递 `callback` 值，则会移除监听**所有**的事件回调。
     * - 传递 `callback` 值，只移除**对应**的 `callback` 事件。
     */
    fn: (callback?: Function) => void;
}
/**
 * @description 停止播放音乐时触发此事件。
 */
interface onBackgroundAudioStop {
    type: APIType.Event;
    event: void;
}
/**
 * @description 停止监听音乐停止事件。
 */
interface offBackgroundAudioStop {
    type: APIType.Fn;
    /**
     * @param callback
     * - 不传递 `callback` 值，则会移除监听**所有**的事件回调。
     * - 传递 `callback` 值，只移除**对应**的 `callback` 事件。
     */
    fn: (callback?: Function) => void;
}
export {};
//# sourceMappingURL=background-audio.d.ts.map