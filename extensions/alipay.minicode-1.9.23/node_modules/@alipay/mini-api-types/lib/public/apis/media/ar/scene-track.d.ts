import { APIType, Type } from '../../../type';
export interface TypeExport<S> {
    [Type.AR.ARContextGetTrackMode]: getTrackMode<S>;
    [Type.AR.ARContextResetScene]: resetScene<S>;
}
/**
 * @name 场景跟踪(算法相关)
 * @description 本文主要介绍 **算法方面** 的 **场景跟踪** 相关接口。
 * - 相关接口请先通过 `createARContext` 获取 `ARContext` 后，才能调用 `ARContext` 内的接口。
 */
export interface APIExport<S> {
}
/**
 * @description 【场景跟踪】获取当前跟踪模式。
 */
interface getTrackMode<S> {
    type: APIType.Async;
    request: void;
    response: {
        /**
         * @description 跟踪模式。
         * - `0` 无跟踪。
         * - `1` 陀螺仪跟踪。
         * - `2` 混合跟踪（小程序暂不支持）。
         * - `3` 纯图像识别跟踪（小程序暂不支持）。
         * - `4` [SLAM跟踪](https://lark.alipay.com/arp/do2trs/cl1vci)。
         */
        trackMode: string;
    };
}
/**
 * @description 【场景跟踪】SLAM跟踪模式下，输入组件view的坐标，重新设置场景模型位置到目标坐标位置。
 */
interface resetScene<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 组件view的横轴坐标。
         */
        x: number;
        /**
         * @description 组件view的横轴坐标。
         */
        y: number;
    };
}
export {};
//# sourceMappingURL=scene-track.d.ts.map