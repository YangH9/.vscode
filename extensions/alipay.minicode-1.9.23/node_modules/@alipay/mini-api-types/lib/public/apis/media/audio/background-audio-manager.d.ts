import { API, APIDefaultErrorResponse, APIType, Flag, FlagDef, Type, TypeRef } from '../../../type';
export interface TypeExport<S> {
    [Type.Audio.BackgroundAudioManager]: BackgroundAudioManager<S>;
    [Type.Audio.BackgroundAudioManagerPlay]: play;
    [Type.Audio.BackgroundAudioManagerPause]: pause;
    [Type.Audio.BackgroundAudioManagerStop]: stop;
    [Type.Audio.BackgroundAudioManagerSeek]: seek;
    [Type.Audio.BackgroundAudioManagerOnCanplay]: onCanplay;
    [Type.Audio.BackgroundAudioManagerOnWaiting]: onWaiting;
    [Type.Audio.BackgroundAudioManagerOnError]: onError;
    [Type.Audio.BackgroundAudioManagerOnPlay]: onPlay;
    [Type.Audio.BackgroundAudioManagerOnPause]: onPause;
    [Type.Audio.BackgroundAudioManagerOnSeeking]: onSeeking;
    [Type.Audio.BackgroundAudioManagerOnSeeked]: onSeeked;
    [Type.Audio.BackgroundAudioManagerOnEnded]: onEnded;
    [Type.Audio.BackgroundAudioManagerOnStop]: onStop;
    [Type.Audio.BackgroundAudioManagerOnTimeUpdate]: onTimeUpdate;
    [Type.Audio.BackgroundAudioManagerOnNext]: onNext;
    [Type.Audio.BackgroundAudioManagerOnPrev]: onPrev;
}
/**
 * @name 后台播放管理器(新)
 */
export interface APIExport<S> {
    [API.getBackgroundAudioManager]: getBackgroundAudioManager<S>;
}
/**
 * @description 获取 **全局唯一** 的背景音频管理器。 小程序切入后台，如果音频处于播放状态，可以继续播放。但是后台状态不能通过调用API操纵音频的播放状态。
 */
interface getBackgroundAudioManager<S> {
    type: APIType.Fn;
    fn: () => TypeRef<S, Type.Audio.BackgroundAudioManager>;
}
/**
 * @description 背景音频管理器。
 */
interface BackgroundAudioManager<S> {
    type: APIType.Property;
    property: {
        /**
         * @description 当前音频的长度（单位：s），只有在当前有合法的 src 时返回
         */
        duration: number;
        /**
         * @description 当前音频的播放位置（单位：s），只有在当前有合法的 src 时返回
         */
        currentTime: number;
        /**
         * @description 当前是是否暂停或停止状态，true 表示暂停或停止，false 表示正在播放
         */
        paused: boolean;
        /**
         * @description 音频的数据源，默认为空字符串，当设置了新的 src 时，会自动开始播放 ，目前支持的格式有 m4a, aac, mp3, wav
         */
        src: string;
        /**
         * @description 音频开始播放的位置（单位：s）
         */
        startTime: number;
        /**
         * @description 音频缓冲的时间点，仅保证当前播放时间点到此时间点内容已缓冲。
         */
        buffered: number;
        /**
         * @description 音频标题，用于做原生音频播放器音频标题。原生音频播放器中的分享功能，分享出去的卡片标题，也将使用该值。
         */
        title: string;
        /**
         * @description 专辑名，原生音频播放器中的分享功能，分享出去的卡片简介，也将使用该值。
         */
        epname: string;
        /**
         * @description 歌手名，原生音频播放器中的分享功能，分享出去的卡片简介，也将使用该值。
         */
        singer: string;
        /**
         * @description 封面图 url，用于做原生音频播放器背景图。原生音频播放器中的分享功能，分享出去的卡片配图及背景也将使用该图。
         */
        coverImgUrl: string;
        /**
         * @description 页面链接，原生音频播放器中的分享功能，分享出去的卡片简介，也将使用该值。
         */
        webUrl: string;
        /**
         * @description 播放速度。范围 0.5-2.0，默认为 1。（Android 需要 6 及以上版本）
         */
        playbackRate: number;
        /**
         * @description 标记是否记录当前 url 播放进度到本地存储，记录的可以通过接口查询，以便恢复播放现场。
         */
        isRecordAudioPlayState: FlagDef<S, boolean, Flag.Audio.BackgroundAudioManagerIsRecordAudioPlayState>;
        /**
         * @description 播放。
         */
        play: TypeRef<S, Type.Audio.BackgroundAudioManagerPlay>;
        /**
         * @description 暂停。
         */
        pause: TypeRef<S, Type.Audio.BackgroundAudioManagerPause>;
        /**
         * @description 停止。
         */
        stop: TypeRef<S, Type.Audio.BackgroundAudioManagerStop>;
        /**
         * @description 跳转到指定位置，单位 s。精确到小数点后 3 位，即支持 ms 级别精确度。
         */
        seek: TypeRef<S, Type.Audio.BackgroundAudioManagerSeek>;
        /**
         * @description 监听背景音频进入可以播放状态。但不保证后面可以流畅播放。
         */
        onCanplay: TypeRef<S, Type.Audio.BackgroundAudioManagerOnCanplay>;
        /**
         * @description 监听音频加载中事件。当音频因为数据不足，需要停下来加载时会触发。
         */
        onWaiting: TypeRef<S, Type.Audio.BackgroundAudioManagerOnWaiting>;
        /**
         * @description 监听背景音频播放错误事件。
         */
        onError: TypeRef<S, Type.Audio.BackgroundAudioManagerOnError>;
        /**
         * @description 监听背景音频播放事件。
         */
        onPlay: TypeRef<S, Type.Audio.BackgroundAudioManagerOnPlay>;
        /**
         * @description 监听背景音频暂停事件。
         */
        onPause: TypeRef<S, Type.Audio.BackgroundAudioManagerOnPause>;
        /**
         * @description 监听背景音频开始跳转操作事件。
         */
        onSeeking: TypeRef<S, Type.Audio.BackgroundAudioManagerOnSeeking>;
        /**
         * @description 监听背景音频完成跳转操作事件。
         */
        onSeeked: TypeRef<S, Type.Audio.BackgroundAudioManagerOnSeeked>;
        /**
         * @description 监听背景音频自然播放结束事件。
         */
        onEnded: TypeRef<S, Type.Audio.BackgroundAudioManagerOnEnded>;
        /**
         * @description 监听背景音频停止事件。
         */
        onStop: TypeRef<S, Type.Audio.BackgroundAudioManagerOnStop>;
        /**
         * @description 监听背景音频播放进度更新事件。
         */
        onTimeUpdate: TypeRef<S, Type.Audio.BackgroundAudioManagerOnTimeUpdate>;
        /**
         * @description 监听用户在系统音乐播放面板点击下一曲事件。
         */
        onNext: TypeRef<S, Type.Audio.BackgroundAudioManagerOnNext>;
        /**
         * @description 监听用户在系统音乐播放面板点击上一曲事件。
         */
        onPrev: TypeRef<S, Type.Audio.BackgroundAudioManagerOnPrev>;
    };
}
/**
 * @description 播放。
 */
interface play {
    type: APIType.Fn;
    fn: () => void;
}
/**
 * @description 暂停。
 */
interface pause {
    type: APIType.Fn;
    fn: () => void;
}
/**
 * @description 停止。
 */
interface stop {
    type: APIType.Fn;
    fn: () => void;
}
/**
 * @description 跳转到指定位置，单位 s。精确到小数点后 3 位，即支持 ms 级别精确度。
 */
interface seek {
    type: APIType.Fn;
    /**
     * @param position 指定位置，单位 s。
     */
    fn: (position: number) => void;
}
/**
 * @description 监听背景音频进入可以播放状态。但不保证后面可以流畅播放。
 */
interface onCanplay {
    type: APIType.Event;
    event: void;
}
/**
 * @description 监听音频加载中事件。当音频因为数据不足，需要停下来加载时会触发。
 */
interface onWaiting {
    type: APIType.Event;
    event: void;
}
/**
 * @description 监听背景音频播放错误事件。
 */
interface onError {
    type: APIType.Event;
    event: BackgroundAudioManagerError;
}
/**
 * @description 监听背景音频播放事件。
 */
interface onPlay {
    type: APIType.Event;
    event: void;
}
/**
 * @description 监听背景音频暂停事件。
 */
interface onPause {
    type: APIType.Event;
    event: void;
}
/**
 * @description 监听背景音频开始跳转操作事件。
 */
interface onSeeking {
    type: APIType.Event;
    event: void;
}
/**
 * @description 监听背景音频完成跳转操作事件。
 */
interface onSeeked {
    type: APIType.Event;
    event: void;
}
/**
 * @description 监听背景音频自然播放结束事件。
 */
interface onEnded {
    type: APIType.Event;
    event: void;
}
/**
 * @description 监听背景音频停止事件。
 */
interface onStop {
    type: APIType.Event;
    event: void;
}
/**
 * @description 监听背景音频播放进度更新事件。
 */
interface onTimeUpdate {
    type: APIType.Event;
    event: void;
}
/**
 * @description 监听用户在系统音乐播放面板点击下一曲事件。
 */
interface onNext {
    type: APIType.Event;
    event: void;
}
/**
 * @description 监听用户在系统音乐播放面板点击上一曲事件。
 */
interface onPrev {
    type: APIType.Event;
    event: void;
}
interface BackgroundAudioManagerError extends APIDefaultErrorResponse {
    /**
     * @description 错误码
     */
    error: EBackgroundAudioManagerErrorCode;
}
declare const enum EBackgroundAudioManagerErrorCode {
    /**
     * @description 系统错误。
     */
    '_10001' = 10001,
    /**
     * @description 网络错误。
     */
    '_10002' = 10002,
    /**
     * @description 文件错误。
     */
    '_10003' = 10003,
    /**
     * @description 格式错误。
     */
    '_10004' = 10004,
    /**
     * @description 未知错误。
     */
    '_-1' = -1
}
export {};
//# sourceMappingURL=background-audio-manager.d.ts.map