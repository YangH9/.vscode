import { API, APIType, Type, TypeRef } from '../../../type';
export interface TypeExport<S> {
    [Type.Dom.AnimationContext]: AnimationContext<S>;
    [Type.Dom.AnimationContextStep]: step<S>;
    [Type.Dom.AnimationContextExport]: expt<S>;
    [Type.Dom.AnimationContextOpacity]: opacity<S>;
    [Type.Dom.AnimationContextBackgroundColor]: backgroundColor<S>;
    [Type.Dom.AnimationContextWidth]: width<S>;
    [Type.Dom.AnimationContextHeight]: height<S>;
    [Type.Dom.AnimationContextTop]: top<S>;
    [Type.Dom.AnimationContextLeft]: left<S>;
    [Type.Dom.AnimationContextBottom]: bottom<S>;
    [Type.Dom.AnimationContextRight]: right<S>;
    [Type.Dom.AnimationContextRotate]: rotate<S>;
    [Type.Dom.AnimationContextRotateX]: rotateX<S>;
    [Type.Dom.AnimationContextRotateY]: rotateY<S>;
    [Type.Dom.AnimationContextRotateZ]: rotateZ<S>;
    [Type.Dom.AnimationContextRotate3d]: rotate3d<S>;
    [Type.Dom.AnimationContextScale]: scale<S>;
    [Type.Dom.AnimationContextScaleX]: scaleX<S>;
    [Type.Dom.AnimationContextScaleY]: scaleY<S>;
    [Type.Dom.AnimationContextScaleZ]: scaleZ<S>;
    [Type.Dom.AnimationContextScale3d]: scale3d<S>;
    [Type.Dom.AnimationContextTranslate]: translate<S>;
    [Type.Dom.AnimationContextTranslateX]: translateX<S>;
    [Type.Dom.AnimationContextTranslateY]: translateY<S>;
    [Type.Dom.AnimationContextTranslateZ]: translateZ<S>;
    [Type.Dom.AnimationContextTranslate3d]: translate3d<S>;
    [Type.Dom.AnimationContextSkew]: skew<S>;
    [Type.Dom.AnimationContextSkewX]: skewX<S>;
    [Type.Dom.AnimationContextSkewY]: skewY<S>;
    [Type.Dom.AnimationContextMatrix]: matrix<S>;
    [Type.Dom.AnimationContextMatrix3d]: matrix3d<S>;
}
/**
 * @name 动画
 */
export interface APIExport<S> {
    [API.createAnimation]: createAnimation<S>;
}
/**
 * @description 是用于创建动画实例 `animation` 的 API。调用实例的方法来描述动画，最后通过动画实例的 `export` 方法将动画数据导出并传递给组件的 `animation` 属性。
 * - 调用 export 方法后，之前的动画操作将会被清除。
 * - 调用动画操作方法后，需调用 `step()` 用于表示一组动画完成，在一组动画中可以调用任意多个动画方法，一组动画中的所有动画会同时开始，当一组动画完成后才会进行下一组动画。
 */
interface createAnimation<S> {
    type: APIType.Fn;
    fn: (option?: createAnimationOption<S>) => TypeRef<S, Type.Dom.AnimationContext>;
}
/**
 * @name createAnimation.option
 */
interface createAnimationOption<S> {
    /**
     * @description 动画的持续时间，单位 ms。
     * @default 400
     */
    duration?: number;
    /**
     * @description 定义动画的效果。
     * @default linear
     */
    timeFunction?: `${ETimeFunction}`;
    /**
     * @description 动画延迟时间，单位 ms。
     * @default 0
     */
    delay?: number;
    /**
     * @description 设置 transform-origin。
     * @default "50% 50% 0"
     */
    transformOrigin?: string;
}
/**
 * @description 动画实例。
 */
interface AnimationContext<S> {
    type: APIType.Property;
    property: {
        step: TypeRef<S, Type.Dom.AnimationContextStep>;
        export: TypeRef<S, Type.Dom.AnimationContextExport>;
        opacity: TypeRef<S, Type.Dom.AnimationContextOpacity>;
        backgroundColor: TypeRef<S, Type.Dom.AnimationContextBackgroundColor>;
        width: TypeRef<S, Type.Dom.AnimationContextWidth>;
        height: TypeRef<S, Type.Dom.AnimationContextHeight>;
        top: TypeRef<S, Type.Dom.AnimationContextTop>;
        left: TypeRef<S, Type.Dom.AnimationContextLeft>;
        bottom: TypeRef<S, Type.Dom.AnimationContextBottom>;
        right: TypeRef<S, Type.Dom.AnimationContextRight>;
        rotate: TypeRef<S, Type.Dom.AnimationContextRotate>;
        rotateX: TypeRef<S, Type.Dom.AnimationContextRotateX>;
        rotateY: TypeRef<S, Type.Dom.AnimationContextRotateY>;
        rotateZ: TypeRef<S, Type.Dom.AnimationContextRotateZ>;
        rotate3d: TypeRef<S, Type.Dom.AnimationContextRotate3d>;
        scale: TypeRef<S, Type.Dom.AnimationContextScale>;
        scaleX: TypeRef<S, Type.Dom.AnimationContextScaleX>;
        scaleY: TypeRef<S, Type.Dom.AnimationContextScaleY>;
        scaleZ: TypeRef<S, Type.Dom.AnimationContextScaleZ>;
        scale3d: TypeRef<S, Type.Dom.AnimationContextScale3d>;
        translate: TypeRef<S, Type.Dom.AnimationContextTranslate>;
        translateX: TypeRef<S, Type.Dom.AnimationContextTranslateX>;
        translateY: TypeRef<S, Type.Dom.AnimationContextTranslateY>;
        translateZ: TypeRef<S, Type.Dom.AnimationContextTranslateZ>;
        translate3d: TypeRef<S, Type.Dom.AnimationContextTranslate3d>;
        skew: TypeRef<S, Type.Dom.AnimationContextSkew>;
        skewX: TypeRef<S, Type.Dom.AnimationContextSkewX>;
        skewY: TypeRef<S, Type.Dom.AnimationContextSkewY>;
        matrix: TypeRef<S, Type.Dom.AnimationContextMatrix>;
        matrix3d: TypeRef<S, Type.Dom.AnimationContextMatrix3d>;
    };
}
/**
 * @description 用于指定当前组动画的配置。
 */
interface step<S> {
    type: APIType.Fn;
    fn: (option?: createAnimationOption<S>) => TypeRef<S, Type.Dom.AnimationContext>;
}
/**
 * @description 导出动画数据。
 */
interface expt<S> {
    type: APIType.Fn;
    fn: () => string;
}
/**
 * @description 设置透明度。
 */
interface opacity<S> {
    type: APIType.Fn;
    /**
     * @param opacity 透明度，参数范围 0~1。
     */
    fn: (opacity: number) => TypeRef<S, Type.Dom.AnimationContext>;
}
/**
 * @description 设置背景色。
 */
interface backgroundColor<S> {
    type: APIType.Fn;
    /**
     * @param color 颜色值。
     */
    fn: (color: string) => TypeRef<S, Type.Dom.AnimationContext>;
}
/**
 * @description 设置宽度。
 */
interface width<S> {
    type: APIType.Fn;
    /**
     * @param length 长度值，单位为 px，例如：300 px。
     */
    fn: (length: string | number) => TypeRef<S, Type.Dom.AnimationContext>;
}
/**
 * @description 设置高度。
 */
interface height<S> {
    type: APIType.Fn;
    /**
     * @param length 长度值，单位为 px，例如：300 px。
     */
    fn: (length: string | number) => TypeRef<S, Type.Dom.AnimationContext>;
}
/**
 * @description 设置 top 值。
 */
interface top<S> {
    type: APIType.Fn;
    /**
     * @param length 长度值，单位为 px，例如：300 px。
     */
    fn: (length: string | number) => TypeRef<S, Type.Dom.AnimationContext>;
}
/**
 * @description 设置 left 值。
 */
interface left<S> {
    type: APIType.Fn;
    /**
     * @param length 长度值，单位为 px，例如：300 px。
     */
    fn: (length: string | number) => TypeRef<S, Type.Dom.AnimationContext>;
}
/**
 * @description 设置 bottom 值。
 */
interface bottom<S> {
    type: APIType.Fn;
    /**
     * @param length 长度值，单位为 px，例如：300 px。
     */
    fn: (length: string | number) => TypeRef<S, Type.Dom.AnimationContext>;
}
/**
 * @description 设置 right 值。
 */
interface right<S> {
    type: APIType.Fn;
    /**
     * @param length 长度值，单位为 px，例如：300 px。
     */
    fn: (length: string | number) => TypeRef<S, Type.Dom.AnimationContext>;
}
declare const enum ETimeFunction {
    'linear' = "linear",
    'ease' = "ease",
    'ease-in' = "ease-in",
    'ease-in-out' = "ease-in-out",
    'ease-out' = "ease-out",
    'step-start' = "step-start",
    'step-end' = "step-end"
}
/**
 * @description 从原点顺时针旋转一个 deg 角度。
 */
interface rotate<S> {
    type: APIType.Fn;
    /**
     * @param deg 范围 -180 ~ 180。
     */
    fn: (deg: number) => TypeRef<S, Type.Dom.AnimationContext>;
}
/**
 * @description 在 X 轴旋转一个 deg 角度。
 */
interface rotateX<S> {
    type: APIType.Fn;
    /**
     * @param deg 范围 -180 ~ 180。
     */
    fn: (deg: number) => TypeRef<S, Type.Dom.AnimationContext>;
}
/**
 * @description 在 Y 轴旋转一个 deg 角度。
 */
interface rotateY<S> {
    type: APIType.Fn;
    /**
     * @param deg 范围 -180 ~ 180。
     */
    fn: (deg: number) => TypeRef<S, Type.Dom.AnimationContext>;
}
/**
 * @description 在 Z 轴旋转一个 deg 角度。
 */
interface rotateZ<S> {
    type: APIType.Fn;
    /**
     * @param deg 范围 -180 ~ 180。
     */
    fn: (deg: number) => TypeRef<S, Type.Dom.AnimationContext>;
}
/**
 * @description 同 transform-function rotate3d。
 */
interface rotate3d<S> {
    type: APIType.Fn;
    fn: (x: number, y: number, z: number, deg: number) => TypeRef<S, Type.Dom.AnimationContext>;
}
/**
 * @description 只有一个参数时，表示在 X 轴、Y 轴同时缩放 sx 倍。两个参数时表示在 X 轴缩放 sx 倍，在 Y 轴缩放 sy 倍。
 */
interface scale<S> {
    type: APIType.Fn;
    fn: (sx: number, sy?: number) => TypeRef<S, Type.Dom.AnimationContext>;
}
/**
 * @description 在 X 轴缩放 sx 倍。
 */
interface scaleX<S> {
    type: APIType.Fn;
    fn: (sx: number) => TypeRef<S, Type.Dom.AnimationContext>;
}
/**
 * @description 在 Y 轴缩放 sy 倍。
 */
interface scaleY<S> {
    type: APIType.Fn;
    fn: (sy: number) => TypeRef<S, Type.Dom.AnimationContext>;
}
/**
 * @description 在 Z 轴缩放 sz 倍。
 */
interface scaleZ<S> {
    type: APIType.Fn;
    fn: (sz: number) => TypeRef<S, Type.Dom.AnimationContext>;
}
/**
 * @description 在 X 轴缩放 sx 倍，在 Y 轴缩放 sy 倍，在 Z 轴缩放 sz 倍。
 */
interface scale3d<S> {
    type: APIType.Fn;
    fn: (sx: number, sy: number, sz: number) => TypeRef<S, Type.Dom.AnimationContext>;
}
/**
 * @description 只有一个参数时，表示在 X 轴偏移 tx。有两个参数时，表示在 X 轴偏移 tx，在 Y 轴偏移 ty，单位均为 px。
 */
interface translate<S> {
    type: APIType.Fn;
    fn: (tx: number, ty?: number) => TypeRef<S, Type.Dom.AnimationContext>;
}
/**
 * @description 在 X 轴偏移 tx，单位 px。
 */
interface translateX<S> {
    type: APIType.Fn;
    fn: (tx: number) => TypeRef<S, Type.Dom.AnimationContext>;
}
/**
 * @description 在 Y 轴偏移 ty，单位 px。
 */
interface translateY<S> {
    type: APIType.Fn;
    fn: (ty: number) => TypeRef<S, Type.Dom.AnimationContext>;
}
/**
 * @description 在 Z 轴偏移 tz，单位 px。
 */
interface translateZ<S> {
    type: APIType.Fn;
    fn: (tz: number) => TypeRef<S, Type.Dom.AnimationContext>;
}
/**
 * @description 在 X 轴缩放 sx 倍，在 Y 轴缩放 sy 倍，在 Z 轴缩放 sz 倍。
 */
interface translate3d<S> {
    type: APIType.Fn;
    fn: (tx: number, ty: number, tz: number) => TypeRef<S, Type.Dom.AnimationContext>;
}
/**
 * @description 只有一个参数时，Y 轴坐标不变，X 轴坐标延顺时针倾斜 ax 度；两个参数时，分别在 X 轴倾斜 ax 度，在 Y 轴倾斜 ay 度。
 */
interface skew<S> {
    type: APIType.Fn;
    /**
     * @param ax 参数范围 -180 ~ 180。
     * @param ay 参数范围 -180 ~ 180。
     */
    fn: (ax: number, ay?: number) => TypeRef<S, Type.Dom.AnimationContext>;
}
/**
 * @description Y 轴坐标不变，X 轴坐标延顺时针倾斜 ax 度。
 */
interface skewX<S> {
    type: APIType.Fn;
    /**
     * @param ax 参数范围 -180 ~ 180。
     */
    fn: (ax: number) => TypeRef<S, Type.Dom.AnimationContext>;
}
/**
 * @description Y 轴坐标延顺时针倾斜 ay 度。
 */
interface skewY<S> {
    type: APIType.Fn;
    /**
     * @param ay 参数范围 -180 ~ 180。
     */
    fn: (ay: number) => TypeRef<S, Type.Dom.AnimationContext>;
}
/**
 * @description 同 [transform-function](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix)。
 */
interface matrix<S> {
    type: APIType.Fn;
    fn: (a: number, b: number, c: number, d: number, tx: number, ty: number) => TypeRef<S, Type.Dom.AnimationContext>;
}
/**
 * @description 同 [transform-function matrix3d](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix3d);
 */
interface matrix3d<S> {
    type: APIType.Fn;
    fn: (a1: number, b1: number, c1: number, d1: number, a2: number, b2: number, c2: number, d2: number, a3: number, b3: number, c3: number, d3: number, a4: number, b4: number, c4: number, d4: number) => TypeRef<S, Type.Dom.AnimationContext>;
}
export {};
//# sourceMappingURL=animation.d.ts.map