import { API, APIType } from '../../type';
export interface TypeExport<S> {
}
/**
 * @name 运动传感器
 */
export interface APIExport<S> {
    [API.onGyroscopeChange]: onGyroscopeChange;
    [API.offGyroscopeChange]: offGyroscopeChange<S>;
    [API.onAccelerometerChange]: onAccelerometerChange;
    [API.offAccelerometerChange]: offAccelerometerChange<S>;
    [API.onCompassChange]: onCompassChange;
    [API.offCompassChange]: offCompassChange<S>;
    [API.onDeviceMotionChange]: onDeviceMotionChange;
    [API.offDeviceMotionChange]: offDeviceMotionChange<S>;
}
/**
 * @description 监听陀螺仪数据变化，接口调用后会自动开始监听，回调间隔为 `500ms`。可以使用 `offGyroscopeChange` 来取消监听。
 */
interface onGyroscopeChange {
    type: APIType.Event;
    event: {
        /**
         * @description x 轴方向角速度。
         */
        x: number;
        /**
         * @description y 轴方向角速度。
         */
        y: number;
        /**
         * @description z 轴方向角速度。
         */
        z: number;
    };
}
/**
 * @description 停止监听陀螺仪数据。
 */
interface offGyroscopeChange<S> {
    type: APIType.Fn;
    /**
     * @param callback
     * - 不传递 `callback` 值，则会移除监听**所有**的事件回调。
     * - 传递 `callback` 值，只移除**对应**的 `callback` 事件。
     */
    fn: (callback?: Function) => void;
}
/**
 * @description 监听加速度数据，回调间隔为 `500ms`，接口调用后会自动开始监听，可使用 `offAccelerometerChange` 停止监听。
 */
interface onAccelerometerChange {
    type: APIType.Event;
    event: {
        /**
         * @description x 轴。
         */
        x: number;
        /**
         * @description y 轴。
         */
        y: number;
        /**
         * @description z 轴。
         */
        z: number;
    };
}
/**
 * @description 停止监听加速度数据。
 */
interface offAccelerometerChange<S> {
    type: APIType.Fn;
    /**
     * @param callback
     * - 不传递 `callback` 值，则会移除监听**所有**的事件回调。
     * - 传递 `callback` 值，只移除**对应**的 `callback` 事件。
     */
    fn: (callback?: Function) => void;
}
/**
 * @description 监听罗盘数据变化，接口调用后会自动开始监听，回调间隔为 `500ms`，可使用 `offCompassChange` 停止监听。
 */
interface onCompassChange {
    type: APIType.Event;
    event: {
        /**
         * @description 面对的方向与正北方向的度数，值的范围为 `[0, 360)`。
         */
        direction: number;
    };
}
/**
 * @description 停止监听罗盘数据。
 */
interface offCompassChange<S> {
    type: APIType.Fn;
    /**
     * @param callback
     * - 不传递 `callback` 值，则会移除监听**所有**的事件回调。
     * - 传递 `callback` 值，只移除**对应**的 `callback` 事件。
     */
    fn: (callback?: Function) => void;
}
/**
 * @description 监听设备方向变化。
 */
interface onDeviceMotionChange {
    type: APIType.Event;
    event: {
        /**
         * @description 当手机坐标 X/Y 和 地球 X/Y 重合时，绕着 Z 轴转动的夹角为 `alpha`。
         * - 值的范围为 `[0, 2*PI)`。
         * - 逆时针转动为正。
         */
        alpha: number;
        /**
         * @description 当手机坐标 Y/Z 和地球 Y/Z 重合时，绕着 X 轴转动的夹角为 `beta`。
         * - 值的范围为 `[-1*PI, PI)`。
         * - 顶部朝着地球表面转动为正，也有可能朝着用户为正。
         */
        beta: number;
        /**
         * @description 当手机 X/Z 和地球 X/Z 重合时，绕着 Y 轴转动的夹角为 `gamma`。
         * - 值的范围为 `[-1*PI/2, PI/2)`。
         * - 右边朝着地球表面转动为正。
         */
        gamma: number;
    };
}
/**
 * @description 停止监听设备方向变化。
 */
interface offDeviceMotionChange<S> {
    type: APIType.Fn;
    /**
     * @param callback
     * - 不传递 `callback` 值，则会移除监听**所有**的事件回调。
     * - 传递 `callback` 值，只移除**对应**的 `callback` 事件。
     */
    fn: (callback?: Function) => void;
}
export {};
//# sourceMappingURL=motion.d.ts.map