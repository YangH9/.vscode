import { API, APIType, Type } from '../../type';
export interface TypeExport<S> {
    [Type.App.RequirePlugin]: requirePlugin<S>;
}
/**
 * @name 基础能力
 */
export interface APIExport<S> {
    [API.base64ToArrayBuffer]: base64ToArrayBuffer;
    [API.arrayBufferToBase64]: arrayBufferToBase64;
}
/**
 * @description 使用插件提供的 JS 接口。
 */
interface requirePlugin<S> {
    type: APIType.Fn;
    /**
     * @param pluginName 需要使用的 静态插件名 或者 动态插件标识符
     * @returns 返回值为 插件 通过 `main` 字段暴露的 JS 接口。
     */
    fn: (pluginName: string) => any;
}
/**
 * @description 将 `Base64` 字符串转成 `ArrayBuffer` 对象。
 * @tutorial api base64ToArrayBuffer
 * @file
 * ```js
 * const base64 = 'CxYh';
 * const arrayBuffer = my.base64ToArrayBuffer(base64);
 * this.setData({ output: arrayBuffer });
 * ```
 */
interface base64ToArrayBuffer {
    type: APIType.Fn;
    fn: (base64: string) => ArrayBuffer;
}
/**
 * @description 将 `ArrayBuffer` 对象转成 `Base64` 字符串。
 * @tutorial api arrayBufferToBase64
 * @file
 * ```js
 * const arrayBuffer = new Uint8Array([11, 22, 33]);
 * const base64 = my.arrayBufferToBase64(arrayBuffer);
 * this.setData({ output: base64 });
 * ```
 */
interface arrayBufferToBase64 {
    type: APIType.Fn;
    fn: (arrayBuffer: ArrayBuffer) => string;
}
export {};
//# sourceMappingURL=base.d.ts.map