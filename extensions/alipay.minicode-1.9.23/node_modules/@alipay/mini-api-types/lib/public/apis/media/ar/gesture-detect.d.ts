import { APIType, Type } from '../../../type';
export interface TypeExport<S> {
    [Type.AR.ARContextGetGestureDetectingStatus]: getGestureDetectingStatus<S>;
    [Type.AR.ARContextStartGestureDetecting]: startGestureDetecting<S>;
    [Type.AR.ARContextStopGestureDetecting]: stopGestureDetecting<S>;
    [Type.AR.ARContextGetGestureDetectingResult]: getGestureDetectingResult<S>;
    [Type.AR.ARContextGetGestureDetectingScore]: getGestureDetectingScore<S>;
}
/**
 * @name 手势识别(算法相关)
 * @description 本文主要介绍 **算法方面** 的 **手势识别** 相关接口。
 * - 相关接口请先通过 `createARContext` 获取 `ARContext` 后，才能调用 `ARContext` 内的接口。
 */
export interface APIExport<S> {
}
/**
 * @description 【手势识别】获取手势识别引擎状态。
 */
interface getGestureDetectingStatus<S> {
    type: APIType.Async;
    request: void;
    response: {
        /**
         * @description 引擎状态。
         */
        status: `${EGestureDetectStatus}`;
    };
}
/**
 * @description 【手势识别】开启手势识别。
 */
interface startGestureDetecting<S> {
    type: APIType.Async;
    request: {
        x: number;
        y: number;
        width: number;
        height: number;
    };
}
/**
 * @description 【手势识别】停止手势识别。
 */
interface stopGestureDetecting<S> {
    type: APIType.Fn;
    fn: () => void;
}
/**
 * @description 【手势识别】获取手势识别结果。
 */
interface getGestureDetectingResult<S> {
    type: APIType.Async;
    /**
     * @description 返回 json 字符串(切记 `JSON.parse` 一下)。
     * 内部字段如下：
     * - `label`，类型：`number`，手势标签值。
     * - `confidence`，类型：`number`， 手势可信度(0-1)。
     * - `bbox`，类型：`number[]`， 手势的boundingBox。
     */
    response: string;
}
/**
 * @description 【手势识别】获取指定手势的得分。
 */
interface getGestureDetectingScore<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 支持手势的id。
         */
        gestureId: `${EGestureDetectLabel}`;
    };
    response: {
        /**
         * @description 得分结果，范围 `0~1`。
         */
        score: number;
    };
}
/**
 * @description 标签命名规则：f表示手掌对着摄像头，b表示手背对着摄像头；从小拇指到大拇指编号依次为1～5，比如Gesture-f34表示手掌对着摄像头，露出中指 (编号3) 和食指 (编号4)。
 */
export declare const enum EGestureDetectLabel {
    /**
     * @description ![image](https://intranetproxy.alipay.com/skylark/lark/0/2019/png/24428/1554198053214-ba782d35-6919-4ff6-b557-4473b72160f6.png)
     */
    'Gesture-b45' = "Gesture-b45",
    /**
     * @description ![image](https://intranetproxy.alipay.com/skylark/lark/0/2019/png/24428/1554198074533-5340b2b9-7026-4d7e-920b-c67457fe48c9.png)
     */
    'Gesture-f45' = "Gesture-f45",
    /**
     * @description ![image](https://intranetproxy.alipay.com/skylark/lark/0/2019/png/24428/1554198127821-0647c8ee-97d5-4da4-b814-b43e342117cb.png)
     */
    'Gesture-fAll' = "Gesture-fAll",
    /**
     * @description ![image](https://intranetproxy.alipay.com/skylark/lark/0/2019/png/24428/1554198230144-32f4dc74-5358-4a71-9666-a0babe7a28a5.png)
     */
    'Gesture-bAll' = "Gesture-bAll",
    /**
     * @description ![image](https://intranetproxy.alipay.com/skylark/lark/0/2019/png/24428/1554198271555-33998ae7-3ada-429f-a163-a1c18c765a55.png)
     */
    'Gesture-f34' = "Gesture-f34",
    /**
     * @description ![image](https://intranetproxy.alipay.com/skylark/lark/0/2019/png/24428/1554198291400-063a0013-a14d-4f16-bf92-762acc813916.png)
     */
    'Gesture-b34' = "Gesture-b34",
    /**
     * @description
     * - ![image](https://intranetproxy.alipay.com/skylark/lark/0/2019/png/24428/1554198390489-5736de1d-e35d-4066-a455-278cf3793225.png)
     * - ![image](https://intranetproxy.alipay.com/skylark/lark/0/2019/png/24428/1554198376341-d213c641-3324-4ae1-a65b-406647124e91.png)
     */
    'Gesture-f0' = "Gesture-f0",
    /**
     * @description ![image](https://intranetproxy.alipay.com/skylark/lark/0/2019/png/24428/1554198403067-3c826470-7ba7-45d2-b657-59b722c906bc.png)
     */
    'Gesture-d0' = "Gesture-d0",
    /**
     * @description ![image](https://intranetproxy.alipay.com/skylark/lark/0/2019/png/24428/1554198420983-3a9dad04-f458-4a8c-8587-2d356fa786fc.png)
     */
    'Gesture-b15' = "Gesture-b15",
    /**
     * @description ![image](https://intranetproxy.alipay.com/skylark/lark/0/2019/png/24428/1554198432918-d1a4edb4-f1dc-4934-8b6e-ce96bda2cf81.png)
     */
    'Gesture-f15' = "Gesture-f15"
}
/**
 * @description 手势识别引擎状态。
 */
export declare const enum EGestureDetectStatus {
    /**
     * @description 设备不支持。
     */
    NotSupport = "NotSupport",
    /**
     * @description 正在初始化。
     */
    Initializing = "Initializing",
    /**
     * @description 准备就绪。
     */
    Ready = "Ready",
    /**
     * @description 未知。
     */
    Unknow = "Unknow"
}
export {};
//# sourceMappingURL=gesture-detect.d.ts.map