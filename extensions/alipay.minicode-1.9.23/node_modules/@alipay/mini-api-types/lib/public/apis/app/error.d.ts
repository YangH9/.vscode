import { API, APIType, Type, TypeRef } from '../../type';
export interface TypeExport<S> {
    [Type.App.Rejection]: Rejection;
}
/**
 * @name 异常监控
 */
export interface APIExport<S> {
    [API.onUnhandledRejection]: onUnhandledRejection<S>;
    [API.offUnhandledRejection]: offUnhandledRejection<S>;
    [API.onError]: onError;
    [API.offError]: offError;
    [API.onComponentError]: onComponentError;
    [API.offComponentError]: offComponentError;
}
interface Rejection {
    /**
     * @description reject() 的接收值，一般是 error 对象
     */
    reason: Error | unknown;
    /**
     * @description 被 reject 的 Promise 对象
     */
    promise: Promise<unknown>;
}
/**
 * @description 监听未处理的 Promise 拒绝事件（即 `unhandledrejection` 事件）的 API
 */
interface onUnhandledRejection<S> {
    type: APIType.Event;
    event: TypeRef<S, Type.App.Rejection>;
}
/**
 * @description 是取消监听 unhandledrejection 事件的 API
 */
interface offUnhandledRejection<S> {
    type: APIType.Event;
    event: TypeRef<S, Type.App.Rejection>;
}
/**
 * @description 是监听小程序错误事件的 API。目前仅指 JS 执行错误。触发时机和参数与 `App.onError` 的一致
 */
interface onError {
    type: APIType.Event;
    /**
     * @description 代表错误描述信息
     */
    event: string;
}
/**
 * @description 是取消监听小程序错误事件的 API
 */
interface offError {
    type: APIType.Event;
    event: void;
}
/**
 * @description 用于取消监听小程序自定义组件内部 JS 代码的 error 事件，当自定义组件内部 JS 代码运行抛出错误时，除了会执行 `my.onError` 回调外，同时会触发 `my.onComponentError` 回调。
 */
interface onComponentError {
    type: APIType.Event;
    event: ComponentErrorEvent;
}
/**
 * @description 是用于取消监听小程序自定义组件内部 JS 代码的 `error` 事件。
 */
interface offComponentError {
    type: APIType.Fn;
    fn: (callback: Function) => void;
}
interface ComponentErrorEvent {
    /**
     * @description 标准 error 对象
     */
    error: Error;
    /**
     * @description 抛出错误的具体方法
     */
    method: string;
    /**
     * @description Component 实例
     */
    component: object;
}
export {};
//# sourceMappingURL=error.d.ts.map