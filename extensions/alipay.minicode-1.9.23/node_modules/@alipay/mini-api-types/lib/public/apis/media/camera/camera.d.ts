import { API, APIType, Type, TypeRef } from '../../../type';
export interface TypeExport<S> {
    [Type.Camera.CameraContext]: CameraContext<S>;
    [Type.Camera.CameraContextOnCameraFrame]: onCameraFrame4Camera<S>;
    [Type.Camera.CameraContextOnCameraFrameCameraFrameListener]: CameraFrameListener<S>;
    [Type.Camera.CameraContextOnCameraFrameCameraFrameListenerStart]: cameraFrameListenerStart<S>;
    [Type.Camera.CameraContextOnCameraFrameCameraFrameListenerStop]: cameraFrameListenerStop<S>;
    [Type.Camera.CameraContextStartRecord]: startRecord4Camera<S>;
    [Type.Camera.CameraContextStopRecord]: stopRecord4Camera<S>;
    [Type.Camera.CameraContextTakePhoto]: takePhoto4Camera<S>;
}
/**
 * @name 扫描摄像
 */
export interface APIExport<S> {
    [API.scan]: scan;
    [API.createCameraContext]: createCameraContext<S>;
}
declare const enum EScanType {
    /**
     * @description 二维码
     */
    qrCode = "qrCode",
    /**
     * @description 条码
     */
    barCode = "barCode",
    /**
     * @description DM码
     */
    dmCode = "dmCode",
    /**
     * @description PDF417码
     */
    pdf417Code = "pdf417Code",
    /**
     * @description 窄条二维码
     */
    narrowCode = "narrowCode",
    /**
     * @description 异构码
     */
    hmCode = "hmCode"
}
/**
 * @description 调用扫一扫功能
 */
interface scan {
    type: APIType.Async;
    request: {
        /**
         * @description 扫码识别类型
         * @description ['qrCode','barCode']
         */
        scanType?: `${EScanType}`[];
        /**
         * @description 是否隐藏相册（不允许从相册选择图片），只能从相机扫码。
         */
        hideAlbum?: boolean;
    };
    response: {
        /**
         * @description 扫码所得数据。
         */
        code: string;
        /**
         * @description 扫描二维码时返回二维码数据。
         */
        qrCode: string;
        /**
         * @description 扫描条形码时返回条形码数据。
         */
        barCode: string;
        /**
         * @description 码类型。
         */
        codeType: string;
        /**
         * @description 码内容。
         */
        codeContent: string;
        /**
         * @description 来源。
         */
        imageChannel: string;
        /**
         * @description Base64 字节流。
         */
        rawData: string;
    };
}
/**
 * @description 传入 `cameraId`，返回一个 `CameraContext` 上下文。通过 `CameraContext` 可以操作一个 `camera` 组件。
 */
interface createCameraContext<S> {
    type: APIType.Fn;
    fn: (cameraId: string) => TypeRef<S, Type.Camera.CameraContext>;
}
/**
 * @description `CameraContext` 上下文对象，用于操作对应的 `camera` 组件。
 */
interface CameraContext<S> {
    type: APIType.Property;
    property: {
        onCameraFrame: TypeRef<S, Type.Camera.CameraContextOnCameraFrame>;
        startRecord: TypeRef<S, Type.Camera.CameraContextStartRecord>;
        stopRecord: TypeRef<S, Type.Camera.CameraContextStopRecord>;
        takePhoto: TypeRef<S, Type.Camera.CameraContextTakePhoto>;
    };
}
/**
 * @description 获取 `Camera` 实时帧数据。
 */
interface onCameraFrame4Camera<S> {
    type: APIType.Fn;
    fn: (callback: (option: onCameraFrameEventOption) => void) => TypeRef<S, Type.Camera.CameraContextOnCameraFrameCameraFrameListener>;
}
interface onCameraFrameEventOption {
    /**
     * @description 图像数据矩形的宽度。
     */
    width: number;
    /**
     * @description 图像数据矩形的高度。
     */
    height: number;
    /**
     * @description 图像像素点数据，一维数组，每四项表示一个像素点的 rgba。
     */
    data: ArrayBuffer;
}
/**
 * @description `CameraContext.onCameraFrame` 调用后返回的监听器。
 */
interface CameraFrameListener<S> {
    type: APIType.Property;
    property: {
        start: TypeRef<S, Type.Camera.CameraContextOnCameraFrameCameraFrameListenerStart>;
        stop: TypeRef<S, Type.Camera.CameraContextOnCameraFrameCameraFrameListenerStop>;
    };
}
/**
 * @description 开始监听帧数据。
 */
interface cameraFrameListenerStart<S> {
    type: APIType.Async;
    request: void;
}
/**
 * @description 停止监听帧数据。
 */
interface cameraFrameListenerStop<S> {
    type: APIType.Async;
    request: void;
}
/**
 * @description 开始录像。
 */
interface startRecord4Camera<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 超过 `30s` 或页面 `onHide` 时会结束录像。
         */
        timeoutCallback: (option: startRecordTimeoutCallbackOption) => void;
    };
}
/**
 * @name startRecord.timeoutCallback.option
 */
interface startRecordTimeoutCallbackOption {
    /**
     * @description 封面图片文件的临时路径。
     */
    tempThumbPath: string;
    /**
     * @description 视频的文件的临时路径。
     */
    tempVideoPath: string;
}
/**
 * @description 结束录像。
 */
interface stopRecord4Camera<S> {
    type: APIType.Async;
    response: {
        /**
         * @description 封面图片文件的临时路径。
         */
        tempThumbPath: string;
        /**
         * @description 视频的文件的临时路径。
         */
        tempVideoPath: string;
    };
}
/**
 * @description 拍摄照片。
 */
interface takePhoto4Camera<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 成像质量。
         * @default normal
         */
        quality?: `${EQuality}`;
    };
    response: {
        /**
         * @description 照片文件的临时路径。
         */
        tempImagePath: string;
    };
}
/**
 * @description 图片质量
 */
declare const enum EQuality {
    /**
     * @description 高质量。
     */
    high = "high",
    /**
     * @description 普通质量。
     */
    normal = "normal",
    /**
     * @description 低质量。
     */
    low = "low"
}
export {};
//# sourceMappingURL=camera.d.ts.map