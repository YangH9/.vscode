import { API, APIType } from '../../type';
export interface TypeExport<S> {
}
/**
 * @name 支付及资金
 */
export interface APIExport<S> {
    [API.tradePay]: tradePay;
    [API.ap$tradePay]: ap$tradePay;
    [API.paySignCenter]: paySignCenter;
    [API.ap$paySignCenter]: ap$paySignCenter;
}
/**
 * @description 发起支付。更多信息请见 [小程序支付](https://opendocs.alipay.com/mini/introduce/pay)
 */
interface tradePay {
    type: APIType.Async;
    request: tradePay4TradeNo | tradePay4OrderStr;
    response: {
        /**
         * @description 支付结果码。
         */
        resultCode: `${EResultCode4TradePay}`;
    };
}
/**
 * @description 小程序支付参数
 */
interface tradePay4TradeNo {
    /**
     * @description 接入小程序支付时传入此参数。此参数为支付宝交易号，注意参数有大小写区分。
     */
    tradeNO: string;
}
/**
 * @description 小程序资金授权参数
 */
interface tradePay4OrderStr {
    /**
     * @description 完整的支付参数拼接成的字符串，从服务端获取。
     */
    orderStr: string;
}
declare const enum EResultCode4TradePay {
    /**
     * @description 无权限调用（N22104）
     * - 个人小程序应用没有开放小程序支付能力。
     */
    '_4' = "4",
    /**
     * @description 订单处理成功，不建议根据 `tradePay` 接口同步返回判断是否支付成功，`9000` **不能判定就是支付成功**，请以异步通知（notify_url）返回的 trade_status(交易状态)为 TRADE_SUCCESS + alipay.trade.query 接口查询订单是否支付成功实际返回的支付状态为准。
     */
    '_9000' = "9000",
    /**
     * @description 正在处理中。
     * - 支付结果未知（有可能已经支付成功），请调用 alipay.trade.query 接口查询商户订单列表中订单的支付状态，以查询接口实际返回的支付状态为准。
     */
    '_8000' = "8000",
    /**
     * @description 订单处理失败，tradeNO 调用 小程序支付 时必填，orderStr 调用 资金授权 时必填，二选一。根据具体接入开放能力选择参数。
     * - 小程序支付时：检查入参字段 tradeNO 是否编写正确，"NO"都是大写。tradeNO 的入参数据是 alipay.trade.create 接口返回的 “trade_no”，不是 “out_trade_no”。
     * - 资金授权时：orderStr 必填。alipay.fund.auth.order.app.freeze 接口的参数有误，导致通过  response.sdkExcute(request) 方法获取到的 orderStr 参数有问题，检查入参字段和数据是否符合接口要求，建议只传必传参数测试，避免其他参数干扰。
     */
    '_4000' = "4000",
    /**
     * @description 用户中途取消。
     * - 请用户重新签约 / 支付。
     * - 检查 tradeNO 的入参是否为正常入参，参数数据为 alipay.trade.create 接口返回的“trade_no”
     * - alipay.trade.create 接口在小程序场景中 buyer_id 参数必填，且入参的 buyer_id（用户 user_id，2088 开头）必须和前端唤起支付的支付宝账号一致。
     */
    '_6001' = "6001",
    /**
     * @description 网络连接出错。
     */
    '_6002' = "6002",
    /**
     * @description 处理结果未知（有可能已经成功）。
     * - 请调用 alipay.trade.query 接口查询商户订单列表中订单的支付状态，以查询接口实际返回的支付状态为准。
     */
    '_6004' = "6004"
}
interface ap$tradePay {
    type: APIType.Alias;
    alias: API.tradePay;
}
/**
 * @description 在支付宝小程序内启动一个代扣 H5 服务。有关周期扣款更多信息，请参见 [周期扣款](https://opendocs.alipay.com/mini/006srl)。
 */
interface paySignCenter {
    type: APIType.Async;
    request: {
        /**
         * @description 签约字符串。
         */
        signStr: string;
    };
    response: {
        /**
         * @description 处理结果（如需该字段内部参数，切记先 `JSON.parse` 一下）。
         * `JSON.parse` 后的对象结构如下：
         * - `sign`，类型 `string`，签名
         * - `sign_type`，类型 `string`，签名算法类型
         * - `alipay_user_agreement_page_sign_response`，类型 `object`
         */
        result: string;
        /**
         * @description 签约结果码。
         */
        resultStatus: `${EResultStatus4PaySignCenter}`;
    };
}
interface ap$paySignCenter {
    type: APIType.Alias;
    alias: API.paySignCenter;
}
declare const enum EResultStatus4PaySignCenter {
    /**
     * @description 协议签约成功。
     */
    '_7000' = "7000",
    /**
     * @description 签约结果未知（有可能已经签约成功），请根据外部签约号查询签约状态。
     */
    '_7001' = "7001",
    /**
     * @description 协议签约失败。
     */
    '_7002' = "7002",
    /**
     * @description 用户中途取消。
     */
    '_6001' = "6001",
    /**
     * @description 网络连接错误。
     */
    '_6002' = "6002"
}
export {};
//# sourceMappingURL=payment.d.ts.map