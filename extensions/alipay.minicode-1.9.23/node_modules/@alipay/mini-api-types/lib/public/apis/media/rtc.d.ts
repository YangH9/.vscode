import { API, APIType, Type, TypeRef } from '../../type';
export interface TypeExport<S> {
    [Type.RtcRoom.RtcRoomContext]: RtcRoomContext<S>;
    [Type.RtcRoom.RtcRoomContextStart]: start<S>;
    [Type.RtcRoom.RtcRoomContextStop]: stop<S>;
    [Type.RtcRoom.RtcRoomContextMute]: mute<S>;
    [Type.RtcRoom.RtcRoomContextSwitchCamera]: switchCamera<S>;
    [Type.RtcRoom.RtcRoomContextEnableCamera]: enableCamera<S>;
    [Type.RtcRoom.RtcRoomContextAudioMode]: audioMode<S>;
    [Type.RtcRoom.RtcRoomContextSendMessage]: sendMessage<S>;
    [Type.RtcRoom.RtcRoomContextSnapshot]: snapshot<S>;
    [Type.RtcRoom.RtcRoomContextShowPreView]: showPreView<S>;
    [Type.RtcRoom.RtcRoomContextStartScreenCapture]: startScreenCapture<S>;
    [Type.RtcRoom.RtcRoomContextStopScreenCapture]: stopScreenCapture<S>;
}
/**
 * @name 即时通信(RTC)
 */
export interface APIExport<S> {
    [API.createRtcRoomContext]: createRtcRoomContext<S>;
}
/**
 * @description 传入 `rtcroomId`，返回一个 `RtcRoomContext` 上下文，通过它可以操作一个 `rtcroom` 组件。
 */
interface createRtcRoomContext<S> {
    type: APIType.Fn;
    fn: (rtcroomId: string) => TypeRef<S, Type.RtcRoom.RtcRoomContext>;
}
interface RtcRoomContext<S> {
    /**
     * @description 开始视频聊天。
     */
    start: TypeRef<S, Type.RtcRoom.RtcRoomContextStart>;
    /**
     * @description 停止视频聊天并离开房间。
     */
    stop: TypeRef<S, Type.RtcRoom.RtcRoomContextStop>;
    /**
     * @description 静音播放。
     */
    mute: TypeRef<S, Type.RtcRoom.RtcRoomContextMute>;
    /**
     * @description 切换摄像头。
     */
    switchCamera: TypeRef<S, Type.RtcRoom.RtcRoomContextSwitchCamera>;
    /**
     * @description 禁用 / 开启摄像头。
     */
    enableCamera: TypeRef<S, Type.RtcRoom.RtcRoomContextEnableCamera>;
    /**
     * @description 设置音频播放模式。
     */
    audioMode: TypeRef<S, Type.RtcRoom.RtcRoomContextAudioMode>;
    /**
     * @description 发送消息。
     */
    sendMessage: TypeRef<S, Type.RtcRoom.RtcRoomContextSendMessage>;
    /**
     * @description 获取本端的预览截图。
     */
    snapshot: TypeRef<S, Type.RtcRoom.RtcRoomContextSnapshot>;
    /**
     * @description 指定显示主预览界面。
     */
    showPreView: TypeRef<S, Type.RtcRoom.RtcRoomContextShowPreView>;
    /**
     * @description 共享屏幕。
     */
    startScreenCapture: TypeRef<S, Type.RtcRoom.RtcRoomContextStartScreenCapture>;
    /**
     * @description 关闭共享屏幕。
     */
    stopScreenCapture: TypeRef<S, Type.RtcRoom.RtcRoomContextStopScreenCapture>;
}
/**
 * @description 开始视频聊天。已经设置 `autoplay` 为 `true`，则无需调用 start 方法。
 */
interface start<S> {
    type: APIType.Async;
    request: {
        roomId: string;
        token: string;
        signature: string;
    };
}
/**
 * @description 停止视频聊天并离开房间。
 */
interface stop<S> {
    type: APIType.Fn;
    fn: () => void;
}
/**
 * @description 静音播放。
 */
interface mute<S> {
    type: APIType.Async;
    request: {
        /**
         * @description `true` 静音播放，`false` 正常播放。
         */
        muted: boolean;
    };
}
/**
 * @description 切换摄像头。
 */
interface switchCamera<S> {
    type: APIType.Fn;
    fn: () => void;
}
/**
 * @description 禁用 / 开启摄像头。禁用摄像头后，画面会保留在最后一帧。
 */
interface enableCamera<S> {
    type: APIType.Fn;
    fn: (option: enableCameraOption) => void;
}
/**
 * @name enableCamera.option
 */
interface enableCameraOption {
    /**
     * @description `true` 开启摄像头，`false` 金庸摄像头。
     */
    enable: boolean;
}
/**
 * @description 设置音频播放模式，如果当前音频播放时耳机模式，设置不生效。
 */
interface audioMode<S> {
    type: APIType.Fn;
    fn: (option: audioModeOption) => void;
}
/**
 * @name audioMode.option
 */
interface audioModeOption {
    /**
     * @description 设置音频的播放模式。
     * - `1` 听筒模式。
     * - `2` 扬声器模式。
     */
    mode: 1 | 2;
}
/**
 * @description 发送消息。
 */
interface sendMessage<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 消息内容。
         */
        message: string;
        /**
         * @description 消息接收的 userId 数组。
         */
        userIds: string[];
    };
}
/**
 * @description 获取本端的预览截图。
 */
interface snapshot<S> {
    type: APIType.Async;
    request: void;
    response: {
        /**
         * @description 图片地址。
         */
        apFilePath: string;
    };
}
/**
 * @description 指定显示主预览界面。
 */
interface showPreView<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 指定显示界面用户id。
         */
        userId: string;
    };
}
/**
 * @description 共享屏幕。如不支持设备，调用是会返回错误。
 * - iOS 需要在 iOS 11 系统上支持。
 * - Android 支持在 6.0 系统以上。
 */
interface startScreenCapture<S> {
    type: APIType.Async;
    request: void;
    response: void;
}
/**
 * @description 关闭共享屏幕。
 */
interface stopScreenCapture<S> {
    type: APIType.Async;
    request: void;
    response: void;
}
export {};
//# sourceMappingURL=rtc.d.ts.map