import { API, APIType } from '../../type';
export interface TypeExport<S> {
}
/**
 * @name 小服务
 */
export interface APIExport<S> {
    [API.navigateToMiniService]: navigateToMiniService;
    [API.navigateBackFromMiniService]: navigateBackFromMiniService;
    [API.startMiniService]: startMiniService;
}
/**
 * @description 打开插件。
 */
interface navigateToMiniService {
    type: APIType.Async;
    request: {
        /**
         * @description 已订购的插件id。
         */
        serviceId: string;
        /**
         * @description 需要传递给目标插件的数据，插件可在 `App.onLaunch(options)`，`App.onShow(options)` 中获取到这份数据。
         */
        extraData?: Record<string, unknown>;
    };
    response: {
        /**
         * @description 返回宿主小程序的方式。
         */
        action: `${ENavigateBackAction}`;
        /**
         * @description 通过 `navigateBackFromMiniService` 传递的数据。
         */
        data: Record<string, unknown>;
    };
}
declare const enum ENavigateBackAction {
    /**
     * @description 通过调用 `navigateBackFromMiniService` 返回宿主小程序时的 `action`。
     */
    complete = "complete",
    /**
     * @description 用户直接点击插件第一个页面的返回按钮，关闭插件 时的 `action`。
     */
    cancel = "cancel"
}
/**
 * @description 从 `A` 主体小程序直接打开 `B` 主体小程序的 `b` 插件。
 */
interface startMiniService {
    type: APIType.Async;
    request: {
        /**
         * @description 已订购的插件id。
         */
        serviceId: string;
        /**
         * @description 当前插件的宿主id。
         */
        parentAppId: string;
        /**
         * @description 需要传递给目标插件的数据，插件可在 `App.onLaunch(options)`，`App.onShow(options)` 中获取到这份数据。
         */
        extraData?: Record<string, unknown>;
    };
}
/**
 * @description 从插件返回宿主小程序。
 */
interface navigateBackFromMiniService {
    type: APIType.Sync;
    /**
     * @description 可以传递数据给 宿主小程序，即 `navigateToMiniService` 的 `success` 内接收到的 `extraData`。
     */
    request: Record<string, unknown>;
}
export {};
//# sourceMappingURL=mini-service.d.ts.map