import { APIType, Type } from '../../../type';
export interface TypeExport<S> {
    [Type.AR.ARContextSetNodeTexture]: setNodeTexture<S>;
    [Type.AR.ARContextRemoveTextureCache]: removeTextureCache<S>;
    [Type.AR.ARContextModulateAlpha]: modulateAlpha<S>;
    [Type.AR.ARContextModulateColor]: modulateColor<S>;
    [Type.AR.ARContextStartEnvironmentTexturing]: startEnvironmentTexturing<S>;
    [Type.AR.ARContextStopEnvironmentTexturing]: stopEnvironmentTexturing<S>;
}
/**
 * @name 纹理控制(图形渲染)
 * @description 本文主要介绍 **图形渲染** 方面的 **纹理控制** 相关接口。
 * - 相关接口请先通过 `createARContext` 获取 `ARContext` 后，才能调用 `ARContext` 内的接口。
 */
export interface APIExport<S> {
}
/**
 * @description 【纹理控制】修改节点贴图(贴图会自动缓存)。
 */
interface setNodeTexture<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 节点 id。
         */
        nodeId: string;
        /**
         * @description 图片路径。
         */
        imgPath: string;
        /**
         * @description 贴图序号（通常为 0）。
         */
        meshPart: number;
    };
}
/**
 * @description 【纹理控制】移除贴图缓存，为减少内存压力，不再使用的贴图需即时移除(特别是用贴图做帧动画的情况)，注意不能移除正在使用的贴图。
 */
interface removeTextureCache<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 贴图文件路径。
         */
        imgPath: string;
    };
}
/**
 * @description 【纹理控制】调整节点贴图 alpha 值(需要在 .material 文件中开启): 结果 alpha = 原 alpha * alpha。
 */
interface modulateAlpha<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 节点 id。
         */
        nodeId: string;
        /**
         * @description 透明度调整系数，范围：0~1。
         */
        alpha: number;
        /**
         * @description 贴图序号（通常为 0）。
         */
        meshPart: number;
    };
}
/**
 * @description 【纹理控制】调整节点贴图 color 值(需要在 .material 文件中开启): 结果 color = 原 color * color(r, g, b, a)。
 */
interface modulateColor<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 节点 id。
         */
        nodeId: string;
    } & RGB;
}
/**
 * @description 【纹理控制】开始更新纹理，使视频预览绑定至模型节点，实现与实景融合渲染的效果。
 */
interface startEnvironmentTexturing<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 节点 id 列表。
         */
        nodeId: string[];
    };
}
/**
 * @description 【纹理控制】停止更新纹理，使节点的纹理更新停留在这一帧。
 */
interface stopEnvironmentTexturing<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 节点 id 列表。
         */
        nodeId: string[];
    };
}
interface RGB {
    /**
     * @description 颜色 r 分量，范围：`0~1`。
     */
    r: number;
    /**
     * @description 颜色 g 分量，范围：`0~1`。
     */
    g: number;
    /**
     * @description 颜色 b 分量，范围：`0~1`。
     */
    b: number;
}
export {};
//# sourceMappingURL=texture.d.ts.map