import { API, APIDefaultErrorResponse, APIType, Flag, FlagDef } from '../../type';
export interface TypeExport<S> {
}
/**
 * @name 上传下载
 */
export interface APIExport<S> {
    [API.uploadFile]: uploadFile<S>;
    [API.uploadFileToAliCloud]: uploadFileToAliCloud<S>;
    [API.downloadFile]: downloadFile;
}
/**
 * @description 上传本地资源到开发者服务器。
 *
 * 请预先在 支付宝小程序管理中心 > 小程序详情 >设置 > 开发设置 > 服务器域名白名单 中配置域名白名单。小程序在以下 API 调用时只能与白名单中的域名进行通讯：HTTP 请求（request）、上传文件（uploadFile）。
 *
 * ![image](http://mdn.alipayobjects.com/afts/img/A*xM4NR6VRbfy_8SFDkgXUhQBkAa8wAA/original?bz=openpt_doc&t=JgMQtxsM9S7uH5pPEDbN9wAAAABkMK8AAAAA)
 *
 * **注意**：域名添加或删除后仅对新版本生效，老版本仍使用修改前的域名配置。
 */
interface uploadFile<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 开发者服务器地址。
         */
        url: string;
        /**
         * @description 要上传文件资源的本地定位符。
         */
        filePath: string;
        /**
         * @description 文件名，即对应的 key，开发者在服务器端通过这个 key 可以获取到文件二进制内容。
         */
        fileName: string;
        /**
         * @description 文件类型支持图片、视频、音频（image / video / audio）。
         */
        fileType: string;
        /**
         * @description 是否隐藏 loading 图。
         * @default false
         */
        hideLoading?: boolean;
        /**
         * @description HTTP 请求 Header。
         */
        header?: Record<string, unknown>;
        /**
         * @description HTTP 请求中其他额外的 form 数据。
         */
        formData?: Record<string, unknown>;
    };
    response: {
        /**
         * @description 服务器返回的数据。
         */
        data: string;
        /**
         * @description HTTP 状态码。
         */
        statusCode: string;
        /**
         * @description 服务器返回的 Header。
         */
        header: Record<string, unknown>;
    };
    error: UploadFileError;
    return: UploadTask<S>;
}
/**
 * @description 监听上传进度变化，取消上传任务的对象。
 */
interface UploadTask<S> {
    /**
     * @description 中断上传任务。
     */
    abort: FlagDef<S, () => void, Flag.Request.UploadFileUploadTaskAbort>;
    /**
     * @description 监听上传进度变化的事件。
     */
    onProgressUpdate: FlagDef<S, (callback: (event: UploadTaskEvent) => void) => void, Flag.Request.UploadFileUploadTaskonProgressUpdate>;
}
interface UploadTaskEvent {
    progress: number;
    totalBytesWritten: number;
    totalBytesExpectedToWrite: number;
}
interface UploadFileError extends APIDefaultErrorResponse {
    /**
     * @description 错误码。
     */
    error: EUploadFileErrorCode;
}
declare const enum EUploadFileErrorCode {
    /**
     * @description 无权限调用。
     * 解决方案：
     * - 确认小程序应用是否授权给了三方应用，三方应用是否添加了 JSAPI 基础包 功能包。可尝试添加 JSAPI 基础包 功能包后，重新授权、重新推送预览调试或者直接解除三方应用授权，重新推送预览调试。说明：小程序应用授权给三方应用后，小程序在真机上的运行使用的是三方应用的功能包，不再是使用小程序自身的功能包。
     * - 若是小程序应用 JSAPI 基础包 功能包没有或者不全，建议删除小程序应用，重新创建一个新小程序应用来调试。
     * - 配置请求白名单，请预先在 支付宝小程序管理中心 > 小程序详情 >设置 > 开发设置 > 服务器域名白名单 中配置域名白名单。域名添加或删除后仅对新版本生效，老版本仍使用修改前的域名配置。
     * - 若是账号问题，不能登录管理后台配置，开发版测试可以先在 IDE 右上角点击 详情 > 域名信息 下勾选 “忽略 request 域名合法性检查（仅在本地模拟、预览和远程调试时生效）” 或 “ 忽略 Webview 域名合法性检查（仅在本地模拟、预览和远程调试时生效）”，再预览调试请求。
     * - 建议做下兼容，不要使用 `saveFile` 保存文件后返回的 apFilePath 作为上传 filePath 的入参。
     */
    '_4' = 4,
    /**
     * @description 上传文件中止文件，在上传文件未完成时调用了 `UploadTask.abort()`。
     */
    '_9' = 9,
    /**
     * @description 存在以下异常情况：
     * - 出于安全策略，不能使用 `saveFile` 保存文件后返回的 apFilePath 作为上传 filePath 的入参。
     * - 检查本地文件是否存在。
     */
    '_11' = 11,
    /**
     * @description 存在以下异常情况：
     * - 文件未找到 / 文件不是一个正常的文件，确认 filePath 入参的正确性，必须是本地定位符，可使用 `chooseImage` 在相册选择图片后返回的地址。
     * - 文件过大，上传时间超过 30s
     */
    '_12' = 12,
    /**
     * @description 没有权限，请检查权限设置。
     */
    '_13' = 13,
    /**
     * @description 请求 URL 不支持 HTTP，请使用 HTTPS。
     */
    '_20' = 20
}
/**
 * @description 蚂蚁域内部上传文件到蚂蚁自建存储，使用网络层的接口上传。
 */
interface uploadFileToAliCloud<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 文件地址。
         */
        filePath: string;
        /**
         * @description 业务标识。
         */
        bizType: string;
        /**
         * @description 文件类型。
         */
        fileType: string;
        /**
         * @description 请求头。
         */
        headers?: Record<string, unknown>;
        /**
         * @description 失败是否要重试。
         */
        needRetry?: FlagDef<S, boolean, Flag.Request.UploadFileToAliCloudNeedRetry>;
        /**
         * @description 是否是私域资源。
         * - true 为私域资源。
         * - false 为公域资源，私域资源返回的 fileUrl 默认有效期为一天。
         */
        isPrivate: FlagDef<S, boolean, Flag.Request.UploadFileToAliCloudIsPrivate>;
        /**
         * @description 是否需要隐藏 loading 视图。
         * @default false
         */
        hideLoading?: FlagDef<S, boolean, Flag.Request.UploadFileToAliCloudHideLoading>;
        /**
         * @description 上传成功之后是否要删除。
         */
        needDelete?: FlagDef<S, boolean, Flag.Request.UploadFileToAliCloudNeedDelete>;
        /**
         * @description 跨小程序和 h5 的统一存储 biz，通过 createSharedBiz 进行创建。
         */
        sharedBiz?: FlagDef<S, string, Flag.Request.UploadFileToAliCloudSharedBiz>;
    };
    response: {
        /**
         * @description 文件网络地址。
         */
        fileUrl: string;
    };
    error: UploadFileToAliCloudError;
}
interface UploadFileToAliCloudError extends APIDefaultErrorResponse {
    /**
     * @description 错误码。
     */
    error: EUploadFileToAliCloudErrorCode;
}
declare const enum EUploadFileToAliCloudErrorCode {
    /**
     * @description 私有目录，无权限上传(Android)。
     */
    '_11' = 11,
    /**
     * @description 上传错误。
     */
    '_60012' = 60012,
    /**
     * @description 文件不存在。
     */
    '_10022' = 10022
}
/**
 * @description 下载文件资源到本地。可下载任何格式的文件，不能被识别的文件将以 other 的方式存储起来。
 */
interface downloadFile {
    type: APIType.Async;
    request: {
        /**
         * @description 下载文件地址。
         */
        url: string;
        /**
         * @description 请求头。
         */
        header?: Record<string, unknown>;
    };
    response: {
        /**
         * @description 文件临时存放的位置。
         */
        apFilePath: string;
    };
    error: DownloadFileError;
}
interface DownloadFileError extends APIDefaultErrorResponse {
    /**
     * @description 错误码。
     */
    error: EDownloadFileErrorCode;
}
declare const enum EDownloadFileErrorCode {
    /**
     * @description 下载失败，建议检查网络和服务器。
     */
    '_12' = 12,
    /**
     * @description 没有权限，建议检查权限。
     */
    '_13' = 13,
    /**
     * @description 请求的 URL 不支持 HTTP。
     */
    '_20' = 20
}
export {};
//# sourceMappingURL=file.d.ts.map