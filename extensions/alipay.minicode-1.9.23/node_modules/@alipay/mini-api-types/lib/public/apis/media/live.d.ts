import { API, APIType, Type, TypeRef } from '../../type';
export interface TypeExport<S> {
    [Type.Live.LivePlayerContext]: LivePlayerContext<S>;
    [Type.Live.LivePlayerContextPlay]: LivePlayerContextPlay;
    [Type.Live.LivePlayerContextPause]: LivePlayerContextPause;
    [Type.Live.LivePlayerContextResume]: LivePlayerContextResume;
    [Type.Live.LivePlayerContextStop]: LivePlayerContextStop;
    [Type.Live.LivePlayerContextMute]: LivePlayerContextMute;
    [Type.Live.LivePlayerContextRequestFullScreen]: LivePlayerContextRequestFullScreen;
    [Type.Live.LivePlayerContextShowFloatingWindow]: LivePlayerContextShowFloatingWindow;
    [Type.Live.LivePusherContext]: LivePusherContext<S>;
    [Type.Live.LivePusherContextStart]: LivePusherContextStart;
    [Type.Live.LivePusherContextPause]: LivePusherContextPause;
    [Type.Live.LivePusherContextResume]: LivePusherContextResume;
    [Type.Live.LivePusherContextStop]: LivePusherContextStop;
    [Type.Live.LivePusherContextSwitchCamera]: LivePusherContextSwitchCamera;
    [Type.Live.LivePusherContextToggleTorch]: LivePusherContextToggleTorch;
}
/**
 * @name 实时音视频
 */
export interface APIExport<S> {
    [API.createLivePlayerContext]: createLivePlayerContext<S>;
    [API.createLivePusherContext]: createLivePusherContext<S>;
}
/**
 * @description 传入 `组件 id`，返回一个 LivePlayerContext 的对象，通过它可以操作一个 `live-player` 组件。
 */
interface createLivePlayerContext<S> {
    type: APIType.Fn;
    fn: (livePlayerId: string) => TypeRef<S, Type.Live.LivePlayerContext>;
}
interface LivePlayerContext<S> {
    type: APIType.Property;
    property: {
        play: TypeRef<S, Type.Live.LivePlayerContextPlay>;
        pause: TypeRef<S, Type.Live.LivePlayerContextPause>;
        resume: TypeRef<S, Type.Live.LivePlayerContextResume>;
        stop: TypeRef<S, Type.Live.LivePlayerContextStop>;
        mute: TypeRef<S, Type.Live.LivePlayerContextMute>;
        requestFullScreen: TypeRef<S, Type.Live.LivePlayerContextRequestFullScreen>;
        showFloatingWindow: TypeRef<S, Type.Live.LivePlayerContextShowFloatingWindow>;
    };
}
/**
 * @description 播放，`autoplay=true` 时可以不调用，否则调用 `play` 才开始播放。
 */
interface LivePlayerContextPlay {
    type: APIType.Fn;
    fn: () => void;
}
/**
 * @description 暂停播放。
 */
interface LivePlayerContextPause {
    type: APIType.Fn;
    fn: () => void;
}
/**
 * @description 恢复播放。
 */
interface LivePlayerContextResume {
    type: APIType.Fn;
    fn: () => void;
}
/**
 * @description 停止播放。
 */
interface LivePlayerContextStop {
    type: APIType.Fn;
    fn: () => void;
}
/**
 * @description 静音，传入一个json对象，如：`{ ison: true }`。
 */
interface LivePlayerContextMute {
    type: APIType.Fn;
    fn: (option: LivePlayerContextMuteOption) => void;
}
interface LivePlayerContextMuteOption {
    /**
     * @description 是否静音。
     */
    ison: boolean;
}
/**
 * @description 请求全屏，支持3个屏幕方向：`-90`、`0` 和 `90` 度。传入一个 `json` 对象，如：`{ direction: -90 }`。
 */
interface LivePlayerContextRequestFullScreen {
    type: APIType.Fn;
    fn: (option: LivePlayerContextRequestFullScreenOption) => void;
}
interface LivePlayerContextRequestFullScreenOption {
    /**
     * @description 屏幕方向。
     */
    direction: -90 | 0 | 90;
}
/**
 * @description 显示/隐藏浮窗，如 `showFloatingWindow(false);`。
 */
interface LivePlayerContextShowFloatingWindow {
    type: APIType.Fn;
    /**
     * @param visible 是否显示浮窗。
     */
    fn: (visible: boolean) => void;
}
/**
 * @description 传入 `组件 id`，返回一个 LivePusherContext 的对象，通过它可以操作一个 `live-pusher` 组件。
 */
interface createLivePusherContext<S> {
    type: APIType.Fn;
    fn: (id: string) => TypeRef<S, Type.Live.LivePusherContext>;
}
interface LivePusherContext<S> {
    type: APIType.Property;
    property: {
        start: TypeRef<S, Type.Live.LivePusherContextStart>;
        pause: TypeRef<S, Type.Live.LivePusherContextPause>;
        resume: TypeRef<S, Type.Live.LivePusherContextResume>;
        stop: TypeRef<S, Type.Live.LivePusherContextStop>;
        switchCamera: TypeRef<S, Type.Live.LivePusherContextSwitchCamera>;
        toggleTorch: TypeRef<S, Type.Live.LivePusherContextToggleTorch>;
    };
}
/**
 * @description 开始推流。
 */
interface LivePusherContextStart {
    type: APIType.Fn;
    fn: () => void;
}
/**
 * @description 暂停推流。
 */
interface LivePusherContextPause {
    type: APIType.Fn;
    fn: () => void;
}
/**
 * @description 继续推流。
 */
interface LivePusherContextResume {
    type: APIType.Fn;
    fn: () => void;
}
/**
 * @description 停止推流。
 */
interface LivePusherContextStop {
    type: APIType.Fn;
    fn: () => void;
}
/**
 * @description 切换前后摄像头。
 */
interface LivePusherContextSwitchCamera {
    type: APIType.Fn;
    fn: () => void;
}
/**
 * @description 切换闪光灯。
 */
interface LivePusherContextToggleTorch {
    type: APIType.Fn;
    fn: () => void;
}
export {};
//# sourceMappingURL=live.d.ts.map