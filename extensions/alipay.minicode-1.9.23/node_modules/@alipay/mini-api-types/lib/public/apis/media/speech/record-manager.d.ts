import { API, APIType, Flag, FlagDef, Type, TypeRef } from '../../../type';
export interface TypeExport<S> {
    [Type.RecorderManager.RecorderManager]: RecorderManager<S>;
    [Type.RecorderManager.RecorderManagerStart]: start<S>;
    [Type.RecorderManager.RecorderManagerStop]: stop<S>;
    [Type.RecorderManager.RecorderManagerPause]: pause<S>;
    [Type.RecorderManager.RecorderManagerResume]: resume<S>;
    [Type.RecorderManager.RecorderManagerOnStart]: onStart<S>;
    [Type.RecorderManager.RecorderManagerOffStart]: offStart<S>;
    [Type.RecorderManager.RecorderManagerOnStop]: onStop<S>;
    [Type.RecorderManager.RecorderManagerOffStop]: offStop<S>;
    [Type.RecorderManager.RecorderManagerOnPause]: onPause<S>;
    [Type.RecorderManager.RecorderManagerOffPause]: offPause<S>;
    [Type.RecorderManager.RecorderManagerOnResume]: onResume<S>;
    [Type.RecorderManager.RecorderManagerOffResume]: offResume<S>;
    [Type.RecorderManager.RecorderManagerOnError]: onError<S>;
    [Type.RecorderManager.RecorderManagerOffError]: offError<S>;
    [Type.RecorderManager.RecorderManagerOnDecibelChange]: onDecibelChange<S>;
    [Type.RecorderManager.RecorderManagerOffDecibelChange]: offDecibelChange<S>;
    [Type.RecorderManager.RecorderManagerOnFrameRecorded]: onFrameRecorded<S>;
    [Type.RecorderManager.RecorderManagerOffFrameRecorded]: offFrameRecorded<S>;
}
/**
 * @name 录音管理器(新)
 */
export interface APIExport<S> {
    [API.getRecorderManager]: getRecorderManager<S>;
    [API.getAvailableAudioSources]: getAvailableAudioSources;
}
/**
 * @description 获取 **全局唯一** 的录音管理器 `RecorderManager`。
 */
interface getRecorderManager<S> {
    type: APIType.Fn;
    fn: () => TypeRef<S, Type.RecorderManager.RecorderManager>;
}
/**
 * @description 录音管理器。
 */
interface RecorderManager<S> {
    type: APIType.Property;
    property: {
        start: TypeRef<S, Type.RecorderManager.RecorderManagerStart>;
        stop: TypeRef<S, Type.RecorderManager.RecorderManagerStop>;
        pause: TypeRef<S, Type.RecorderManager.RecorderManagerPause>;
        resume: TypeRef<S, Type.RecorderManager.RecorderManagerResume>;
        onStart: TypeRef<S, Type.RecorderManager.RecorderManagerOnStart>;
        offStart: TypeRef<S, Type.RecorderManager.RecorderManagerOffStart>;
        onStop: TypeRef<S, Type.RecorderManager.RecorderManagerOnStop>;
        offStop: TypeRef<S, Type.RecorderManager.RecorderManagerOffStop>;
        onPause: TypeRef<S, Type.RecorderManager.RecorderManagerOnPause>;
        offPause: TypeRef<S, Type.RecorderManager.RecorderManagerOffPause>;
        onResume: TypeRef<S, Type.RecorderManager.RecorderManagerOnResume>;
        offResume: TypeRef<S, Type.RecorderManager.RecorderManagerOffResume>;
        onError: TypeRef<S, Type.RecorderManager.RecorderManagerOnError>;
        offError: TypeRef<S, Type.RecorderManager.RecorderManagerOffError>;
        onDecibelChange: TypeRef<S, Type.RecorderManager.RecorderManagerOnDecibelChange>;
        offDecibelChange: TypeRef<S, Type.RecorderManager.RecorderManagerOffDecibelChange>;
        onFrameRecorded: TypeRef<S, Type.RecorderManager.RecorderManagerOnFrameRecorded>;
        offFrameRecorded: TypeRef<S, Type.RecorderManager.RecorderManagerOffFrameRecorded>;
    };
}
/**
 * @description 开始录音。
 */
interface start<S> {
    type: APIType.Sync;
    request: {
        /**
         * @description 录音的时长，单位 ms，最大值 600000（10 分钟）。
         * @default 60000
         */
        duration?: number;
        /**
         * @description 采样率。
         * @default 8000
         */
        sampleRate?: 8000 | 11025 | 12000 | 16000 | 22050 | 24000 | 32000 | 44100 | 48000;
        /**
         * @description 录音通道数。
         * @default 1
         */
        numberOfChannels?: 1 | 2;
        /**
         * @description 编码码率，每种采样率有对应的编码码率范围有效值，设置不合法的采样率或编码码率会导致录音失败，具体对应关系如下表：
         * - 采样率 `8000` 对应 编码码率 `16000 ~ 48000`
         * - 采样率 `11025` 对应 编码码率 `16000 ~ 48000`
         * - 采样率 `12000` 对应 编码码率 `24000 ~ 64000`
         * - 采样率 `16000` 对应 编码码率 `24000 ~ 96000`
         * - 采样率 `22050` 对应 编码码率 `32000 ~ 128000`
         * - 采样率 `24000` 对应 编码码率 `32000 ~ 128000`
         * - 采样率 `32000` 对应 编码码率 `48000 ~ 192000`
         * - 采样率 `44100` 对应 编码码率 `64000 ~ 320000`
         * - 采样率 `48000` 对应 编码码率 `64000 ~ 320000`
         * @default 48000
         */
        encodeBitRate?: number;
        /**
         * @description 音频格式。
         * @default aac
         */
        format?: FlagDef<S, 'aac' | 'mp3', Flag.RecorderManager.RecorderManagerStartFormat>;
        /**
         * @description 指定帧大小，单位 KB。传入 frameSize 后，每录制指定帧大小的内容后，会回调录制的文件内容，不指定则不会回调。暂仅支持 mp3 格式。
         */
        frameSize?: FlagDef<S, number, Flag.RecorderManager.RecorderManagerStartFrameSize>;
        /**
         * @description 指定录音的音频输入源，可通过 `getAvailableAudioSources` 获取当前可用的音频源。
         * @default auto
         */
        audioSource?: string;
        /**
         * @description 检测声音分贝数。
         * @default false
         */
        detectDecibel?: boolean;
    };
    response: void;
}
/**
 * @description 停止录音。
 */
interface stop<S> {
    type: APIType.Fn;
    fn: () => void;
}
/**
 * @description 暂停录音。
 */
interface pause<S> {
    type: APIType.Fn;
    fn: () => void;
}
/**
 * @description 继续录音。
 */
interface resume<S> {
    type: APIType.Fn;
    fn: () => void;
}
/**
 * @description 监听录音开始事件。
 */
interface onStart<S> {
    type: APIType.Event;
    event: void;
}
/**
 * @description 监听录音结束事件。
 */
interface onStop<S> {
    type: APIType.Event;
    event: {
        /**
         * @description 录音文件的临时路径。
         */
        tempFilePath: string;
    };
}
/**
 * @description 监听录音暂停事件。
 */
interface onPause<S> {
    type: APIType.Event;
    event: void;
}
/**
 * @description 监听录音继续事件。
 */
interface onResume<S> {
    type: APIType.Event;
    event: void;
}
/**
 * @description 监听录音错误事件。
 */
interface onError<S> {
    type: APIType.Event;
    event: {
        /**
         * @description 错误信息
         */
        errMsg: string;
    };
}
/**
 * @description 声音分贝变化回调。
 */
interface onDecibelChange<S> {
    type: APIType.Event;
    event: {
        /**
         * @description 分贝数值
         */
        decibel: number;
    };
}
/**
 * @description 移除 `onStart` 事件监听。
 */
interface offStart<S> {
    type: APIType.Fn;
    /**
     * @param callback
     * - 不传递 `callback` 值，则会移除监听**所有**的事件回调。
     * - 传递 `callback` 值，只移除**对应**的 `callback` 事件。
     */
    fn: (callback?: Function) => void;
}
/**
 * @description 移除 `onStop` 事件监听。
 */
interface offStop<S> {
    type: APIType.Fn;
    /**
     * @param callback
     * - 不传递 `callback` 值，则会移除监听**所有**的事件回调。
     * - 传递 `callback` 值，只移除**对应**的 `callback` 事件。
     */
    fn: (callback?: Function) => void;
}
/**
 * @description 移除 `onPause` 事件监听。
 */
interface offPause<S> {
    type: APIType.Fn;
    /**
     * @param callback
     * - 不传递 `callback` 值，则会移除监听**所有**的事件回调。
     * - 传递 `callback` 值，只移除**对应**的 `callback` 事件。
     */
    fn: (callback?: Function) => void;
}
/**
 * @description 移除 `onResume` 事件监听。
 */
interface offResume<S> {
    type: APIType.Fn;
    /**
     * @param callback
     * - 不传递 `callback` 值，则会移除监听**所有**的事件回调。
     * - 传递 `callback` 值，只移除**对应**的 `callback` 事件。
     */
    fn: (callback?: Function) => void;
}
/**
 * @description 移除 `onError` 事件监听。
 */
interface offError<S> {
    type: APIType.Fn;
    /**
     * @param callback
     * - 不传递 `callback` 值，则会移除监听**所有**的事件回调。
     * - 传递 `callback` 值，只移除**对应**的 `callback` 事件。
     */
    fn: (callback?: Function) => void;
}
/**
 * @description 移除 `onDecibelChange` 事件监听。
 */
interface offDecibelChange<S> {
    type: APIType.Fn;
    /**
     * @param callback
     * - 不传递 `callback` 值，则会移除监听**所有**的事件回调。
     * - 传递 `callback` 值，只移除**对应**的 `callback` 事件。
     */
    fn: (callback?: Function) => void;
}
/**
 * @description 监听已录制完制定帧大小的文件时间。如果设置了 `frameSize`，则会回调此事件。
 */
interface onFrameRecorded<S> {
    type: APIType.Event;
    event: {
        /**
         * @description 录音分片数据，iOS 只支持 iOS11 以上系统。
         */
        frameBuffer: FlagDef<S, ArrayBuffer, Flag.RecorderManager.RecorderManagerOnFrameRecordedFrameBuffer>;
        /**
         * @description 当前帧是否正常录音结束前的最后一帧，iOS 只支持 iOS11 以上系统。
         */
        isLastFrame: FlagDef<S, boolean, Flag.RecorderManager.RecorderManagerOnFrameRecordedIsLastFrame>;
    };
}
/**
 * @description 移除 `onFrameRecorded` 事件监听。
 */
interface offFrameRecorded<S> {
    type: APIType.Fn;
    /**
     * @param callback
     * - 不传递 `callback` 值，则会移除监听**所有**的事件回调。
     * - 传递 `callback` 值，只移除**对应**的 `callback` 事件。
     */
    fn: (callback?: Function) => void;
}
/**
 * @description 获取当前支持的音频输入源（需要申请产品包权限）。
 */
interface getAvailableAudioSources {
    type: APIType.Async;
    response: {
        audioSources: `${EAudioSource}`[];
    };
}
declare const enum EAudioSource {
    /**
     * @description 自动设置，默认使用手机麦克风，插上耳麦后自动切换使用耳机麦克风。iOS/Android/devtools
     */
    auto = "auto",
    /**
     * @description 手机麦克风。iOS
     */
    buildInMic = "buildInMic",
    /**
     * @description 耳机麦克风。iOS
     */
    headsetMic = "headsetMic",
    /**
     * @description 麦克风（没插耳麦时是手机麦克风，插耳麦时是耳机麦克风）。Android
     */
    mic = "mic",
    /**
     * @description 摄像头的麦克风。
     */
    camcorder = "camcorder"
}
export {};
//# sourceMappingURL=record-manager.d.ts.map