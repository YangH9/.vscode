import { API, APIDefaultErrorResponse, APIType } from '../../../type';
export interface TypeExport<S> {
}
/**
 * @name 蓝牙从模式
 */
export interface APIExport<S> {
    [API.openBLEPeripheral]: openBLEPeripheral;
    [API.closeBLEPeripheral]: closeBLEPeripheral;
    [API.addPeripheralService]: addPeripheralService;
    [API.removePeripheralService]: removePeripheralService;
    [API.updateCharacteristic]: updateCharacteristic;
    [API.startBLEAdvertising]: startBLEAdvertising;
    [API.stopBLEAdvertising]: stopBLEAdvertising;
    [API.onDeviceConnected]: onDeviceConnected;
    [API.offDeviceConnected]: offDeviceConnected;
    [API.onDeviceDisconnected]: onDeviceDisconnected;
    [API.offDeviceDisconnected]: offDeviceDisconnected;
    [API.onCharacteristicRead]: onCharacteristicRead;
    [API.offCharacteristicRead]: offCharacteristicRead;
    [API.onCharacteristicWrite]: onCharacteristicWrite;
    [API.offCharacteristicWrite]: offCharacteristicWrite;
    [API.onCharacteristicDidSubscribe]: onCharacteristicDidSubscribe;
    [API.offCharacteristicDidSubscribe]: offCharacteristicDidSubscribe;
    [API.onCharacteristicDidUnsubscribe]: onCharacteristicDidUnsubscribe;
    [API.offCharacteristicDidUnsubscribe]: offCharacteristicDidUnsubscribe;
}
/**
 * @description 开启低功耗蓝牙从模式。
 */
interface openBLEPeripheral {
    type: APIType.Async;
    request: {
        /**
         * @description 设备名称。
         * @default Alipay
         */
        deviceName?: string;
    };
    response: {
        /**
         * @description 成功执行回调。
         */
        isSupportPeripheral: boolean;
    };
    error: IBlueBoothSlaveCommonError;
}
/**
 * @description 关闭低功耗蓝牙外设模式，停止所有广播。
 */
interface closeBLEPeripheral {
    type: APIType.Async;
    request: void;
    response: void;
    error: IBlueBoothSlaveCommonError;
}
/**
 * @description 新增一个蓝牙外设服务。
 */
interface addPeripheralService {
    type: APIType.Async;
    request: {
        /**
         * @description 服务 id。
         */
        serviceId: string;
        /**
         * @description 特征值列表。
         */
        characteristics: Characteristics[];
    };
    error: IBlueBoothSlaveCommonError;
}
/**
 * @description 移除一个蓝牙外设服务。
 */
interface removePeripheralService {
    type: APIType.Async;
    request: {
        /**
         * @description 服务 id。
         */
        serviceId: string;
    };
    error: IBlueBoothSlaveCommonError;
}
/**
 * @description 更新一个蓝牙外设特征值，如果 properties 有 notify 就自动 notifyCharacteristic。
 */
interface updateCharacteristic {
    type: APIType.Async;
    request: {
        /**
         * @description 服务 id。
         */
        serviceId: string;
        /**
         * @description 特征值 id。
         */
        characteristicId: string;
        /**
         * @description 读写参数。
         */
        value: string;
    };
    error: IBlueBoothSlaveCommonError;
}
/**
 * @description 开启广播。
 */
interface startBLEAdvertising {
    type: APIType.Async;
    request: {
        /**
         * @description 服务Id。
         */
        serviceId?: string;
        /**
         * @description 是否广播设备名称。
         * @default true
         */
        includeDeviceName?: boolean;
        /**
         * @description 是否广播 serviceId。
         * @default false
         */
        advertiseServiceId?: boolean;
        /**
         * @description 厂商id。
         */
        manufacturerId?: number;
        /**
         * @description 厂商信息。
         */
        manufacturerData?: string;
        /**
         * @description 广播强度。
         */
        powerLevel?: string;
        /**
         * @description 是否可连接。
         */
        connectable?: boolean;
    };
    error: IBlueBoothSlaveCommonError;
}
/**
 * @description 停止广播。
 */
interface stopBLEAdvertising {
    type: APIType.Async;
    error: IBlueBoothSlaveCommonError;
}
/**
 * @description 监听设备连接状态。
 */
interface onDeviceConnected {
    type: APIType.Event;
    event: DeviceInfo4BlueBooth;
}
/**
 * @description 取消监听设备连接状态。
 */
interface offDeviceConnected {
    type: APIType.Fn;
    /**
     * @param callback 监听的回调函数。
     */
    fn: (callback: Function) => void;
}
/**
 * @description 监听设备断开连接状态。
 */
interface onDeviceDisconnected {
    type: APIType.Event;
    event: DeviceInfo4BlueBooth;
}
/**
 * @description 取消监听设备断开连接状态。
 */
interface offDeviceDisconnected {
    type: APIType.Fn;
    /**
     * @param callback 监听的回调函数。
     */
    fn: (callback: Function) => void;
}
/**
 * @description 监听设备读取请求。
 */
interface onCharacteristicRead {
    type: APIType.Event;
    event: CharacteristicEventInfo;
}
/**
 * @description 关闭监听设备读取请求。
 */
interface offCharacteristicRead {
    type: APIType.Fn;
    /**
     * @param callback 监听的回调函数。
     */
    fn: (callback: Function) => void;
}
/**
 * @description 监听设备写入请求。
 */
interface onCharacteristicWrite {
    type: APIType.Event;
    event: CharacteristicEventInfo;
}
/**
 * @description 关闭监听设备写入请求。
 */
interface offCharacteristicWrite {
    type: APIType.Fn;
    /**
     * @param callback 监听的回调函数。
     */
    fn: (callback: Function) => void;
}
/**
 * @description 监听订阅特征值。
 */
interface onCharacteristicDidSubscribe {
    type: APIType.Event;
    event: CharacteristicEventInfo;
}
/**
 * @description 关闭监听订阅特征值。
 */
interface offCharacteristicDidSubscribe {
    type: APIType.Fn;
    /**
     * @param callback 监听的回调函数。
     */
    fn: (callback: Function) => void;
}
/**
 * @description 监听取消订阅特征值。
 */
interface onCharacteristicDidUnsubscribe {
    type: APIType.Event;
    event: CharacteristicEventInfo;
}
/**
 * @description 关闭监听取消订阅特征值。
 */
interface offCharacteristicDidUnsubscribe {
    type: APIType.Fn;
    /**
     * @param callback 监听的回调函数。
     */
    fn: (callback: Function) => void;
}
interface Characteristics {
    /**
     * @description 特征值 id。
     */
    id: string;
    /**
     * @description 特征值属性。
     */
    properties: Array<`${ECharacteristicsProperty}`>;
}
declare const enum ECharacteristicsProperty {
    write = "write",
    'write_no_response' = "write_no_response",
    read = "read",
    notify = "notify"
}
interface CharacteristicEventInfo extends DeviceInfo4BlueBooth {
    /**
     * @description 特征值 Id。
     */
    charcateristicId: number;
    /**
     * @description 服务 Id。
     */
    serviceId: number;
}
interface DeviceInfo4BlueBooth {
    /**
     * @description 连接设备 Id。
     */
    deviceId: string;
}
interface IBlueBoothSlaveCommonError extends APIDefaultErrorResponse {
    /**
     * @description 错误码。
     */
    error: EBlueBoothSlaveErrorCode;
}
declare const enum EBlueBoothSlaveErrorCode {
    /**
     * @description 先调用 openBLEPeripheral。
     */
    '_10000' = 10000,
    /**
     * @description 打开蓝牙开关。
     */
    '_20' = 20,
    /**
     * @description 蓝牙重置中。
     */
    '_13' = 13,
    /**
     * @description 蓝牙未授权，引导用户授权。
     */
    '_14' = 14,
    /**
     * @description 蓝牙不支持。
     */
    '_15' = 15,
    /**
     * @description 位置状态。
     */
    '_16' = 16,
    /**
     * @description 确认 serviceId 是否正确。
     */
    '_10002' = 10002,
    /**
     * @description 确认 characteristicId 是否正确。
     */
    '_10003' = 10003,
    /**
     * @description updateCharacteristic 传入的value 必须是 hex string。
     */
    '_10005' = 10005,
    /**
     * @description 设备不支持蓝牙从模式。
     */
    '_10006' = 10006,
    /**
     * @description 需要看具体的错误码。
     */
    '_10007' = 10007,
    /**
     * @description 确认 characteristicId 是否正确。
     */
    '_10009' = 10009
}
export {};
//# sourceMappingURL=slave.d.ts.map