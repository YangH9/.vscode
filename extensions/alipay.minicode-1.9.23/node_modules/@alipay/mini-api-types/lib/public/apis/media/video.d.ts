import { API, APIType, Flag, FlagDef, Type, TypeRef } from '../../type';
export interface TypeExport<S> {
    [Type.Video.VideoContext]: VideoContext<S>;
    [Type.Video.VideoContextPlay]: play<S>;
    [Type.Video.VideoContextPause]: pause<S>;
    [Type.Video.VideoContextStop]: stop<S>;
    [Type.Video.VideoContextSeek]: seek<S>;
    [Type.Video.VideoContextRequestFullScreen]: requestFullScreen<S>;
    [Type.Video.VideoContextExitFullScreen]: exitFullScreen<S>;
    [Type.Video.VideoContextShowStatusBar]: showStatusBar<S>;
    [Type.Video.VideoContextHideStatusBar]: hideStatusBar<S>;
    [Type.Video.VideoContextMute]: mute<S>;
    [Type.Video.VideoContextPlaybackRate]: playbackRate<S>;
    [Type.Video.VideoContextShowFloatingWindow]: showFloatingWindow<S>;
}
/**
 * @name 视频
 */
export interface APIExport<S> {
    [API.saveVideoToPhotosAlbum]: saveVideoToPhotosAlbum;
    [API.chooseVideo]: chooseVideo<S>;
    [API.createVideoContext]: createVideoContext<S>;
}
/**
 * @description 保存视频到相册。
 */
interface saveVideoToPhotosAlbum {
    type: APIType.Async;
    request: {
        /**
         * @description 视频资源地址，支持在线 `http(s)` 以及 `apFilePath` 格式。
         */
        src: string;
    };
    response: {
        /**
         * @description 是否成功。
         */
        success: boolean;
    };
}
/**
 * @description 拍摄视频或从手机相册中选视频。
 */
interface chooseVideo<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 视频选择的来源。
         * @default ['album','camera']
         */
        sourceType?: `${ESourceType}`[];
        /**
         * @description 是否压缩所选择的视频文件。对iOS总是有压缩的，只是压缩级别不同。
         * @default true
         */
        compressed?: boolean;
        /**
         * @description 拍摄视频最长拍摄时间，单位：秒。
         * @default 60
         */
        maxDuration?: number;
        /**
         * @description 默认拉起的是前置或者后置摄像头。部分 Android 手机下由于系统 ROM 不支持无法生效。
         * @default back
         */
        camera?: `${ECamera}`;
    };
    response: {
        /**
         * @description 选定视频的临时文件路径。
         */
        tempFilePath: FlagDef<S, string, Flag.Video.ChooseVideoResponseTempFilePath>;
        /**
         * @description 选定视频的时间长度。
         */
        duration: number;
        /**
         * @description 选定视频的数据量大小。
         */
        size: number;
        /**
         * @description 返回选定视频的高度。
         */
        height: number;
        /**
         * @description 返回选定视频的宽度。
         */
        width: number;
    };
}
declare const enum ESourceType {
    /**
     * @description 从相册选择视频。
     */
    album = "album",
    /**
     * @description 使用相机拍摄视频。
     */
    camera = "camera"
}
declare const enum ECamera {
    /**
     * @description 默认拉起后置摄像头。
     */
    back = "back",
    /**
     * @description 默认拉起前置摄像头。
     */
    front = "front"
}
/**
 * @description 小程序里内嵌入视频组件，即可上传并播放视频。`createVideoContext` 用于创建并返回一个 `videoId` 上下文对象 `VideoContext`。
 * - 通过 videoContext 可以操作一个 `video` 组件。更多信息，请参见 [视频播放](https://opendocs.alipay.com/mini/introduce/video)。
 * - iOS、Android 支持以下视频封装格式： MP4、mov、m4v、3gp、m3u8、flv。
 * - iOS、Android 支持以下编码格式： H.264、AAC。
 */
interface createVideoContext<S> {
    type: APIType.Fn;
    fn: (videoId: string) => TypeRef<S, Type.Video.VideoContext>;
}
/**
 * @description Video 上下文对象，用于操作对应的 video 组件。
 */
interface VideoContext<S> {
    type: APIType.Property;
    property: {
        play: TypeRef<S, Type.Video.VideoContextPlay>;
        pause: TypeRef<S, Type.Video.VideoContextPause>;
        stop: TypeRef<S, Type.Video.VideoContextStop>;
        seek: TypeRef<S, Type.Video.VideoContextSeek>;
        requestFullScreen: TypeRef<S, Type.Video.VideoContextRequestFullScreen>;
        exitFullScreen: TypeRef<S, Type.Video.VideoContextExitFullScreen>;
        showStatusBar: TypeRef<S, Type.Video.VideoContextShowStatusBar>;
        hideStatusBar: TypeRef<S, Type.Video.VideoContextHideStatusBar>;
        mute: TypeRef<S, Type.Video.VideoContextMute>;
        playbackRate: TypeRef<S, Type.Video.VideoContextPlaybackRate>;
        showFloatingWindow: TypeRef<S, Type.Video.VideoContextShowFloatingWindow>;
    };
}
/**
 * @description 播放。
 */
interface play<S> {
    type: APIType.Fn;
    fn: () => void;
}
/**
 * @description 暂停。
 */
interface pause<S> {
    type: APIType.Fn;
    fn: () => void;
}
/**
 * @description 停止。
 */
interface stop<S> {
    type: APIType.Fn;
    fn: () => void;
}
/**
 * @description 跳转到指定位置。
 */
interface seek<S> {
    type: APIType.Fn;
    /**
     * @param position 跳转到指定位置，单位为秒（s）。
     */
    fn: (position: number) => void;
}
/**
 * @description 进入全屏。
 */
interface requestFullScreen<S> {
    type: APIType.Fn;
    fn: (option: requestFullScreenOption) => void;
}
/**
 * @name requestFullScreen.option
 */
interface requestFullScreenOption {
    /**
     * @description 全屏方向。
     * 有效值如下：
     * - `0` 为正常竖屏。
     * - `90` 为横屏。
     * - `-90` 为反向横屏。
     */
    direction: 0 | 90 | -90;
}
/**
 * @description 退出全屏。
 */
interface exitFullScreen<S> {
    type: APIType.Fn;
    fn: () => void;
}
/**
 * @description 显示状态栏，仅在 iOS 全屏下有效。
 */
interface showStatusBar<S> {
    type: APIType.Fn;
    fn: () => void;
}
/**
 * @description 隐藏状态栏，仅在 iOS 全屏下有效。
 */
interface hideStatusBar<S> {
    type: APIType.Fn;
    fn: () => void;
}
/**
 * @description 切换静音状态。
 */
interface mute<S> {
    type: APIType.Fn;
    /**
     * @param ison 是否静音。
     */
    fn: (ison: boolean) => void;
}
/**
 * @description 设置倍速播放。
 */
interface playbackRate<S> {
    type: APIType.Fn;
    /**
     * @param 倍速，范围 `0.5 <= rate <= 2.0`。
     */
    fn: (rate: number) => void;
}
/**
 * @description 显示/隐藏浮窗，如 `showFloatingWindow(false);`。
 */
interface showFloatingWindow<S> {
    type: APIType.Fn;
    /**
     * @param isShow 是否显示浮窗。
     */
    fn: (isShow: boolean) => void;
}
export {};
//# sourceMappingURL=video.d.ts.map