import { API, APIType } from '../../type';
export interface TypeExport<S> {
}
/**
 * @name 网络及运营商
 */
export interface APIExport<S> {
    [API.getNetworkType]: getNetworkType;
    [API.onNetworkStatusChange]: onNetworkStatusChange;
    [API.offNetworkStatusChange]: offNetworkStatusChange;
    [API.getCarrierName]: getCarrierName;
}
/**
 * @description 获取当前网络状态
 */
interface getNetworkType {
    type: APIType.Async;
    response: {
        /**
         * @description 网络是否可用。
         */
        networkAvailable: boolean;
        /**
         * @description 网络类型值
         */
        networkType: `${ENetworkType}`;
    };
}
declare const enum ENetworkType {
    /**
     * @description 未知
     */
    UNKNOWN = "UNKNOWN",
    /**
     * @description 网络不可用
     */
    NOTREACHABLE = "NOTREACHABLE",
    /**
     * @description WiFi
     */
    WIFI = "WIFI",
    /**
     * @description 3G
     */
    '3G' = "3G",
    /**
     * @description 2G
     */
    '2G' = "2G",
    /**
     * @description 4G
     */
    '4G' = "4G",
    /**
     * @description WWAN
     */
    WWAN = "WWAN"
}
/**
 * @description 开始监听网络状态变化
 */
interface onNetworkStatusChange {
    type: APIType.Event;
    event: {
        /**
         * @description 网络是否可用。
         */
        isConnected: boolean;
        /**
         * @description 网络类型值。
         */
        networkType: `${ENetworkType}`;
    };
}
/**
 * @description 取消监听网络状态变化
 */
interface offNetworkStatusChange {
    type: APIType.Fn;
    /**
     * @param callback
     * - 不传递 `callback` 值，则会移除监听**所有**的事件回调。
     * - 传递 `callback` 值，只移除**对应**的 `callback` 事件。
     */
    fn: (callback?: Function) => void;
}
/**
 * @description 获取运营商信息
 */
interface getCarrierName {
    type: APIType.Async;
    request: void;
    response: {
        /**
         * @description 运营商名称：`中国移动`、`中国联通`、`中国电信`，获取不到则返回空。
         */
        carrierName: string;
    };
}
export {};
//# sourceMappingURL=network.d.ts.map