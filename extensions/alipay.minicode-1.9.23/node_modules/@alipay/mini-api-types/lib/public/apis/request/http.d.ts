import { API, APIDefaultErrorResponse, APIType, Flag, FlagDef } from '../../type';
export interface TypeExport<S> {
}
/**
 * @name Http 请求
 */
export interface APIExport<S> {
    [API.request]: request<S>;
    [API.httpRequest]: httpRequest;
}
/**
 * @description 发起网络请求。
 *
 * **注意事项**：
 * - 目前**只支持 HTTPS 协议**的请求。
 * - **网络请求的 referer Header 不可设置**。其格式固定为 `https://urlhost/{appid}/{version}/page-frame.html`，其中 `{appid}` 为小程序的 `APPID`，`{version}` 为小程序的版本号。
 * - 请预先在 支付宝小程序管理中心 > 小程序详情 > 开发设置 > 开发设置 > 服务器域名白名单 中配置域名白名单。小程序在以下 API 调用时只能与白名单中的域名进行通讯：HTTP 请求（request）、上传文件（uploadFile）。
 * ![image](http://mdn.alipayobjects.com/afts/img/A*xM4NR6VRbfwccJpPkvUyrwBkAa8wAA/original?bz=openpt_doc&t=up10AFIkdB4BgOJNk-44NgAAAABkMK8AAAAA)
 * - 注意：域名添加或删除后仅对新版本生效，老版本仍使用修改前的域名配置。
 */
interface request<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 目标服务器 URL。
         */
        url: string;
        /**
         * @description 设置请求的 HTTP 头对象，该对象里面的 `key` 和 `value` 必须是 `string` 类型。
         * @default {'content-type': 'application/json'}
         */
        headers?: Record<string, string>;
        /**
         * @default GET
         */
        method?: `${EHttpRequestMethod}` | FlagDef<S, 'PUT', Flag.Request.RequestMethodPut> | FlagDef<S, 'DELETE', Flag.Request.RequestMethodDelete>;
        /**
         * @description 传给服务器的数据最终会被转换成 `string` 类型，转换规则如下：
         * - 若方法为 `GET`，会将数据转换成 query string，转换规则：encodeURIComponent(key)=encodeURIComponent(value)&encodeURIComponent(key)=encodeURIComponent(value)...
         * - 若方法为 `POST` 且 `headers['content-type']` 为 `application/json`，会对数据进行 JSON 序列化。
         * - 若方法为 `POST` 且 `headers['content-type']` 为 `application/x-www-form-urlencoded`，会将数据转换成 query string： encodeURIComponent(key)=encodeURIComponent(value)&encodeURIComponent(key)=encodeURIComponent(value)...
         */
        data?: Record<string, unknown> | FlagDef<S, ArrayBuffer, Flag.Request.RequestDataArrayBuffer>;
        /**
         * @description 超时时间，单位 `ms`。
         * @default 30000
         */
        timeout?: number;
        /**
         * @description 期望返回的数据格式。
         * @default JSON
         */
        dataType?: `${EHttpRequestDataType}` | FlagDef<S, 'arraybuffer', Flag.Request.RequestDataTypeArrayBuffer>;
    };
    response: {
        /**
         * @description 响应数据，格式取决于请求时的 `dataType` 参数，如果 `dataType` 值为 `base64` 时，返回的是符合 [data URI scheme](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs) 规范的内容字符串。
         */
        data: string | Record<string, unknown>;
        /**
         * @description 响应码。
         */
        status: number;
        /**
         * @description 响应头。
         */
        headers: Record<string, unknown>;
    };
    error: RequestCommonError;
    return: RequestTask;
}
interface RequestCommonError extends APIDefaultErrorResponse {
    /**
     * @description 错误码。
     */
    error: ERequestError;
}
declare const enum ERequestError {
    /**
     * @description 请求没有结束，就跳转到了另一个页面。
     * - 建议请求完成后再进行页面跳转。
     * - 如需强行做页面跳转操作，建议加上调用 `abort()` 中断请求任务。
     */
    '_1' = 1,
    /**
     * @description 参数错误。
     * - 可能是链接过长导致，建议参数放在 data 中处理。
     * - 建议检查请求时传递的数据是否正常，格式是否正确，可以在请求前打印下入参数据日志。
     */
    '_2' = 2,
    /**
     * @description 无权调用该接口。
     * - 没有配置请求白名单导致。检查请求域名是否添加了域名白名单，请预先在 支付宝小程序管理中心 > 小程序详情 > 开发设置 > 开发设置 > 服务器域名白名单 中配置域名白名单。小程序在以下 API 调用时只能与白名单中的域名进行通讯：HTTP 请求（request）、上传文件（uploadFile）。域名添加或删除后仅对新版本生效，老版本仍使用修改前的域名配置。
     * - 若是账号问题，不能登录管理后台配置，开发版测试可以先在 IDE 右上角点击 详情 > 域名信息 下勾选“忽略 request 域名合法性检查（仅在本地模拟、预览和远程调试时生效）” 或 “ 忽略 Webview 域名合法性检查（仅在本地模拟、预览和远程调试时生效）”，再预览调试请求。
     * - request 请求的地址域名可能写错，导致跟配置的请求白名单域名不一致，请仔细检查。
     * - 注意：新版本上架，一定要添加 服务器域名白名单，否则会出现异常。
     */
    '_11' = 11,
    /**
     * @description 网络异常。
     * - 建议检查网络环境是否正常，服务器是否稳定。
     */
    '_12' = 12,
    /**
     * @description 请求超时。
     * - 建议检查网络环境是否正常，服务器是否正常响应，若请求需要时间长，可适当设置超时时间 timeout。
     */
    '_13' = 13,
    /**
     * @description 解码失败。
     * - 建议检查前后端请求和响应数据格式是否一致；如：返回数据格式 text 与入参 dataType 值 JSON 不一致而导致接口报错，请修改后台返回数据格式为 JSON。
     * - 如果后端是 PHP 或 .net，可检查响应的内容中是否携带了 bom，清除 UTF-8 bom 头。
     * - 若服务端需要返回非 JSON 字符串，则需要把 dataType 参数设置成 text。
     * - 保证证书链完整且证书不过期。
     */
    '_14' = 14,
    /**
     * @description 传参失败，检查参数是否已进行编码。
     */
    '_15' = 15,
    /**
     * @description Http 错误。
     * - 请确认请求 URL 地址在外网是否能正常请求，HTTPS 协议，小程序真机上都是线上环境的正式请求，不能使用局域网本地请求。
     * - 一般如 HTTP 404、500、504 等异常错误，建议打开 IDE 调试器 > Network 可以查看具体的错误信息，然后根据对应 HTTP 错误码对症处理。
     * - SSL 证书不正确导致的，建议更换网站 SSL 证书。
     */
    '_19' = 19,
    /**
     * @description
     * - 请求已被停止/服务端限流：请确认请求服务器是否能正常请求和响应。
     * - 请求 URL 不支持 HTTP，请使用 HTTPS：小程序已经不支持 HTTP 请求，请使用 HTTPS。
     */
    '_20' = 20,
    /**
     * @description 代理请求失败。
     * - 建议检查代理配置是否正确。
     */
    '_23' = 23
}
/**
 * @description 网络请求任务对象，即调用 `request` 后返回的请求对象。
 * 调用示例：
 * ```typescript
 * const task = my.request({ url: 'https://httpbin.org/post' });
 * task.abort();
 * ```
 */
interface RequestTask {
    /**
     * @description 中断请求任务。调用之后会在 `fail` 和 `complete` 内接收到 `{"error": 9, "errorMessage": "request:fail abort"}`。
     */
    abort(): void;
}
/**
 * @description 向指定服务器发起一个 http 请求。目前支付宝端已不再维护。
 */
interface httpRequest {
    type: APIType.Async;
    request: {
        /**
         * @description 目标服务器 URL。
         */
        url: string;
        /**
         * @description 设置请求的 HTTP 头对象，该对象里面的 `key` 和 `value` 必须是 `string` 类型。
         * @default {'content-type': 'application/x-www-form-urlencoded'}
         */
        headers?: Record<string, string>;
        /**
         * @default GET
         */
        method?: `${EHttpRequestMethod}`;
        /**
         * @description 请求参数。
         */
        data?: Record<string, unknown>;
        /**
         * @description 超时时间，单位 `ms`。
         * @default 30000
         */
        timeout?: number;
        /**
         * @description 期望返回的数据格式。
         * @default JSON
         */
        dataType?: `${EHttpRequestDataType}`;
    };
    response: {
        /**
         * @description 响应数据，格式取决于请求时的 `dataType` 参数。
         */
        data: string | Record<string, unknown>;
        /**
         * @description 响应码。
         */
        status: number;
        /**
         * @description 响应头。
         */
        headers: Record<string, unknown>;
    };
    error: RequestCommonError;
}
declare const enum EHttpRequestMethod {
    GET = "GET",
    POST = "POST"
}
declare const enum EHttpRequestDataType {
    json = "json",
    text = "text",
    base64 = "base64"
}
export {};
//# sourceMappingURL=http.d.ts.map