import { API, APIDefaultErrorResponse, APIType, Flag, FlagDef, Type, TypeRef } from '../../../type';
export interface TypeExport<S> {
    [Type.Audio.InnerAudioContext]: InnerAudioContext<S>;
    [Type.Audio.InnerAudioContextPlay]: play;
    [Type.Audio.InnerAudioContextPause]: pause;
    [Type.Audio.InnerAudioContextStop]: stop;
    [Type.Audio.InnerAudioContextSeek]: seek;
    [Type.Audio.InnerAudioContextDestory]: destroy;
    [Type.Audio.InnerAudioContextOnCanplay]: onCanplay;
    [Type.Audio.InnerAudioContextOnPlay]: onPlay;
    [Type.Audio.InnerAudioContextOnPause]: onPause;
    [Type.Audio.InnerAudioContextOnStop]: onStop;
    [Type.Audio.InnerAudioContextOnEnded]: onEnded;
    [Type.Audio.InnerAudioContextOnTimeUpdate]: onTimeUpdate;
    [Type.Audio.InnerAudioContextOnError]: onError;
    [Type.Audio.InnerAudioContextOnWaiting]: onWaiting;
    [Type.Audio.InnerAudioContextOnSeeking]: onSeeking;
    [Type.Audio.InnerAudioContextOnSeeked]: onSeeked;
    [Type.Audio.InnerAudioContextOffCanplay]: offCanplay;
    [Type.Audio.InnerAudioContextOffPlay]: offPlay;
    [Type.Audio.InnerAudioContextOffPause]: offPause;
    [Type.Audio.InnerAudioContextOffStop]: offStop;
    [Type.Audio.InnerAudioContextOffEnded]: offEnded;
    [Type.Audio.InnerAudioContextOffTimeUpdate]: offTimeUpdate;
    [Type.Audio.InnerAudioContextOffError]: offError;
    [Type.Audio.InnerAudioContextOffWaiting]: offWaiting;
    [Type.Audio.InnerAudioContextOffSeeking]: offSeeking;
    [Type.Audio.InnerAudioContextOffSeeked]: offSeeked;
}
/**
 * @name 播放音频(新)
 */
export interface APIExport<S> {
    [API.createInnerAudioContext]: createInnerAudioContext<S>;
}
/**
 * @description 小程序音频实例，创建并返回内部 `audio` 上下文 `InnerAudioContext` 对象。
 */
interface createInnerAudioContext<S> {
    type: APIType.Fn;
    fn: () => TypeRef<S, Type.Audio.InnerAudioContext>;
}
interface InnerAudioContext<S> {
    type: APIType.Property;
    property: {
        /**
         * @description 音频的数据链接，用于直接播放。支持音频格式：aac，mp3
         */
        src: string;
        /**
         * @description 开始播放的位置，单位 s，默认 0
         */
        startTime: number;
        /**
         * @description 是否自动开始播放，默认 false。
         */
        autoplay: boolean;
        /**
         * @descriptio 是否循环播放，默认 false。
         */
        loop: boolean;
        /**
         * @description 是否遵循系统静音开关，当此参数为 false 时，即使用户打开了静音开关，也能继续发出声音，默认值 true (仅 iOS支持)。
         */
        obeyMuteSwitch: boolean;
        /**
         * @description 当前音频的长度（单位：s），只有在当前有合法的 src 时返回。
         */
        duration: number;
        /**
         * @description 当前音频的播放位置（单位：s），只有在当前有合法的 src 时返回，时间不取整。
         */
        currentTime: number;
        /**
         * @description 当前是是否暂停或停止状态，true 表示暂停或停止，false 表示正在播放。
         */
        paused: boolean;
        /**
         * @description 音频缓冲的时间点，仅保证当前播放时间点到此时间点内容已缓冲。。
         */
        buffered: number;
        /**
         * @description 音量。范围 0~1。。
         */
        volume: number;
        /**
         * @description 播放速度。范围 0.5-2.0，默认为 1。（Android 需要 6 及以上版本）。
         */
        playbackRate: number;
        /**
         * @description 标记是否记录当前 url 播放进度到本地存储，记录的可以通过接口查询，以便恢复播放现场；
         */
        isRecordAudioPlayState: FlagDef<S, boolean, Flag.Audio.InnerAudioContextIsRecordAudioPlayState>;
        /**
         * @description 是否跟随系统音量调节播放器音量，默认 false。
         */
        autoAdjustVolume: boolean;
        /**
         * @description 是否允许后台播放，`iOS` 上需要设置 `obeyMuteSwitch` 为 `false` 才能使用。
         * @default false
         */
        supportBackgroundPlay: FlagDef<S, boolean, Flag.Audio.InnerAudioContextSupportBackgroundPlay>;
        play: TypeRef<S, Type.Audio.InnerAudioContextPlay>;
        pause: TypeRef<S, Type.Audio.InnerAudioContextPause>;
        stop: TypeRef<S, Type.Audio.InnerAudioContextStop>;
        seek: TypeRef<S, Type.Audio.InnerAudioContextSeek>;
        destroy: TypeRef<S, Type.Audio.InnerAudioContextDestory>;
        onCanplay: TypeRef<S, Type.Audio.InnerAudioContextOnCanplay>;
        onPlay: TypeRef<S, Type.Audio.InnerAudioContextOnPlay>;
        onPause: TypeRef<S, Type.Audio.InnerAudioContextOnPause>;
        onStop: TypeRef<S, Type.Audio.InnerAudioContextOnStop>;
        onEnded: TypeRef<S, Type.Audio.InnerAudioContextOnEnded>;
        onTimeUpdate: TypeRef<S, Type.Audio.InnerAudioContextOnTimeUpdate>;
        onError: TypeRef<S, Type.Audio.InnerAudioContextOnError>;
        onWaiting: TypeRef<S, Type.Audio.InnerAudioContextOnWaiting>;
        onSeeking: TypeRef<S, Type.Audio.InnerAudioContextOnSeeking>;
        onSeeked: TypeRef<S, Type.Audio.InnerAudioContextOnSeeked>;
        offCanplay: TypeRef<S, Type.Audio.InnerAudioContextOffCanplay>;
        offPlay: TypeRef<S, Type.Audio.InnerAudioContextOffPlay>;
        offPause: TypeRef<S, Type.Audio.InnerAudioContextOffPause>;
        offStop: TypeRef<S, Type.Audio.InnerAudioContextOffStop>;
        offEnded: TypeRef<S, Type.Audio.InnerAudioContextOffEnded>;
        offTimeUpdate: TypeRef<S, Type.Audio.InnerAudioContextOffTimeUpdate>;
        offError: TypeRef<S, Type.Audio.InnerAudioContextOffError>;
        offWaiting: TypeRef<S, Type.Audio.InnerAudioContextOffWaiting>;
        offSeeking: TypeRef<S, Type.Audio.InnerAudioContextOffSeeking>;
        offSeeked: TypeRef<S, Type.Audio.InnerAudioContextOffSeeked>;
    };
}
/**
 * @description 播放。
 */
interface play {
    type: APIType.Fn;
    fn: () => void;
}
/**
 * @description 暂停。
 */
interface pause {
    type: APIType.Fn;
    fn: () => void;
}
/**
 * @description 停止。
 */
interface stop {
    type: APIType.Fn;
    fn: () => void;
}
/**
 * @description 跳转到指定位置，单位 s。精确到小数点后 3 位，即支持 ms 级别精确度。
 */
interface seek {
    type: APIType.Fn;
    /**
     * @param position 指定位置，单位 s。
     */
    fn: (position: number) => void;
}
/**
 * @description 销毁当前实例。
 */
interface destroy {
    type: APIType.Fn;
    fn: () => void;
}
/**
 * @description 音频进入可以播放状态，但不保证后面可以流畅播放。
 */
interface onPlay {
    type: APIType.Event;
    event: void;
}
/**
 * @description 音频播放事件。
 */
interface onCanplay {
    type: APIType.Event;
    event: void;
}
/**
 * @description 音频暂停事件。
 */
interface onStop {
    type: APIType.Event;
    event: void;
}
/**
 * @description 音频停止事件。
 */
interface onPause {
    type: APIType.Event;
    event: void;
}
/**
 * @description 音频自然播放结束事件。
 */
interface onTimeUpdate {
    type: APIType.Event;
    event: void;
}
/**
 * @description 音频播放进度更新事件。
 */
interface onEnded {
    type: APIType.Event;
    event: void;
}
/**
 * @description 音频播放错误事件。
 */
interface onWaiting {
    type: APIType.Event;
    event: void;
}
/**
 * @description 音频加载中事件，当音频因为数据不足，需要停下来加载时会触发。
 */
interface onError {
    type: APIType.Event;
    event: InnerAudioContextError;
}
/**
 * @description 音频进行 seek 操作事件。
 */
interface onSeeked {
    type: APIType.Event;
    event: void;
}
/**
 * @description 音频完成 seek 操作事件。
 */
interface onSeeking {
    type: APIType.Event;
    event: void;
}
/**
 * @description 取消监听 onCanplay 事件。
 */
interface offPlay {
    type: APIType.Fn;
    /**
     * @param callback
     * - 不传递 `callback` 值，则会移除监听**所有**的事件回调。
     * - 传递 `callback` 值，只移除**对应**的 `callback` 事件。
     */
    fn: (callback?: Function) => void;
}
/**
 * @description 取消监听 onPlay 事件。
 */
interface offCanplay {
    type: APIType.Fn;
    /**
     * @param callback
     * - 不传递 `callback` 值，则会移除监听**所有**的事件回调。
     * - 传递 `callback` 值，只移除**对应**的 `callback` 事件。
     */
    fn: (callback?: Function) => void;
}
/**
 * @description 取消监听 onPause 事件。
 */
interface offStop {
    type: APIType.Fn;
    /**
     * @param callback
     * - 不传递 `callback` 值，则会移除监听**所有**的事件回调。
     * - 传递 `callback` 值，只移除**对应**的 `callback` 事件。
     */
    fn: (callback?: Function) => void;
}
/**
 * @description 取消监听 onStop 事件。
 */
interface offPause {
    type: APIType.Fn;
    /**
     * @param callback
     * - 不传递 `callback` 值，则会移除监听**所有**的事件回调。
     * - 传递 `callback` 值，只移除**对应**的 `callback` 事件。
     */
    fn: (callback?: Function) => void;
}
/**
 * @description 取消监听 onEnded 事件。
 */
interface offTimeUpdate {
    type: APIType.Fn;
    /**
     * @param callback
     * - 不传递 `callback` 值，则会移除监听**所有**的事件回调。
     * - 传递 `callback` 值，只移除**对应**的 `callback` 事件。
     */
    fn: (callback?: Function) => void;
}
/**
 * @description 取消监听 onTimeUpdate 事件。
 */
interface offEnded {
    type: APIType.Fn;
    /**
     * @param callback
     * - 不传递 `callback` 值，则会移除监听**所有**的事件回调。
     * - 传递 `callback` 值，只移除**对应**的 `callback` 事件。
     */
    fn: (callback?: Function) => void;
}
/**
 * @description 取消监听 onError 事件。
 */
interface offError {
    type: APIType.Fn;
    /**
     * @param callback
     * - 不传递 `callback` 值，则会移除监听**所有**的事件回调。
     * - 传递 `callback` 值，只移除**对应**的 `callback` 事件。
     */
    fn: (callback?: Function) => void;
}
/**
 * @description 取消监听 onWaiting 事件。
 */
interface offWaiting {
    type: APIType.Fn;
    /**
     * @param callback
     * - 不传递 `callback` 值，则会移除监听**所有**的事件回调。
     * - 传递 `callback` 值，只移除**对应**的 `callback` 事件。
     */
    fn: (callback?: Function) => void;
}
/**
 * @description 取消监听 onSeeking 事件。
 */
interface offSeeking {
    type: APIType.Fn;
    /**
     * @param callback
     * - 不传递 `callback` 值，则会移除监听**所有**的事件回调。
     * - 传递 `callback` 值，只移除**对应**的 `callback` 事件。
     */
    fn: (callback?: Function) => void;
}
/**
 * @description 取消监听 onSeeked 事件。
 */
interface offSeeked {
    type: APIType.Fn;
    /**
     * @param callback
     * - 不传递 `callback` 值，则会移除监听**所有**的事件回调。
     * - 传递 `callback` 值，只移除**对应**的 `callback` 事件。
     */
    fn: (callback?: Function) => void;
}
interface InnerAudioContextError extends APIDefaultErrorResponse {
    /**
     * @description 错误码
     */
    error: EInnerAudioContextErrorCode;
}
declare const enum EInnerAudioContextErrorCode {
    /**
     * @description 系统错误。
     */
    '_10001' = 10001,
    /**
     * @description 网络错误。
     */
    '_10002' = 10002,
    /**
     * @description 文件错误。
     */
    '_10003' = 10003,
    /**
     * @description 格式错误。
     */
    '_10004' = 10004,
    /**
     * @description 未知错误。
     */
    '_-1' = -1
}
export {};
//# sourceMappingURL=inner-audio.d.ts.map