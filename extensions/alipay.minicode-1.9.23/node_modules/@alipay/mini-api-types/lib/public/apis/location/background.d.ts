import { API, APIDefaultErrorResponse, APIType } from '../../type';
export interface TypeExport<S> {
}
/**
 * @name 接口获取
 */
export interface APIExport<S> {
    [API.getLocation]: getLocation;
    [API.reGeoCode]: reGeoCode;
    [API.geoCode]: geoCode;
    [API.setLocatedCity]: setLocatedCity;
}
/**
 * @description 获取用户当前的地理位置信息。
 * - 暂无境外地图数据，在中国内地（不含港澳台）以外的地区可能无法正常调用此 API。
 * - 仅支持高德地图 style 与火星坐标系。
 */
interface getLocation {
    type: APIType.Async;
    request: {
        /**
         * @description 支付宝客户端经纬度定位缓存过期时间，单位为秒。默认 30 秒（s）。使用缓存会加快定位速度，缓存过期会重新定位。
         */
        cacheTimeout?: number;
        /**
         * @description 获取经纬度数据的类型。
         * - `0` 获取经纬度。
         * - `1` 获取经纬度和详细到区县级别的逆地理编码数据。
         * - `2` 获取经纬度和详细到街道级别的逆地理编码数据，不推荐使用。（不推荐使用的原因：精度过高，接口返回的速度会变慢。）
         * - `3` 获取经纬度和详细到POI级别的逆地理编码数据，不推荐使用。（不推荐使用的原因：精度过高，接口返回的速度会变慢。）
         * @default 0
         */
        type?: number;
    };
    response: {
        /**
         * @description 经度。
         */
        longitude: string;
        /**
         * @description 纬度。
         */
        latitude: string;
        /**
         * @description 精确度，单位米 (m)。
         */
        accuracy: string;
        /**
         * @description 水平精确度，单位为米 (m)。
         */
        horizontalAccuracy: string;
        /**
         * @description 国家名称，`type` > 0 才会返回该字段。
         */
        country?: string;
        /**
         * @description 国家 adcode，`type` > 0 才会返回该字段。
         */
        countryCode?: string;
        /**
         * @description 省份名称，`type` > 0 才会返回该字段。
         */
        province?: string;
        /**
         * @description 省份 adcode，`type` > 0 才会返回该字段。
         */
        provinceAdcode?: string;
        /**
         * @description 城市名称，`type` > 0 才会返回该字段。
         */
        city?: string;
        /**
         * @description 城市adcode，`type` > 0 才会返回该字段。
         */
        cityAdcode?: string;
        /**
         * @description 区县名称，`type` > 0 才会返回该字段。
         */
        district?: string;
        /**
         * @description 区县级别的地区代码，`type` > 0 才会返回该字段。
         */
        districtAdcode?: string;
        /**
         * @description 需要街道级别逆地理的才会有的字段，街道门牌信息，`type` > 2 才会返回该字段。
         */
        streetNumber?: streetNumber;
        /**
         * @description 定位点附近的 POI（Point of Interest，兴趣点，在地理信息系统中，一个 POI 可以是一栋房子、一个商铺、一个邮筒、一个公交站等）信息，`type` > 2 才会返回该字段。
         */
        pois?: poi[];
    };
}
/**
 * @description 通过经纬度，获取逆地理信息。
 */
interface reGeoCode {
    type: APIType.Async;
    request: {
        /**
         * @description 业务唯一标示。
         */
        bizType: string;
        /**
         * @description 纬度。
         */
        latitude: number;
        /**
         * @description 经度。
         */
        longitude: number;
        /**
         * @description 逆地理级别。
         * - `1` 代表区县级别。
         * - `2` 代表街道级别。
         * - `3` 代表poi级别。
         * @default 1
         */
        regeoLevel?: number;
    };
    response: {
        /**
         * @description 国家名称。
         */
        country: string;
        /**
         * @description 国家adcode。
         */
        countryCode: string;
        /**
         * @description 省份名称。
         */
        province: string;
        /**
         * @description 省份adcode。
         */
        provinceAdcode: string;
        /**
         * @description 城市名称。
         */
        city: string;
        /**
         * @description 城市adcode。
         */
        cityAdcode: string;
        /**
         * @description 区县名称。
         */
        district: string;
        /**
         * @description 区县adCode。
         */
        districtAdcode: string;
        /**
         * @description 街道信息。
         */
        streetNumber: streetNumber;
        /**
         * @description poi 列表。
         */
        pois: poi;
    };
    error: reGeoCodeError;
}
interface streetNumber {
    /**
     * @description 街道 number。
     */
    number: string;
    /**
     * @description 街道名称。
     */
    street: string;
}
interface poi {
    /**
     * @description poi名称。
     */
    number: string;
    /**
     * @description poi地址。
     */
    address: string;
}
interface reGeoCodeError extends APIDefaultErrorResponse {
    /**
     * @description 错误码。
     * - `1` 缺少 bizType 或经纬度信息。
     * - `2` 逆地理信息为空。
     */
    error: number;
}
/**
 * @description 通过地址信息，获取经纬度信息。
 */
interface geoCode {
    type: APIType.Async;
    request: {
        /**
         * @description 业务唯一标示。
         */
        bizType: string;
        /**
         * @description 地址信息。
         */
        address: string;
    };
    response: {
        /**
         * @description 纬度。
         */
        latitude: number;
        /**
         * @description 经度。
         */
        longitude: number;
    };
}
/**
 * @description 用于修改 `chooseCity` 中的默认定位城市的名称。
 */
interface setLocatedCity {
    type: APIType.Async;
    request: {
        /**
         * @description 当前定位城市 ID，`chooseCity` 接口的 `onLocatedComplete` 返回。
         */
        locatedCityId: string;
        /**
         * @description 当前定位城市的名称。
         */
        locatedCityName: string;
        /**
         * @description 当前定位城市的行政区划代码，不传值时以控件默认拿到的为准。
         */
        locatedCityAdCode?: string;
        /**
         * @description 当前定位城市的拼音，不传值时以控件默认拿到的为准。
         */
        locatedCityPinyin?: string;
    };
    response: {
        /**
         * @description 当前定位城市的名称。
         */
        locatedCityName: string;
    };
    error: setLocatedCityError;
}
interface setLocatedCityError extends APIDefaultErrorResponse {
    /**
     * @description 错误码。
     * - `11` 参数类型错误，请检查参数类型是否正确。
     * - `12` 必填参数为空，请确认参数 `locatedCityId`、`locatedCityName` 是否已填写。
     * - `13` locatedCityId 不匹配，请确保与 `chooseCity` 接口的 `onLocatedComplete` 的 `locatedCityId` 保持一致。
     */
    error: number;
}
export {};
//# sourceMappingURL=background.d.ts.map