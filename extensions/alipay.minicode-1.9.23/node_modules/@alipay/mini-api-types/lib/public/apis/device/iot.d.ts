import { API, APIType } from '../../type';
export interface TypeExport<S> {
}
/**
 * @name IoT
 */
export interface APIExport<S> {
    [API.onIotRawMessage]: onIotRawMessage;
    [API.offIotRawMessage]: offIotRawMessage;
    [API.onIotNotify]: onIotNotify;
    [API.offIotNotify]: offIotNotify;
    [API.sendLanHttpRequest]: sendLanHttpRequest;
    [API.iotCheckService]: iotCheckService;
    [API.ap$iotCheckService]: ap$iotCheckService;
    [API.iotCreateService]: iotCreateService;
    [API.ap$iotCreateService]: ap$iotCreateService;
}
/**
 * @description 第三方的 IoT小程序借助支付宝的 sync 监听来自他们 server 的 push 消息。
 */
interface onIotRawMessage {
    type: APIType.Event;
    event: {
        /**
         * @description 厂商推送的原始消息
         */
        rawMessage: string;
    };
}
/**
 * @description 停止监听 `onIotRawMessage`。
 */
interface offIotRawMessage {
    type: APIType.Fn;
    /**
     * @param callback 对应 `onIotRawMessage` 传入的事件函数
     */
    fn: (callback: Function) => void;
}
/**
 * @description 开始监听智能家居 Sync 消息（内部支付宝智能家居小程序可用）。
 */
interface onIotNotify {
    type: APIType.Event;
    event: {
        /**
         * @description 业务类型，目前只有一个值：`sync`
         */
        bizType: string;
        /**
         * @description 消息内容。
         * - 如果 bizType 为 sync，消息体见 https://yuque.antfin-inc.com/books/share/45b293db-e20a-41f9-a2d7-b0bd959d18ac/ku95pw#DSSYc
         */
        data: string;
    };
}
/**
 * @description 停止监听智能家居 Sync 消息（内部支付宝智能家居小程序可用）。
 */
interface offIotNotify {
    type: APIType.Fn;
    /**
     * @param callback 对应 `onIotNotify` 传入的事件函数
     */
    fn: (callback: Function) => void;
}
/**
 * @description 在局域网内发送 `http` 请求。
 * - `Android` 系统默认不向无法上网的 `WiFi` 路由网络数据。本接口提供 `bindToWifi` 参数解决这一问题。
 */
interface sendLanHttpRequest {
    type: APIType.Async;
    native: 'sendLanHttpRequest';
    request: {
        /**
         * @description 网址，只支持局域网 IP 地址作为域名，不能是本机地址，只支持 `http` 或 `https`
         */
        url: string;
        /**
         * @description 设置请求的 HTTP 头对象，该对象里面的 `key` 和 `value` 必须是 `string` 类型
         * @default {'content-type': 'application/x-www-form-urlencoded'}
         */
        headers?: Record<string, unknown>;
        /**
         * @default GET
         */
        method?: `${ELanHttpRequestMethod}`;
        /**
         * @description * @description 传给服务器的数据最终会被转换成 `string` 类型，转换规则如下：
         * - 若方法为 `GET`，会将数据转换成 query string，转换规则：encodeURIComponent(key)=encodeURIComponent(value)&encodeURIComponent(key)=encodeURIComponent(value)...
         * - 若方法为 `POST` 且 `headers['content-type']` 为 `application/json`，会对数据进行 JSON 序列化。
         * - 若方法为 `POST` 且 `headers['content-type']` 为 `application/x-www-form-urlencoded`，会将数据转换成 query string： encodeURIComponent(key)=encodeURIComponent(value)&encodeURIComponent(key)=encodeURIComponent(value)...
         */
        data?: unknown;
        /**
         * @description 超时时间，单位：`毫秒`，为 `0` 则不超时
         * @default 30000
         */
        timeout?: number;
        /**
         * @description 期望返回的数据格式
         * @default JSON
         */
        dataType?: `${ELanHttpRequestDataType}`;
        /**
         * @description [**Android Only**] 是否绑定到当前 WiFi，Android 默认不向无法上网的 WiFi 发送网络数据。
         * @default false
         */
        bindToWifi?: boolean;
    };
    response: {
        /**
         * @description http 响应码
         */
        status: number;
        /**
         * @description 响应头
         */
        headers: Record<string, unknown>;
        /**
         * @description 响应数据，格式取决于请求时的 `dataType` 参数。
         */
        data: string | Record<string, unknown>;
    };
}
/**
 * @description 查询"智能设备"服务是否存在
 * - 暂不支持个人开发者使用
 * - 权限要求: 商户已经签约iot对应的产品
 */
interface ap$iotCheckService {
    type: APIType.Async;
    native: 'iotCheckService';
    request: {
        /**
         * @description 该服务的id，由协议服务商定义，协议服务商appId范围内唯一即可，用于单个协议服务商唯一标识一个服务(选填，如果不指定则创建默认服务实例)
         */
        serviceId?: string;
    };
    response: {
        /**
         * @description 服务是否存在
         */
        exist: boolean;
        /**
         * @description 业务错误码
         */
        errorCode: string;
        /**
         * @description 业务错误文案
         */
        errorMessage: string;
    };
}
interface iotCheckService {
    type: APIType.Alias;
    native: 'iotCheckService';
    alias: API.ap$iotCheckService;
}
/**
 * @description 创建"智能设备"服务
 * - 暂不支持个人开发者使用
 * - 权限要求: 商户已经签约iot对应的产品
 */
interface ap$iotCreateService {
    type: APIType.Async;
    request: {
        /**
         * @description 该服务的id，由协议服务商定义，协议服务商appId范围内唯一即可，用于单个协议服务商唯一标识一个服务(选填，如果不指定则创建默认服务实例)
         */
        serviceId?: string;
        /**
         * @description 服务名称
         */
        serviceName: string;
        /**
         * @description 服务备注，如果不填，则默认使用协议服务商小程序的名称
         */
        remark?: string;
        /**
         * @description url跳转参数对象，服务创建后用户可点击服务进入协议服务商的小程序(通过形如alipays://platformapi/startapp?appId=xxxxx&key1=value1&key2=value2…)，该字段用于给小程序代入额外业务参数
         */
        urlParams?: string;
    };
    response: {
        /**
         * @description 是否成功
         */
        success: boolean;
        /**
         * @description 业务错误码
         */
        errorCode: string;
        /**
         * @description 业务错误文案
         */
        errorMessage: string;
    };
}
interface iotCreateService {
    type: APIType.Alias;
    native: 'iotCreateService';
    alias: API.ap$iotCreateService;
}
declare const enum ELanHttpRequestMethod {
    GET = "GET",
    POST = "POST"
}
declare const enum ELanHttpRequestDataType {
    JSON = "JSON",
    text = "text"
}
export {};
//# sourceMappingURL=iot.d.ts.map