import { API, APIDefaultErrorResponse, APIType } from '../../type';
export interface TypeExport<S> {
}
/**
 * @name Socket 请求
 */
export interface APIExport<S> {
    [API.connectSocket]: connectSocket;
    [API.sendSocketMessage]: sendSocketMessage;
    [API.closeSocket]: closeSocket;
    [API.onSocketOpen]: onSocketOpen;
    [API.offSocketOpen]: offSocketOpen;
    [API.onSocketMessage]: onSocketMessage;
    [API.offSocketMessage]: offSocketMessage;
    [API.onSocketError]: onSocketError;
    [API.offSocketError]: offSocketError;
    [API.onSocketClose]: onSocketClose;
    [API.offSocketClose]: offSocketClose;
}
/**
 * @description 创建一个 WebSocket 的连接。一个支付宝小程序在一段时间内只能保留一个 WebSocket 连接，如果当前已存在 WebSocket 连接，那么会自动关闭该连接，并重新创建一个新的 WebSocket 连接。
 */
interface connectSocket {
    type: APIType.Async;
    request: {
        /**
         * @description 目标服务器接口地址。
         * - 部分新发布的小程序只支持 wss 协议。
         */
        url: string;
        /**
         * @description 请求的参数。
         */
        data?: Record<string, unknown>;
        /**
         * @description 设置请求的头部。
         */
        header?: Record<string, string>;
    };
    error: WebSocketCommonError;
}
/**
 * @description 通过 WebSocket 连接发送数据，需要先使用 `connectSocket` 建立连接，在调用 `onSocketOpen` 回调之后再发送数据。
 */
interface sendSocketMessage {
    type: APIType.Async;
    request: {
        /**
         * @description 需要发送的内容：普通的文本内容 string 或者经 Base64 编码后的 string。
         */
        data: string;
        /**
         * @description 注意事项：
         * - 如果发送二进制数据，需要将入参数据经 Base64 编码成 string 后赋值 data，同时将此字段设置为 true。
         * - 如果是普通的文本内容 string，则不需要设置此字段。
         */
        isBuffer?: boolean;
    };
    error: WebSocketCommonError;
}
/**
 * @description 关闭 WebSocket 连接。
 */
interface closeSocket {
    type: APIType.Fn;
    fn: () => void;
}
/**
 * @description 监听 WebSocket 连接打开事件。
 */
interface onSocketOpen {
    type: APIType.Event;
    event: Record<string, unknown>;
}
/**
 * @description 取消监听 WebSocket 连接打开事件。
 */
interface offSocketOpen {
    type: APIType.Fn;
    /**
     * @param callback
     * - 不传递 `callback` 值，则会移除监听**所有**的事件回调。
     * - 传递 `callback` 值，只移除**对应**的 `callback` 事件。
     */
    fn: (callback?: Function) => void;
}
/**
 * @description 监听 WebSocket 接受到服务器的消息事件。
 */
interface onSocketMessage {
    type: APIType.Event;
    event: {
        /**
         * @description 服务器返回的消息：普通的文本 string 或者经 base64 编码后的 string。
         */
        data: string | ArrayBuffer;
        /**
         * @description 如果此字段值为 true，data 字段表示接收到的经过了 base64 编码后的 string，否则 data 字段表示接收到的普通 string 文本。
         */
        isBuffer: boolean;
    };
}
/**
 * @description 取消监听 WebSocket 接受到服务器的消息事件。
 */
interface offSocketMessage {
    type: APIType.Fn;
    /**
     * @param callback
     * - 不传递 `callback` 值，则会移除监听**所有**的事件回调。
     * - 传递 `callback` 值，只移除**对应**的 `callback` 事件。
     */
    fn: (callback?: Function) => void;
}
/**
 * @description 监听 WebSocket 错误事件。
 */
interface onSocketError {
    type: APIType.Event;
    event: WebSocketCommonError;
}
/**
 * @description 取消监听 WebSocket 错误。
 */
interface offSocketError {
    type: APIType.Fn;
    /**
     * @param callback
     * - 不传递 `callback` 值，则会移除监听**所有**的事件回调。
     * - 传递 `callback` 值，只移除**对应**的 `callback` 事件。
     */
    fn: (callback?: Function) => void;
}
/**
 * @description 监听 WebSocket 关闭事件。
 */
interface onSocketClose {
    type: APIType.Event;
    event: Record<string, unknown>;
}
/**
 * @description 取消监听 WebSocket 关闭事件。
 */
interface offSocketClose {
    type: APIType.Fn;
    /**
     * @param callback
     * - 不传递 `callback` 值，则会移除监听**所有**的事件回调。
     * - 传递 `callback` 值，只移除**对应**的 `callback` 事件。
     */
    fn: (callback?: Function) => void;
}
interface WebSocketCommonError extends APIDefaultErrorResponse {
    /**
     * @description 错误码。
     */
    error: EWebSocketError;
}
declare const enum EWebSocketError {
    /**
     * @description 未知错误。
     */
    '_1' = 1,
    /**
     * @description 网络连接已经存在。一个支付宝小程序在一段时间内只能保留一个 WebSocket 连接。如果当前已存在 WebSocket 连接，那么会自动关闭该连接，并重新创建一个新的 WebSocket 连接。
     */
    '_2' = 2,
    /**
     * @description URL 参数为空，建议替换 URL 链接。
     */
    '_3' = 3,
    /**
     * @description 无法识别的 URL 格式，建议替换 URL 链接。
     */
    '_4' = 4,
    /**
     * @description URL 必须以 ws 或者 wss 开头，建议替换 URL 链接。
     */
    '_5' = 5,
    /**
     * @description 连接服务器超时。
     */
    '_6' = 6,
    /**
     * @description 服务器返回的 https 证书无效。小程序必须使用 HTTPS/WSS 发起网络请求。请求时系统会对服务器域名使用的 HTTPS 证书进行校验，如果校验失败，则请求不能成功发起。由于系统限制，不同平台对于证书要求的严格程度不同。为了保证小程序的兼容性，建议开发者按照最高标准进行证书配置，并使用相关工具检查现有证书，确保其符合要求。
     */
    '_7' = 7,
    /**
     * @description 服务端返回协议头无效。从 2019 年 5 月开始新创建的小程序，默认强制使用 HTTPS 和 WSS 协议，不再支持 HTTP 和 WS 协议。
     */
    '_8' = 8,
    /**
     * @description WebSocket 请求没有指定 Sec-WebSocket-Protocol 请求头。请指定 Sec-WebSocket-Protocol 请求头。
     */
    '_9' = 9,
    /**
     * @description 网络连接没有打开，无法发送消息。请正常连接服务器后再调用 `sendSocketMessage` 发送数据消息，可通过 `onSocketOpen` 监听事件来判断与服务器建立正确连接。注意：通过 WebSocket 连接发送数据，需要先使用 `connectSocket` 发起连接，在 `onSocketOpen` 回调之后再调用 `sendSocketMessage` 发送数据。
     */
    '_10' = 10,
    /**
     * @description 消息发送失败。
     */
    '_11' = 11,
    /**
     * @description 无法申请更多内存来读取网络数据。
     */
    '_12' = 12
}
export {};
//# sourceMappingURL=socket.d.ts.map