import { API, APIType, Type, TypeRef } from '../../type';
export interface TypeExport<S> {
    [Type.Worker.Instance]: Worker<S>;
    [Type.Worker.onMessage]: WorkerOnMessage<S>;
    [Type.Worker.MessageCallback]: WorkerMessageCallback<S>;
    [Type.Worker.postMessage]: WorkerPostMessage<S>;
    [Type.Worker.terminate]: WorkerTerminate<S>;
}
/**
 * @name 端计算
 */
export interface APIExport<S> {
    [API.createXnnManager]: createXnnManager;
    [API.createWorker]: createWorker<S>;
}
/**
 * @description 用于创建 Xnn 引擎实例。
 */
interface createXnnManager {
    type: APIType.Fn;
    fn: () => unknown;
}
interface createWorker<S> {
    type: APIType.Fn;
    fn: (url: string) => TypeRef<S, Type.Worker.Instance>;
}
interface Worker<S> {
    type: APIType.Property;
    property: {
        onMessage: TypeRef<S, Type.Worker.onMessage>;
        postMessage: TypeRef<S, Type.Worker.postMessage>;
        terminate: TypeRef<S, Type.Worker.terminate>;
    };
}
/**
 * @description 用于设置 Worker 内发送给小程序的消息的监听回调
 */
interface WorkerOnMessage<S> {
    type: APIType.Fn;
    /**
     * @param callback 消息回调
     */
    fn: (callback: TypeRef<S, Type.Worker.MessageCallback>) => void;
}
/**
 * @description Worker 内发送给小程序的消息的监听回调
 */
interface WorkerMessageCallback<S> {
    type: APIType.Fn;
    /**
     * @param message 将要发送的消息
     */
    fn: (message: string) => void;
}
/**
 * @description 用于从小程序向 Worker 发送的消息
 */
interface WorkerPostMessage<S> {
    type: APIType.Fn;
    /**
     * @param message 将要发送的消息
     */
    fn: (message: string) => void;
}
/**
 * @description 用于销毁 Worker
 */
interface WorkerTerminate<S> {
    type: APIType.Fn;
    fn: () => void;
}
export {};
//# sourceMappingURL=compute.d.ts.map