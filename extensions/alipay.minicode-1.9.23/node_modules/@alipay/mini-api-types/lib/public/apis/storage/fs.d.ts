import { API, APIType, Type, TypeRef, APIDefaultErrorResponse, Flag } from '../../type';
export interface TypeExport<S> {
    [Type.FileSystem.Mkdir]: mkdir;
    [Type.FileSystem.MkdirSync]: mkdirSync;
    [Type.FileSystem.AppendFile]: appendFile;
    [Type.FileSystem.AppendFileSync]: appendFileSync;
    [Type.FileSystem.CopyFile]: copyFile;
    [Type.FileSystem.CopyFileSync]: copyFileSync;
    [Type.FileSystem.Readdir]: readdir;
    [Type.FileSystem.ReaddirSync]: readdirSync;
    [Type.FileSystem.RemoveSavedFile]: removeSavedFile;
    [Type.FileSystem.RemoveSavedFileSync]: removeSavedFileSync;
    [Type.FileSystem.Rename]: rename;
    [Type.FileSystem.RenameSync]: renameSync;
    [Type.FileSystem.Stat]: stat<S>;
    [Type.FileSystem.StatSync]: statSync<S>;
    [Type.FileSystem.Unlink]: unlink;
    [Type.FileSystem.UnlinkSync]: unlinkSync;
    [Type.FileSystem.Unzip]: unzip;
    [Type.FileSystem.WriteFile]: writeFile;
    [Type.FileSystem.WriteFileSync]: writeFileSync;
    [Type.FileSystem.GetFileInfo]: getFileInfo;
    [Type.FileSystem.GetFileInfoSync]: getFileInfoSync;
    [Type.FileSystem.ReadFile]: readFile;
    [Type.FileSystem.ReadFileSync]: readFileSync;
    [Type.FileSystem.GetSavedFileList]: getSavedFileList;
    [Type.FileSystem.GetSavedFileListSync]: getSavedFileListSync;
    [Type.FileSystem.SaveFile]: saveFile;
    [Type.FileSystem.SaveFileSync]: saveFileSync;
    [Type.FileSystem.Access]: access;
    [Type.FileSystem.AccessSync]: accessSync;
    [Type.FileSystem.Rmdir]: rmdir;
    [Type.FileSystem.RmdirSync]: rmdirSync;
}
/**
 * @name 文件系统
 */
export interface APIExport<S> {
    [API.getFileSystemManager]: getFileSystemManager<S>;
}
/**
 * @description 获取全局唯一的文件管理器。
 */
interface getFileSystemManager<S> {
    type: APIType.Fn;
    fn: () => FileSystemManager<S>;
}
interface FileSystemManager<S> {
    mkdir: TypeRef<S, Type.FileSystem.Mkdir>;
    mkdirSync: TypeRef<S, Type.FileSystem.MkdirSync>;
    rmdir: TypeRef<S, Type.FileSystem.Rmdir>;
    rmdirSync: TypeRef<S, Type.FileSystem.RmdirSync>;
    readdir: TypeRef<S, Type.FileSystem.Readdir>;
    readdirSync: TypeRef<S, Type.FileSystem.ReaddirSync>;
    copyFile: TypeRef<S, Type.FileSystem.CopyFile>;
    copyFileSync: TypeRef<S, Type.FileSystem.CopyFileSync>;
    writeFile: TypeRef<S, Type.FileSystem.WriteFile>;
    writeFileSync: TypeRef<S, Type.FileSystem.WriteFileSync>;
    readFile: TypeRef<S, Type.FileSystem.ReadFile>;
    readFileSync: TypeRef<S, Type.FileSystem.ReadFileSync>;
    saveFile: TypeRef<S, Type.FileSystem.SaveFile>;
    saveFileSync: TypeRef<S, Type.FileSystem.SaveFileSync>;
    appendFile: TypeRef<S, Type.FileSystem.AppendFile>;
    appendFileSync: TypeRef<S, Type.FileSystem.AppendFileSync>;
    removeSavedFile: TypeRef<S, Type.FileSystem.RemoveSavedFile>;
    removeSavedFileSync: TypeRef<S, Type.FileSystem.RemoveSavedFileSync>;
    getSavedFileList: TypeRef<S, Type.FileSystem.GetSavedFileList, Flag.FileSystem.GetSavedFileList>;
    getSavedFileListSync: TypeRef<S, Type.FileSystem.GetSavedFileListSync, Flag.FileSystem.GetSavedFileListSync>;
    getFileInfo: TypeRef<S, Type.FileSystem.GetFileInfo>;
    getFileInfoSync: TypeRef<S, Type.FileSystem.GetFileInfoSync>;
    access: TypeRef<S, Type.FileSystem.Access>;
    accessSync: TypeRef<S, Type.FileSystem.AccessSync>;
    rename: TypeRef<S, Type.FileSystem.Rename>;
    renameSync: TypeRef<S, Type.FileSystem.RenameSync>;
    unlink: TypeRef<S, Type.FileSystem.Unlink>;
    unlinkSync: TypeRef<S, Type.FileSystem.UnlinkSync>;
    unzip: TypeRef<S, Type.FileSystem.Unzip>;
    stat: TypeRef<S, Type.FileSystem.Stat>;
    statSync: TypeRef<S, Type.FileSystem.StatSync>;
}
/**
 * @description 创建文件夹 的异步接口。
 */
interface mkdir {
    type: APIType.Async;
    request: mkdirOption;
    response: void;
    error: FileSystemCommonError;
}
/**
 * @description 创建文件夹 的同步接口。
 */
interface mkdirSync {
    type: APIType.Sync;
    request: mkdirOption;
    response: void;
    error: FileSystemCommonError;
}
interface mkdirOption {
    /**
     * @description 创建的目录路径。
     */
    dirPath: string;
    /**
     * @description 是否在递归创建该目录的上级目录后再创建该目录。如果对应的上级目录已经存在，则不创建该上级目录。如 dirPath 为 a/b/c/d 且 recursive 为 true，将创建 a 目录，再在 a 目录下创建 b 目录，以此类推直至创建 a/b/c 目录下的 d 目录。
     * @default false
     */
    recursive?: boolean;
}
/**
 * @description 在文件结尾追加内容 的异步接口。
 */
interface appendFile {
    type: APIType.Async;
    request: appendFileOption;
    response: void;
    error: FileSystemCommonError;
}
/**
 * @description 在文件结尾追加内容 的同步接口。
 */
interface appendFileSync {
    type: APIType.Sync;
    request: appendFileOption;
    response: void;
    error: FileSystemCommonError;
}
interface appendFileOption {
    /**
     * @description 要追加内容的文件路径。
     */
    filePath: string;
    /**
     * @description 要追加的文本或二进制数据。
     */
    data: string | ArrayBuffer;
    /**
     * @description 指定写入文件的字符编码。
     * @default utf8
     */
    encoding: `${Encoding}`;
}
/**
 * @description 复制文件 的异步接口。
 */
interface copyFile {
    type: APIType.Async;
    request: copyFileOption;
    response: void;
    error: FileSystemCommonError;
}
/**
 * @description 复制文件 的同步接口。
 */
interface copyFileSync {
    type: APIType.Sync;
    request: copyFileOption;
    response: void;
    error: FileSystemCommonError;
}
interface copyFileOption {
    /**
     * @description 源文件路径，只可以是普通文件。
     */
    srcPath: string;
    /**
     * @description 目标文件路径。
     */
    destPath: string;
}
/**
 * @description 读取目录内文件列表 的异步接口。
 */
interface readdir {
    type: APIType.Async;
    request: readdirOption;
    response: readdirResponse;
    error: FileSystemCommonError;
}
/**
 * @description 读取目录内文件列表 的同步接口。
 */
interface readdirSync {
    type: APIType.Sync;
    request: readdirOption;
    response: readdirResponse;
    error: FileSystemCommonError;
}
interface readdirOption {
    /**
     * @description 目录地址。
     */
    dirPath: string;
}
interface readdirResponse {
    /**
     * @description 指定目录下的文件名数组。
     */
    files: string[];
}
/**
 * @description 删除该小程序下已保存的本地缓存文件 的异步接口。
 */
interface removeSavedFile {
    type: APIType.Async;
    request: removeSavedFileOption;
    response: void;
    error: FileSystemCommonError;
}
/**
 * @description 删除该小程序下已保存的本地缓存文件 的同步接口。
 */
interface removeSavedFileSync {
    type: APIType.Sync;
    request: removeSavedFileOption;
    response: void;
    error: FileSystemCommonError;
}
interface removeSavedFileOption {
    /**
     * @description 需要删除的文件路径。
     */
    filePath: string;
}
/**
 * @description 重命名文件 的异步接口。
 */
interface rename {
    type: APIType.Sync;
    request: renameOption;
    response: void;
    error: FileSystemCommonError;
}
/**
 * @description 重命名文件 的同步接口。
 */
interface renameSync {
    type: APIType.Sync;
    request: renameOption;
    response: void;
    error: FileSystemCommonError;
}
interface renameOption {
    /**
     * @description 源文件路径，可以是普通文件或者目录。
     */
    oldPath: string;
    /**
     * @description 新文件路径。
     */
    newPath: string;
}
/**
 * @description 获取文件 Stat 对象 的异步接口。
 */
interface stat<S> {
    type: APIType.Async;
    request: statOption;
    /**
     * @description 当 recursive 为 false 时，res.stats 是一个 Stats 对象。当 recursive 为 true 且 path 是一个目录的路径时，res.stats 是一个 Object，key 以 path 为根路径的相对路径，value 是该路径对应的 Stats 对象。
     */
    response: statResponse<S>;
    error: FileSystemCommonError;
}
/**
 * @description 获取文件 Stat 对象 的同步接口。
 */
interface statSync<S> {
    type: APIType.Sync;
    request: statOption;
    response: statResponse<S>;
    error: FileSystemCommonError;
}
interface statOption {
    /**
     * @description 文件/目录路径。
     */
    path: string;
    /**
     * @description 是否递归获取目录下的每个文件的 Stats 信息。
     * @default false
     */
    recursive?: boolean;
}
declare type statResponse<S> = Stats | Record<string, Stats>;
/**
 * @description 文件描述对象。
 */
interface Stats {
    /**
     * @description 文件的类型和存取的权限，对应 POSIX `stat.st_mode`。
     */
    mode: string;
    /**
     * @description 文件大小，单位：B，对应 POSIX `stat.st_size`。
     */
    size: number;
    /**
     * @description 文件最近一次被存取或被执行的时间，UNIX 时间戳，对应 POSIX `stat.st_atime`。
     */
    lastAccessedTime: number;
    /**
     * @description 文件最后一次被修改的时间，UNIX 时间戳，对应 POSIX `stat.st_mtime`。
     */
    lastModifiedTime: number;
    /**
     * @description 判断当前文件是否一个普通文件。
     */
    isFile: () => boolean;
    /**
     * @description 判断当前文件是否一个目录。
     */
    isDirectory: () => boolean;
}
/**
 * @description 删除文件 的异步接口。
 */
interface unlink {
    type: APIType.Async;
    request: unlinkOption;
    response: void;
    error: FileSystemCommonError;
}
/**
 * @description 删除文件 的同步接口。
 */
interface unlinkSync {
    type: APIType.Sync;
    request: unlinkOption;
    response: void;
    error: FileSystemCommonError;
}
interface unlinkOption {
    /**
     * @description 需要删除的文件路径。
     */
    filePath: string;
}
/**
 * @description 解压文件 的异步接口。
 */
interface unzip {
    type: APIType.Async;
    request: unzipOption;
    response: void;
    error: FileSystemCommonError;
}
interface unzipOption {
    /**
     * @description 源文件路径，只可以是 zip 压缩文件。
     */
    zipFilePath: string;
    /**
     * @description 目标目录路径。
     */
    targetPath: string;
}
/**
 * @description 写文件 的异步接口。
 */
interface writeFile {
    type: APIType.Async;
    request: writeFileOption;
    response: void;
    error: FileSystemCommonError;
}
/**
 * @description 写文件 的同步接口。
 */
interface writeFileSync {
    type: APIType.Sync;
    request: writeFileOption;
    response: void;
    error: FileSystemCommonError;
}
interface writeFileOption {
    /**
     * @description 要追加内容的文件路径。
     */
    filePath: string;
    /**
     * @description 要追加的文本或二进制数据。
     */
    data: string | ArrayBuffer;
    /**
     * @description 指定写入文件的字符编码。
     * @default utf8
     */
    encoding: `${Encoding}`;
}
/**
 * @description 获取文件信息 的异步接口。
 */
interface getFileInfo {
    type: APIType.Async;
    request: getFileInfoOption;
    response: Record<string, unknown>;
    error: FileSystemCommonError;
}
/**
 * @description 获取文件信息 的同步接口。
 */
interface getFileInfoSync {
    type: APIType.Sync;
    request: getFileInfoOption;
    response: Record<string, unknown>;
    error: FileSystemCommonError;
}
interface getFileInfoOption {
    /**
     * @description 要追加内容的文件路径。
     */
    filePath: string;
    /**
     * @description 文件编码。
     * @default md5
     */
    digestAlgorithm: string;
}
/**
 * @description 读取本地文件内容 的异步接口。
 */
interface readFile {
    type: APIType.Async;
    request: readFileOption;
    response: readFileResponse;
    error: FileSystemCommonError;
}
/**
 * @description 读取本地文件内容 的同步接口。
 */
interface readFileSync {
    type: APIType.Sync;
    request: readFileOption;
    response: readFileResponse;
    error: FileSystemCommonError;
}
interface readFileOption {
    /**
     * @description 文件路径。
     */
    filePath: string;
    /**
     * @description 指定读取文件的字符编码，如果不传 encoding，则以 ArrayBuffer 格式读取文件的二进制内容。
     * @default binary
     */
    encoding?: `${Encoding}`;
}
interface readFileResponse {
    /**
     * @description 文件内容。
     */
    data: string | ArrayBuffer;
    dataType: string;
}
/**
 * @description 获取该小程序下已保存的本地缓存文件列表 的异步接口。
 */
interface getSavedFileList {
    type: APIType.Async;
    request: void;
    response: getSavedFileListResponse;
    error: FileSystemCommonError;
}
/**
 * @description 获取该小程序下已保存的本地缓存文件列表 的同步接口。
 */
interface getSavedFileListSync {
    type: APIType.Sync;
    request: void;
    response: getSavedFileListResponse;
    error: FileSystemCommonError;
}
interface getSavedFileListResponse {
    /**
     * @description 文件内容。
     */
    fileList: File[];
}
interface File {
    /**
     * @description 本地路径。
     */
    filePath: string;
    /**
     * @description 本地文件大小，以字节为单位。
     */
    size: number;
    /**
     * @description 文件保存时的时间戳，从1970/01/01 08:00:0。
     */
    createTime: number;
}
/**
 * @description 保存临时文件到本地 的异步接口。此接口会移动临时文件，因此调用成功后，tempFilePath 将不可用。
 */
interface saveFile {
    type: APIType.Async;
    request: saveFileOption;
    response: saveFileResponse;
    error: FileSystemCommonError;
}
/**
 * @description 保存临时文件到本地 的同步接口。此接口会移动临时文件，因此调用成功后，tempFilePath 将不可用。
 */
interface saveFileSync {
    type: APIType.Sync;
    request: saveFileOption;
    response: saveFileResponse;
    error: FileSystemCommonError;
}
interface saveFileOption {
    /**
     * @description 临时存储文件路径。
     */
    tempFilePath: string;
    /**
     * @description 要存储的文件路径，如果不传，默认存储在小程序缓存目录。
     */
    filePath?: string;
}
interface saveFileResponse {
    /**
     * @description 存储后的文件路径。
     */
    savedFilePath: string;
}
/**
 * @description 判断文件/目录是否存在 的异步接口。
 */
interface access {
    type: APIType.Async;
    request: accessOption;
    response: unknown;
    error: FileSystemCommonError;
}
/**
 * @description 判断文件/目录是否存在 的同步接口。
 */
interface accessSync {
    type: APIType.Sync;
    request: accessOption;
    response: unknown;
    error: FileSystemCommonError;
}
interface accessOption {
    /**
     * @description 文件夹路径或者文件路径。
     */
    path: string;
}
/**
 * @description 删除目录 的异步接口。
 */
interface rmdir {
    type: APIType.Async;
    request: rmdirOption;
    response: void;
    error: FileSystemCommonError;
}
/**
 * @description 删除目录 的同步接口。
 */
interface rmdirSync {
    type: APIType.Sync;
    request: rmdirOption;
    response: void;
    error: FileSystemCommonError;
}
interface rmdirOption {
    /**
     * @description 要删除的目录路径。
     */
    dirPath: string;
    /**
     * @description 是否递归删除目录。如果为 true，则删除该目录和该目录下的所有子目录以及文件。
     * @default false
     */
    recursive?: boolean;
}
declare const enum Encoding {
    'ascii' = "ascii",
    'base64' = "base64",
    'hex' = "hex",
    'binary' = "binary",
    'ucs2' = "ucs2",
    'ucs-2' = "ucs-2",
    'utf16le' = "utf16le",
    'utf-16le' = "utf-16le",
    'utf-8' = "utf-8",
    'utf8' = "utf8",
    'latin1' = "latin1"
}
interface FileSystemCommonError extends APIDefaultErrorResponse {
    /**
     * @description 错误码。
     */
    error: EFileSystemErrorCode;
}
declare const enum EFileSystemErrorCode {
    /**
     * @description 指定文件/目录不存在。
     */
    '_10022' = 10022,
    /**
     * @description 指定路径已经是一个已存在的目录。
     */
    '_10023' = 10023,
    /**
     * @description 指定的路径没有读或者写的权限。
     */
    '_10024' = 10024,
    /**
     * @description 指定路径是一个已经存在的目录。
     */
    '_10025' = 10025,
    /**
     * @description 写入文件单个超过10M或者写入文件夹超过50M。
     */
    '_10028' = 10028,
    /**
     * @description 删除文件失败。
     */
    '_15' = 15,
    /**
     * @description 未知错误。
     */
    '_3' = 3
}
export {};
//# sourceMappingURL=fs.d.ts.map