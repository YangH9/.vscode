"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ETCPSocketError;
(function (ETCPSocketError) {
    /**
     * @description 非法参数，查看 errorMessage。
     */
    ETCPSocketError[ETCPSocketError["_2"] = 2] = "_2";
    /**
     * @description 未知异常，查看 errorMessage。
     */
    ETCPSocketError[ETCPSocketError["_3"] = 3] = "_3";
    /**
     * @description appX 调用JSAPI 会出现的错误。
     */
    ETCPSocketError[ETCPSocketError["_60000"] = 60000] = "_60000";
    /**
     * @description 关闭失败，具体看错误信息。
     */
    ETCPSocketError[ETCPSocketError["_60101"] = 60101] = "_60101";
    /**
     * @description socket 已关闭，不能再调 send, connect 等。
     */
    ETCPSocketError[ETCPSocketError["_60104"] = 60104] = "_60104";
    /**
     * @description send 失败。
     */
    ETCPSocketError[ETCPSocketError["_60105"] = 60105] = "_60105";
    /**
     * @description 连接失败。
     */
    ETCPSocketError[ETCPSocketError["_60200"] = 60200] = "_60200";
    /**
     * @description 发送数据，未连接。
     */
    ETCPSocketError[ETCPSocketError["_60201"] = 60201] = "_60201";
})(ETCPSocketError || (ETCPSocketError = {}));
var EUDPSocketError;
(function (EUDPSocketError) {
    /**
     * @description 非法参数，查看 errorMessage。
     */
    EUDPSocketError[EUDPSocketError["_2"] = 2] = "_2";
    /**
     * @description 未知异常，查看 errorMessage。
     */
    EUDPSocketError[EUDPSocketError["_3"] = 3] = "_3";
    /**
     * @description appX 调用JSAPI 会出现的错误。
     */
    EUDPSocketError[EUDPSocketError["_60000"] = 60000] = "_60000";
    /**
     * @description socket bind 失败，错误原因看 errorMessage。
     */
    EUDPSocketError[EUDPSocketError["_60001"] = 60001] = "_60001";
    /**
     * @description socket create 失败，查看 errorMessage, 多是端口号被占用。
     */
    EUDPSocketError[EUDPSocketError["_60100"] = 60100] = "_60100";
    /**
     * @description 关闭失败，具体看错误信息。
     */
    EUDPSocketError[EUDPSocketError["_60101"] = 60101] = "_60101";
    /**
     * @description 已经绑定的 socket，不能重新绑定到其他端口。
     */
    EUDPSocketError[EUDPSocketError["_60102"] = 60102] = "_60102";
    /**
     * @description 重复的 bind 请求(已经绑定)。
     */
    EUDPSocketError[EUDPSocketError["_60103"] = 60103] = "_60103";
    /**
     * @description socket 已关闭。close 后不能再 send 或 bind。
     */
    EUDPSocketError[EUDPSocketError["_60104"] = 60104] = "_60104";
    /**
     * @description 发送失败，具体看错误信息。
     */
    EUDPSocketError[EUDPSocketError["_60105"] = 60105] = "_60105";
    /**
     * @description bind 之后会接收消息，接收报错，具体看错误信息(iOS 专用)。
     */
    EUDPSocketError[EUDPSocketError["_60202"] = 60202] = "_60202";
    /**
     * @description 开启广播组播模式错误(iOS 专用)。
     */
    EUDPSocketError[EUDPSocketError["_60201"] = 60201] = "_60201";
    /**
     * @description 获取 MulticastLock 失败，将无法收到广播消息(Android 专用)。非致命错误，消息监听继续。
     */
    EUDPSocketError[EUDPSocketError["_68000"] = 68000] = "_68000";
})(EUDPSocketError || (EUDPSocketError = {}));
//# sourceMappingURL=transport.js.map