import { APIType, Type } from '../../../type';
export interface TypeExport<S> {
    [Type.AR.ARContextRotateScene]: rotateScene<S>;
    [Type.AR.ARContextTranslateScene]: translateScene<S>;
    [Type.AR.ARContextScaleScene]: scaleScene<S>;
    [Type.AR.ARContextTransformCoordinate]: transformCoordinate<S>;
    [Type.AR.ARContextHitTest]: hitTest<S>;
}
/**
 * @name 场景控制(图形渲染)
 * @description 本文主要介绍 **图形渲染** 方面的 **场景控制** 相关接口。
 * - 相关接口请先通过 `createARContext` 获取 `ARContext` 后，才能调用 `ARContext` 内的接口。
 */
export interface APIExport<S> {
}
/**
 * @description 【场景控制】旋转场景，针对整个3D场景。
 */
interface rotateScene<S> {
    type: APIType.Async;
    request: RotatePosition;
}
/**
 * @description 【场景控制】移动场景，针对整个3D场景。
 */
interface translateScene<S> {
    type: APIType.Async;
    request: TranslatePosition;
}
/**
 * @description 【场景控制】缩放场景，针对整个3D场景。
 */
interface scaleScene<S> {
    type: APIType.Async;
    request: ScalePosition;
}
/**
 * @description 【场景控制】依据指定标识将世界坐标和屏幕坐标进行互相转换。
 */
interface transformCoordinate<S> {
    type: APIType.Async;
    request: {
        /**
         * @description x轴分量。
         */
        x: number;
        /**
         * @description y轴分量。
         */
        y: number;
        /**
         * @description z轴分量（若 flag 为 false，z 为 depth）。
         */
        z: number;
        /**
         * @description 标识位，ture: 世界坐标 > 屏幕坐标，false: 屏幕坐标 > 世界坐标。
         */
        flag: boolean;
    };
    response: {
        /**
         * @description x轴分量。
         */
        x: number;
        /**
         * @description y轴分量。
         */
        y: number;
        /**
         * @description z轴分量（若 flag 为 true，z 为 depth）。
         */
        z: number;
    };
}
/**
 * @description 【场景控制】检测屏幕点所点击到的动画节点。
 */
interface hitTest<S> {
    type: APIType.Async;
    request: {
        /**
         * @description x轴坐标。
         */
        x: number;
        /**
         * @description y轴坐标。
         */
        y: number;
    };
    response: {
        /**
         * @description 点击到的节点id（如果未点击到节点则返回空）
         */
        nodeId: string;
    };
}
interface TranslatePosition {
    /**
     * @description x轴位移。
     */
    x: number;
    /**
     * @description y轴位移。
     */
    y: number;
    /**
     * @description z轴位移。
     */
    z: number;
}
interface RotatePosition {
    /**
     * @description 旋转向量 roll 值。
     */
    x: number;
    /**
     * @description 旋转向量 yaw 值。
     */
    y: number;
    /**
     * @description 旋转向量 pitch 值。
     */
    z: number;
}
interface ScalePosition {
    /**
     * @description x轴缩放量。
     */
    x: number;
    /**
     * @description y轴缩放量。
     */
    y: number;
    /**
     * @description z轴缩放量。
     */
    z: number;
}
export {};
//# sourceMappingURL=scene.d.ts.map