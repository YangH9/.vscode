import { APIType, Type } from '../../../type';
export interface TypeExport<S> {
    [Type.AR.ARPoseConfig]: poseConfig<S>;
    [Type.AR.ARPoseStatus]: poseStatus<S>;
    [Type.AR.ARPoseStart]: poseStart<S>;
    [Type.AR.ARPoseStop]: poseStop<S>;
    [Type.AR.ARPoseScore]: poseScore<S>;
    [Type.AR.ARContextGetPoseDetectingStatus]: getPoseDetectingStatus<S>;
    [Type.AR.ARContextStartPoseDetecting]: startPoseDetecting<S>;
    [Type.AR.ARContextGetPoseDetectingScore]: getPoseDetectingScore<S>;
    [Type.AR.ARContextStopPoseDetecting]: stopPoseDetecting<S>;
    [Type.AR.ARPoseOnPoseResult]: onPoseResult<S>;
}
/**
 * @name 姿势识别(算法相关)
 * @description 本文主要介绍 **算法方面** 的 **姿势识别** 相关接口。
 * - 相关接口请先通过 `createARContext` 获取 `ARContext` 后，才能调用 `ARContext` 内的接口。
 *
 * 使用流程：
 * - 首先如果需要关键点信息，注册 `onPoseResult` 事件监听
 * - 如果需要配置识别模式，则调用 `AR.pose.config` 配置参数，如无需特殊参数，可跳过此步，使用默认配置。
 * - 通过 `getPoseDetectingStatus(AR.pose.config)` 获取对应配置的识别算法状态，通过状态判断是否可用
 * - `startPoseDetecting(AR.pose.start)`  启动识别
 * - 识别过程中可用 `getPoseDetectingScore(AR.pose.score)` 获取指定姿态得分
 * - 在事件监听中获取姿态关键点信息
 * - 使用完毕后可通过 `stopPoseDetecting(AR.pose.stop)` 关闭姿态算法
 *
 * 更多详细说明请见 [语雀](https://yuque.antfin-inc.com/tiny-tmp/component/lbs2un#QCAEY)
 */
export interface APIExport<S> {
}
/**
 * @description 【姿势识别】注册该事件并且开启姿态识别后，将会在js中响应姿态关键点回调，将姿态的关键点信息传输到 js 中。
 */
interface onPoseResult<S> {
    type: APIType.Event;
    /**
     * @description <br/> 关键点信息的json字符串（拿到后记得 `JSON.parse` 一下），当无姿态关键点是返回空json对象即"{}"，使用时关键点信息时记得检查json对象。
     * - 姿态关键点信息如下图所示：![image](https://intranetproxy.alipay.com/skylark/lark/0/2020/png/161249/1586765972382-1e6f69e7-4245-4218-b708-21e0f1f001d0.png?x-oss-process=image%2Fresize%2Cw_300)
     * - `JSON.parse` 解析后的 json 示例如下：
     * ```json
     * {
     *  "success": "1",
     *  "result": [{
     *    "name": "human_pose_detect",
     *    "type": "cv_common",
     *    "body": [{
     *      "label": "head",
     *      "pos": [
     *        [0.4002415385223241, 0.2032738186064221]
     *      ],
     *      "conf": 0.9985004
     *    }, {
     *      "label": "neck",
     *      "pos": [
     *        [0.399516893469769, 0.2872023809523809]
     *      ],
     *      "conf": 0.9975746
     *    }, {
     *      "label": "right_shoulder",
     *      "pos": [
     *        [0.3405797101449275, 0.3038690430777414]
     *      ],
     *      "conf": 0.9985173
     *    }, {
     *      "label": "right_elbow",
     *      "pos": [
     *        [0.2384057897300536, 0.2485119047619048]
     *      ],
     *      "conf": 0.9972478
     *    }, {
     *      "label": "right_wrist",
     *      "pos": [
     *        [0.285990341849949, 0.1882440476190476]
     *      ],
     *      "conf": 0.998271
     *    }, {
     *      "label": "left_shoulder",
     *      "pos": [
     *        [0.4683574731799139, 0.2973214331127348]
     *      ],
     *      "conf": 0.9993701
     *    }, {
     *      "label": "left_elbow",
     *      "pos": [
     *        [0.5756038721056952, 0.2462797619047619]
     *      ],
     *      "conf": 0.9987083
     *    }, {
     *      "label": "left_wrist",
     *      "pos": [
     *        [0.5210144853822275, 0.1822916666666667]
     *      ],
     *      "conf": 0.9976428
     *    }, {
     *      "label": "right_hip",
     *      "pos": [
     *        [0.3775362392554537, 0.5130952199300131]
     *      ],
     *      "conf": 0.9792699
     *    }, {
     *      "label": "right_knee",
     *      "pos": [
     *        [0.358695652173913, 0.6446428753080822]
     *      ],
     *      "conf": 0.9684109
     *    }, {
     *      "label": "right_ankle",
     *      "pos": [
     *        [0.3072463694401985, 0.8937499636695498]
     *      ],
     *      "conf": 0.9148517
     *    }, {
     *      "label": "left_hip",
     *      "pos": [
     *        [0.4671497437113149, 0.5200892857142857]
     *      ],
     *      "conf": 0.9845095
     *    }, {
     *      "label": "left_knee",
     *      "pos": [
     *        [0.5101449201648361, 0.6499999818347749]
     *      ],
     *      "conf": 0.9538076
     *    }, {
     *      "label": "left_ankle",
     *      "pos": [
     *        [2, -1.142857142857143]
     *      ],
     *      "conf": 0
     *    }, {
     *      "label": "",
     *      "pos": [
     *        [2, -1.142857142857143]
     *      ],
     *      "conf": 0
     *    }, {
     *      "label": "",
     *      "pos": [
     *        [2, -1.142857142857143]
     *      ],
     *      "conf": 0
     *    }, {
     *      "label": "",
     *      "pos": [
     *        [2, -1.142857142857143]
     *      ],
     *      "conf": 0
     *    }, {
     *      "label": "",
     *      "pos": [
     *        [2, -1.142857142857143]
     *      ],
     *      "conf": 0
     *    }]
     *  }]
     * ```
     */
    event: string;
}
/**
 * @description 【姿势识别】配置姿态识别参数。
 */
interface poseConfig<S> {
    type: APIType.Fn;
    /**
     * @param config **json 字符串**(切记 `JSON.stringify` 一下)。
     * 内部字段如下：
     * - `mode`，必填，类型：`number`，识别模式，不同模式适应不同速度场景，影响CPU使用率和帧率。
     * - `modelCloudKey`，可选，类型：`string`，模型key，决定不同算法模型，缺省多人姿态。
     *
     * `mode` 有效值：
     * - `0`：节能模式，根据CPU使用率，控制帧率约为每秒<=10帧，适用于不要求实时性的场景。
     * - `1`：平衡模式，根据CPU使用率，控制帧率约为每秒<=20帧。
     * - `2`：性能模式，不限制CPU使用率，追求最高帧率<=30帧，适用于高实时性的场景。
     *
     * `modelCloudKey` 有效值：
     * - `xNN_TinyApp_Pose_Single`：单人姿态识别。
     * - `xNN_TinyApp_Pose`：多人姿态识别。
     */
    fn: (config: string) => void;
}
/**
 * @description 【姿势识别】获取姿态识别引擎状态。
 */
interface poseStatus<S> {
    type: APIType.Fn;
    fn: () => `${EPoseDetectStatus}`;
}
/**
 * @description 【姿势识别】获取姿态识别引擎状态。
 */
interface getPoseDetectingStatus<S> {
    type: APIType.Async;
    request: void;
    response: {
        /**
         * @description 识别引擎状态。
         */
        status: `${EPoseDetectStatus}`;
    };
}
/**
 * @description 【姿势识别】开始姿态识别。
 */
interface poseStart<S> {
    type: APIType.Fn;
    fn: () => void;
}
/**
 * @description 【姿势识别】开始姿态识别。
 */
interface startPoseDetecting<S> {
    type: APIType.Fn;
    fn: () => void;
}
/**
 * @description 【姿势识别】获取指定姿态的得分。
 */
interface poseScore<S> {
    type: APIType.Fn;
    /**
     * @param poseId 姿态id，具体姿态id请查看 [姿态参考链接](https://yuque.antfin-inc.com/arp/do2trs/ki664x)。
     */
    fn: (poseId: number) => number;
}
/**
 * @description 【姿势识别】获取指定姿态的得分。
 */
interface getPoseDetectingScore<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 姿态id，具体姿态id请查看 [姿态参考链接](https://yuque.antfin-inc.com/arp/do2trs/ki664x)。
         */
        poseId: number;
        /**
         * @description 是否需要返回姿态结果数据，包含关键点信息。
         */
        needResult?: boolean;
    };
    response: {
        /**
         * @description 微笑得分。
         */
        score: number;
        /**
         * @description 姿态结果数据，包含关键点信息，在 `needResult` 为 `true` 时可用。
         */
        result?: unknown;
    };
}
/**
 * @description 【姿势识别】停止姿态识别。
 */
interface poseStop<S> {
    type: APIType.Fn;
    fn: () => void;
}
/**
 * @description 【姿势识别】停止姿态识别。
 */
interface stopPoseDetecting<S> {
    type: APIType.Fn;
    fn: () => void;
}
/**
 * @description 姿势识别检测引擎状态。
 */
export declare const enum EPoseDetectStatus {
    /**
     * @description 设备不支持。
     */
    NotSupport = "NotSupport",
    /**
     * @description 正在初始化。
     */
    Initializing = "Initializing",
    /**
     * @description 准备就绪。
     */
    Ready = "Ready",
    /**
     * @description 未知。
     */
    Unknow = "Unknow"
}
export {};
//# sourceMappingURL=pose-detect.d.ts.map