import { API, APIType, Type, TypeRef } from '../../type';
export interface TypeExport<S> {
    [Type.WebView.WebViewContext]: WebViewContext<S>;
    [Type.WebView.WebViewContextPostMessage]: postMessage;
}
/**
 * @name WebView
 */
export interface APIExport<S> {
    [API.createWebViewContext]: createWebViewContext<S>;
}
/**
 * @description 通过创建 `WebviewContext` 提供从小程序向 `web-view` 发送消息的能力。创建并返回 `web-view` 上下文 `WebViewContext` 对象。
 */
interface createWebViewContext<S> {
    type: APIType.Fn;
    /**
     * @param webviewId 要创建的 `web-view` 所对应的 `id` 属性。
     */
    fn: (webviewId: string) => TypeRef<S, Type.WebView.WebViewContext>;
}
/**
 * @description `WebViewContext` 通过 `webviewId` 跟一个 `web-view` 组件绑定，通过它可以实现一些功能。
 */
interface WebViewContext<S> {
    type: APIType.Property;
    property: {
        postMessage: TypeRef<S, Type.WebView.WebViewContextPostMessage>;
    };
}
/**
 * @description 小程序向 `web-view` 组件发送消息，配合 `web-view.js` 中提供的 `postMessage` 可以实现小程序和 `web-view` 网页的双向通信。
 */
interface postMessage {
    type: APIType.Fn;
    /**
     * @param option 需要发送的数据。
     */
    fn: (option: Record<string, unknown>) => void;
}
export {};
//# sourceMappingURL=webview.d.ts.map