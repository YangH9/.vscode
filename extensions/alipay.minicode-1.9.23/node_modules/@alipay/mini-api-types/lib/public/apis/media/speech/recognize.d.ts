import { API, APIDefaultErrorResponse, APIType, Flag, FlagDef } from '../../../type';
export interface TypeExport<S> {
}
/**
 * @name 语音识别
 */
export interface APIExport<S> {
    [API.isSpeechRecognizeAvailable]: isSpeechRecognizeAvailable<S>;
    [API.startSpeechRecognize]: startSpeechRecognize<S>;
    [API.stopSpeechRecognize]: stopSpeechRecognize;
    [API.onSpeechRecognizeResult]: onSpeechRecognizeResult<S>;
    [API.offSpeechRecognizeResult]: offSpeechRecognizeResult;
    [API.onSpeechRecognizeError]: onSpeechRecognizeError;
    [API.offSpeechRecognizeError]: offSpeechRecognizeError;
}
/**
 * @description **注意**：业务应该提前调用该接口检测服务可用（内部可能会有远程权限校验与资源准备），该接口返回成功后才能调用后续 `startSpeechRecognize` 接口。
 */
interface isSpeechRecognizeAvailable<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 附加扩展字段，用来透传数据。
         */
        extraInfo?: FlagDef<S, string, Flag.Media.IsSpeechRecognizeAvailableExtraInfo>;
    };
    error: SpeechRecognizeError;
}
/**
 * @description 开始实时语音识别。
 * 注意：
 * - 请与 `stopSpeechRecognize()` 接口配对使用
 * - 识别的时长需要业务跟后台沟通后，业务进行控制，目前通用识别业务是60s，特殊业务有特殊时长，可以跟后台进行沟通，申请对应的时长。
 */
interface startSpeechRecognize<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 业务分类。
         * 有效值：
         * - `0` 语音货柜
         * - `1` 电话号码解析
         * - `2` 财富理财顾问
         * - `3` 语音菜品录入
         * - `99` 通用类型
         * @default 99
         */
        speechRecognizeType?: number;
        /**
         * @description 音频格式。
         * 有效值：
         * - `0` opus
         * - `1` PCM
         */
        inputAudioFormat: 0 | 1;
        /**
         * @description 是否保存识别过程中的语音文件。
         * @default false
         */
        encodeAudio?: FlagDef<S, boolean, Flag.Media.StartSpeechRecognizeEncodeAudio>;
        /**
         * @description 附加扩展字段，用来透传数据。
         */
        extraInfo?: FlagDef<S, startSpeechRecognizeExtraInfo<S>, Flag.Media.StartSpeechRecognizeExtraInfo>;
    };
    error: SpeechRecognizeError;
}
/**
 * @name startSpeechRecognize.extraInfo
 */
interface startSpeechRecognizeExtraInfo<S> {
    /**
     * @description 是否开启分贝回调。
     * @default false
     */
    enableDBCallback?: FlagDef<S, boolean, Flag.Media.StartSpeechRecognizeExtraInfoEnableDBCallback>;
}
/**
 * @description 停止实时语音识别。
 */
interface stopSpeechRecognize {
    type: APIType.Async;
    request: void;
    error: SpeechRecognizeError;
}
/**
 * @description 语音识别结果监听。
 */
interface onSpeechRecognizeResult<S> {
    type: APIType.Event;
    event: {
        /**
         * @description 识别结果。
         */
        result: string;
        /**
         * @description 识别id。
         */
        speechId: string;
        /**
         * @description 是否识别结束。
         */
        isFinalResult: boolean;
        /**
         * @description 识别过程中录制的音频。
         */
        tempAudioPath: FlagDef<S, string, Flag.Media.OnSpeechRecognizeResultTempAudioPath>;
    };
}
/**
 * @description 取消语音识别结果监听。
 */
interface offSpeechRecognizeResult {
    type: APIType.Fn;
    /**
     * @param callback
     * - 不传递 `callback` 值，则会移除监听**所有**的事件回调。
     * - 传递 `callback` 值，只移除**对应**的 `callback` 事件。
     */
    fn: (callback?: Function) => void;
}
/**
 * @description 语音识别错误监听。
 */
interface onSpeechRecognizeError {
    type: APIType.Event;
    event: {
        error: ESpeechRecognizeErrorCode;
        /**
         * @description 识别id。
         */
        speechId: string;
    };
}
/**
 * @description 取消语音识别错误监听。
 */
interface offSpeechRecognizeError {
    type: APIType.Fn;
    /**
     * @param callback
     * - 不传递 `callback` 值，则会移除监听**所有**的事件回调。
     * - 传递 `callback` 值，只移除**对应**的 `callback` 事件。
     */
    fn: (callback?: Function) => void;
}
interface SpeechRecognizeError extends APIDefaultErrorResponse {
    /**
     * @description 错误码。
     */
    error: ESpeechRecognizeErrorCode;
}
declare const enum ESpeechRecognizeErrorCode {
    /**
     * @description 【通用错误码】成功
     */
    ERROR_NONE = 0,
    /**
     * @description 【通用错误码】输入参数错误
     */
    ERROR_INVALID_PARAMS = 1,
    /**
     * @description 【语音识别错误】签名错误/没有签名
     */
    SERVICE_ERROR_NO_SIGNATURE = 10,
    /**
     * @description 【语音识别错误】无效参数
     */
    SERVICE_ERROR_PARAM_INVALID = 12,
    /**
     * @description 【语音识别错误】未知错误
     */
    START_ERROR_UNKNOWN = 21,
    /**
     * @description 【语音识别错误】状态无效，正在识别，请先停止
     */
    START_ERROR_STATE_INVALID = 22,
    /**
     * @description 【语音识别错误】识别错误
     */
    RECOGNIZE_ERROR_SERVER_RECOGNIZE_FAILED = 30,
    /**
     * @description 【语音识别错误】识别后台错误
     */
    RECOGNIZE_ERROR_SERVER_INVALID = 31,
    /**
     * @description 【语音识别错误】网络错误
     */
    RECOGNIZE_ERROR_NET_ERROR = 32,
    /**
     * @description 【语音识别错误】音频opus编码错误
     */
    RECOGNIZE_ERROR_RECORD_ERROR = 33,
    /**
     * @description 【语音识别错误】其他错误
     */
    RECOGNIZE_ERROR_OTHER_ERROR = 34,
    /**
     * @description 【语音识别错误】取消识别
     */
    RECOGNIZE_ERROR_CANCEL = 38,
    /**
     * @description 【语音识别错误】用户静音
     */
    RECOGNIZE_ERROR_VAD_FAILED = 40,
    /**
     * @description 【语音识别错误】识别超时
     */
    RECOGNIZE_ERROR_SESSION_TIMEOUT = 41,
    /**
     * @description 【音频采集错误】采集失败
     */
    ERROR_AUDIO_CAPTURE = 71,
    /**
     * @description 【音频采集错误】无音频采集权限
     */
    ERROR_AUDIO_PERMISSION = 72,
    /**
     * @description 【音频采集错误】初始化失败
     */
    ERROR_AUDIO_INIT = 73,
    /**
     * @description 【音频采集错误】音频设备占用
     */
    ERROR_AUDIO_IN_USING = 74,
    /**
     * @description 【音频编码错误】编码失败
     */
    ENCODE_ERROR_ENCODING = 91,
    /**
     * @description 【音频编码错误】关闭失败
     */
    ENCODE_ERROR_ENCODE_CLOSE = 92,
    /**
     * @description 【音频编码错误】写文件失败
     */
    ENCODE_ERROR_WRITE_FILE = 93,
    /**
     * @description 【音频编码错误】长度非法
     */
    ENCODE_ERROR_LENGTH_LESS_ZERO = 94,
    /**
     * @description 【音频编码错误】参数设置非法
     */
    ENCODE_ERROR_OPEN_PARAM = 95,
    /**
     * @description 【音频编码错误】未知错误
     */
    ENCODE_ERROR_OPEN_UNKNOW = 96,
    /**
     * @description 【音频编码错误】结束失败
     */
    ENCODE_ERROR_END_ENCODER = 97
}
export {};
//# sourceMappingURL=recognize.d.ts.map