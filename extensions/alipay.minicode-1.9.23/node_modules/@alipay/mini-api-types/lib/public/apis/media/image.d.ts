import { API, APIDefaultErrorResponse, APIType, Flag, FlagDef } from '../../type';
export interface TypeExport<S> {
}
/**
 * @name 图片
 */
export interface APIExport<S> {
    [API.chooseImage]: chooseImage;
    [API.saveImageToPhotosAlbum]: saveImageToPhotosAlbum;
    [API.previewImage]: previewImage<S>;
    [API.saveImage]: saveImage<S>;
    [API.getImageInfo]: getImageInfo;
    [API.compressImage]: compressImage;
    [API.generateImageFromCode]: generateImageFromCode;
}
declare const enum EImageChoosenSizeType {
    /**
     * @description 原图
     */
    original = "original",
    /**
     * @description 压缩图
     */
    compressed = "compressed"
}
declare const enum EImageChoosenSourceType {
    /**
     * @description 拍照
     */
    camera = "camera",
    /**
     * @description 相册选取
     */
    album = "album"
}
interface IImageChoosenTempFile {
    /**
     * @description 本地临时文件路径（本地路径）。
     */
    path: string;
    /**
     * @description 本地临时文件大小，单位为 B。
     */
    size: number;
}
/**
 * @description 拍照或从本地相册中选择图片
 */
interface chooseImage {
    type: APIType.Async;
    request: {
        /**
         * @description 最大可选照片数，默认为 1 张
         * @default 1
         */
        count?: number;
        /**
         * @description 图片类型。
         * @default ["original","compressed"]
         */
        sizeType?: `${EImageChoosenSizeType}`[];
        /**
         * @description 图片类型。
         * @default ["camera","album"]
         */
        sourceType?: `${EImageChoosenSourceType}`[];
    };
    response: {
        /**
         * @description 图片的路径数组。
         */
        apFilePaths: string[];
        /**
         * @description 图片的本地临时文件列表。
         */
        tempFiles: IImageChoosenTempFile[];
    };
}
/**
 * @description 保存在线图片到手机相册。
 */
interface saveImageToPhotosAlbum {
    type: APIType.Async;
    request: {
        /**
         * @description 要保存的图片链接。
         */
        filePath: string;
    };
    error: saveImageToPhotosAlbumError;
}
interface saveImageToPhotosAlbumError extends APIDefaultErrorResponse {
    /**
     * @description 错误码。
     */
    error: saveImageToPhotosAlbumErrorCode;
}
declare const enum saveImageToPhotosAlbumErrorCode {
    /**
     * @description 参数无效，没有传 url 参数
     */
    '_2' = 2,
    /**
     * @description 没有开启相册权限(ios only)
     */
    '_15' = 15,
    /**
     * @description 手机相册存储空间不足(ios only)
     */
    '_16' = 16,
    /**
     * @description 保存图片过程中的其他错误
     */
    '_17' = 17
}
/**
 * @description 预览图片。
 * - 不支持本地图片路径。
 */
interface previewImage<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 要预览的图片 HTTP 链接列表。支持网络 url，apfilePath。
         */
        urls: string[];
        /**
         * @description 当前显示图片索引。
         * @default 0
         */
        current?: number;
        /**
         * @description 照片支持长按下载。
         */
        enablesavephoto?: FlagDef<S, boolean, Flag.Image.PreviewImageEnablesavephoto>;
        /**
         * @description 是否在右下角显示下载入口。
         */
        enableShowPhotoDownload?: FlagDef<S, boolean, Flag.Image.PreviewImageEnableShowPhotoDownload>;
    };
}
/**
 * @description 将在线图片保存至本地相册。
 * - 目前 `saveImage` 暂不支持保存 `Base64` 的图片。
 */
interface saveImage<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 要保存的图片链接。
         */
        url: string;
        /**
         * @description 是否显示图片操作菜单。
         * @default true
         */
        showActionSheet?: FlagDef<S, boolean, Flag.Image.SaveImageShowActionSheet>;
    };
}
/**
 * @description 获取图片信息。
 */
interface getImageInfo {
    type: APIType.Async;
    request: {
        /**
         * @description 图片路径，目前支持：网络图片路径、apFilePath 路径、相对路径。
         */
        src: string;
    };
    response: {
        /**
         * @description 图片宽度（单位为 px）。
         */
        width: number;
        /**
         * @description 图片高度（单位为 px）。
         */
        height: number;
        /**
         * @description 图片本地路径。
         */
        path: string;
        /**
         * @description 返回图片的方向，有效值见下表。
         */
        orientation: `${EOrientation}`;
        /**
         * @description 返回图片的格式。
         */
        type: string;
    };
}
/**
 * @description 生成二维码，由客户端生成，速度快且不耗流量
 */
interface generateImageFromCode {
    type: APIType.Async;
    request: {
        /**
         * @description 二维码内容
         */
        code: string;
        /**
         * @description 输出码的格式，当前只支持QRCODE(二维码)。
         */
        format: 'QRCODE';
        /**
         * @description 生成图片的宽度，单位是px
         */
        width: number;
        /**
         * @description 纠错等级。分为4个等级：(0:L, 1:M, 2:Q, 3:H)，越高越好。L、M等级不建议使用。默认值为 H。
         * @default "H"
         */
        correctLevel: `${ECorrectLevel}`;
        /**
         * @description 返回图片的方向，有效值见下表。
         */
        orientation: `${EOrientation}`;
    };
    response: {
        /**
         * @description base64 编码的二维码图像
         */
        image: string;
    };
}
/**
 * @description 压缩图片
 */
interface compressImage {
    type: APIType.Async;
    request: {
        /**
         * @description 要压缩的图片路径数组。
         */
        apFilePaths: string[];
        /**
         * @description 压缩级别。
         * 有效值：
         * - `0` 低质量
         * - `1` 中等质量
         * - `2` 高质量
         * - `3` 不压缩
         * - `4` 根据网络适应
         * @default 4
         */
        compressLevel?: number;
    };
    response: {
        /**
         * @description 压缩后的图片路径数组。
         */
        apFilePaths: string[];
    };
}
declare const enum ECorrectLevel {
    O = "O",
    M = "M",
    L = "L",
    /**
     * @description 默认值, 最高质量
     */
    H = "H"
}
declare const enum EOrientation {
    /**
     * @description 默认。
     */
    up = "up",
    /**
     * @description 180 度旋转。
     */
    down = "down",
    /**
     * @description 逆时针旋转 90 度。
     */
    left = "left",
    /**
     * @description 顺时针旋转 90 度。
     */
    right = "right",
    /**
     * @description 同 up，但水平翻转。
     */
    'up-mirrored' = "up-mirrored",
    /**
     * @description 同 down，但水平翻转。
     */
    'down-mirrored' = "down-mirrored",
    /**
     * @description 同 left，但垂直翻转。
     */
    'left-mirrored' = "left-mirrored",
    /**
     * @description 同 right，但垂直翻转。
     */
    'right-mirrored' = "right-mirrored"
}
export {};
//# sourceMappingURL=image.d.ts.map