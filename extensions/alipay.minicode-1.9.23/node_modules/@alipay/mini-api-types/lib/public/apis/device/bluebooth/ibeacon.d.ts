import { API, APIDefaultErrorResponse, APIType } from '../../../type';
export interface TypeExport<S> {
}
/**
 * @name iBeacon
 */
export interface APIExport<S> {
    [API.startBeaconDiscovery]: startBeaconDiscovery;
    [API.stopBeaconDiscovery]: stopBeaconDiscovery;
    [API.getBeacons]: getBeacons;
    [API.onBeaconUpdate]: onBeaconUpdate;
    [API.offBeaconUpdate]: offBeaconUpdate;
    [API.onBeaconServiceChange]: onBeaconServiceChange;
    [API.offBeaconServiceChange]: offBeaconServiceChange;
}
/**
 * @description 开始搜索附近的 iBeacon 设备。
 */
interface startBeaconDiscovery {
    type: APIType.Async;
    request: {
        /**
         * @description 目标 iBeacon 设备广播的 UUIDs。
         * uuids[0]、uuids[1] 为目标 iBeacon 的 UUID，可从硬件厂商获取，如果为空，无法搜索到 iBeacon。
         * iBeacon 需要位置权限。iOS 11 及以后版本的手机，通过手机控制中心的快捷开关打开蓝牙，无法使用 iBeacon，需要在 设置 > 蓝牙 中开启蓝牙，方可使用。
         */
        uuids: string[];
    };
    error: IBeaconCommonError;
}
/**
 * @description 停止搜索附近的 iBeacon 设备。
 */
interface stopBeaconDiscovery {
    type: APIType.Async;
    request: void;
    error: IBeaconCommonError;
}
/**
 * @description 获取已经搜索到的 iBeacon 设备。
 */
interface getBeacons {
    type: APIType.Async;
    response: {
        /**
         * @description iBeacon 设备列表。
         */
        beacons: IBeaconDevice[];
    };
    error: IBeaconCommonError;
}
/**
 * @description 监听 iBeacon 设备的更新事件。
 */
interface onBeaconUpdate {
    type: APIType.Async;
    request: void;
    response: {
        /**
         * @description 当前搜寻到的所有 iBeacon 设备列表。
         */
        beacons: IBeaconDevice[];
    };
    error: IBeaconCommonError;
}
/**
 * @description 取消监听 iBeacon 设备的更新事件。
 */
interface offBeaconUpdate {
    type: APIType.Fn;
    /**
     * @param callback
     * - 不传递 `callback` 值，则会移除监听**所有**的事件回调。
     * - 传递 `callback` 值，只移除**对应**的 `callback` 事件。
     */
    fn: (callback?: Function) => void;
}
/**
 * @description 监听 iBeacon 服务的状态变化。
 * - iOS 11 及之后版本 "控制中心蓝牙开关" 和 "设置 > 蓝牙 > 开关" 分离，控制中心蓝牙开关不再影响 iBeacon 使用，但是 `onBeaconServiceChange` 事件仍然会回调，建议 iOS 11 之后版本调用该事件回调后，继续等待 `onBeaconUpdate` 以确认是否提示用户开启蓝牙。
 */
interface onBeaconServiceChange {
    type: APIType.Event;
    event: {
        /**
         * @description 服务目前是否可用。
         */
        available: boolean;
        /**
         * @description 目前是否处于搜索状态。
         */
        discovering: boolean;
    };
    error: IBeaconCommonError;
}
/**
 * @description 取消监听 iBeacon 服务的状态变化。
 */
interface offBeaconServiceChange {
    type: APIType.Fn;
    /**
     * @param callback
     * - 不传递 `callback` 值，则会移除监听**所有**的事件回调。
     * - 传递 `callback` 值，只移除**对应**的 `callback` 事件。
     */
    fn: (callback?: Function) => void;
}
interface IBeaconDevice {
    /**
     * @description iBeacon 设备广播的 UUID。
     */
    uuid: string;
    /**
     * @description iBeacon 设备的主 ID。
     */
    major: string;
    /**
     * @description iBeacon 设备的次 ID。
     */
    minor: string;
    /**
     * @description 表示设备距离的枚举值（0-3 分别代表：未知、极近、近、远）。
     */
    proximity: number;
    /**
     * @description iBeacon 设备的距离。
     */
    accuracy: string;
    /**
     * @description iBeacon 信号强度。
     */
    rssi: string;
}
interface IBeaconCommonError extends APIDefaultErrorResponse {
    /**
     * @description 错误码。
     */
    error: EIBeaconErrorCode;
}
declare const enum EIBeaconErrorCode {
    /**
     * @description 系统或设备不支持。
     */
    '_11000' = 11000,
    /**
     * @description 蓝牙服务不可用。
     */
    '_11001' = 11001,
    /**
     * @description 位置服务不可用。
     */
    '_11002' = 11002,
    /**
     * @description 位置服务权限禁止。
     */
    '_11003' = 11003,
    /**
     * @description 已经开始搜索。
     */
    '_11004' = 11004,
    /**
     * @description UUID 格式错误。
     */
    '_11006' = 11006,
    /**
     * @description 参数错误，UUID 数组为空。
     */
    '_11008' = 11008
}
export {};
//# sourceMappingURL=ibeacon.d.ts.map