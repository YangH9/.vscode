import { API, APIType, Flag, FlagDef } from '../../type';
export interface TypeExport<S> {
}
/**
 * @name 收藏
 */
export interface APIExport<S> {
    [API.isFavorite]: isFavorite<S>;
    [API.addToFavorite]: addToFavorite<S>;
    [API.removeFromFavorite]: removeFromFavorite<S>;
    [API.onFavorite]: onFavorite;
    [API.offFavorite]: offFavorite;
    [API.onInternalFavorite]: onInternalFavorite;
    [API.offInternalFavorite]: offInternalFavorite;
    [API.isCollected]: isCollected;
    [API.canFavorite]: canFavorite;
    [API.hideFavoriteMenu]: hideFavoriteMenu;
    [API.hideAllFavoriteMenu]: hideAllFavoriteMenu;
}
/**
 * @description 查询当前小程序是否被收藏。
 */
interface isFavorite<S> {
    type: APIType.Async;
    response: {
        /**
         * @description 当前小程序是否收藏，`true` 为已收藏，`false` 为未收藏。
         */
        isFavorite: boolean;
    };
}
/**
 * @description 将当前小程序添加到收藏。
 */
interface addToFavorite<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 业务类型。
         */
        bizType?: FlagDef<S, string, Flag.Favorite.AddToFavoriteBizType>;
        /**
         * @description 拓展信息。
         */
        extraInfo?: FlagDef<S, Record<string, unknown>, Flag.Favorite.AddToFavoriteExtraInfo>;
    };
    response: {
        /**
         * @description 添加收藏成功与否，`true` 为添加收藏成功，`false` 为添加收藏失败。
         */
        success: boolean;
    };
}
/**
 * @description 将当前小程序从收藏中移除。
 */
interface removeFromFavorite<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 业务类型。
         */
        bizType?: FlagDef<S, string, Flag.Favorite.RemoveFromFavoriteBizType>;
        /**
         * @description 拓展信息。
         */
        extraInfo?: FlagDef<S, Record<string, unknown>, Flag.Favorite.RemoveFromFavoriteExtraInfo>;
    };
    response: {
        /**
         * @description 取消收藏是否成功，`true` 为添加收藏成功，`false` 为添加收藏失败。
         */
        success: boolean;
    };
}
/**
 * @description 监听添加/取消收藏事件。
 */
interface onFavorite {
    type: APIType.Event;
    event: {
        /**
         * @description 触发事件的行为是否成功，`true` 为成功，`false` 为失败。
         */
        success: boolean;
        /**
         * @description 触发事件的行为，目前就添加收藏和取消收藏两种行为。
         */
        action: `${EOnFavoriteAction}`;
    };
}
declare const enum EOnFavoriteAction {
    /**
     * @description 添加到收藏。
     */
    addToFavorite = "addToFavorite",
    /**
     * @description 取消收藏。
     */
    removeFromFavorite = "removeFromFavorite"
}
/**
 * @description 取消监听添加/取消收藏事件。
 */
interface offFavorite {
    type: APIType.Fn;
    /**
     * @param callback
     * - 不传递 `callback` 值，则会移除监听**所有**的事件回调。
     * - 传递 `callback` 值，只移除**对应**的 `callback` 事件。
     */
    fn: (callback?: Function) => void;
}
/**
 * @description 小程序添加收藏、取消收藏的结果监听。开发者可以通过此接口进行添加监听，小程序保活期间可以收到通知，但是保活的小程序接收到通知后由于不在主线程，不建议接收到通知后进行UI操作。
 * - 定向开放，无特殊原因不给权限！
 */
interface onInternalFavorite {
    type: APIType.Event;
    event: {
        /**
         * @description 触发事件的行为是否成功，`true` 为成功，`false` 为失败。
         */
        success: boolean;
        /**
         * @description 触发事件的行为，目前就添加收藏和取消收藏两种行为。
         */
        action: `${EOnFavoriteAction}`;
    };
}
/**
 * @description 取消监听添加/取消收藏事件。
 */
interface offInternalFavorite {
    type: APIType.Fn;
    /**
     * @param callback
     * - 不传递 `callback` 值，则会移除监听**所有**的事件回调。
     * - 传递 `callback` 值，只移除**对应**的 `callback` 事件。
     */
    fn: (callback?: Function) => void;
}
/**
 * @description 查询当前小程序是否被收藏。
 */
interface isCollected {
    type: APIType.Async;
    request: void;
    response: {
        /**
         * @description 当前小程序是否收藏，`true` 为已收藏，`false` 为未收藏。
         */
        isCollected: boolean;
    };
}
/**
 * @description 查询当前小程序是否可以收藏。
 */
interface canFavorite {
    type: APIType.Async;
    request: {
        /**
         * @description 查询是否可收藏的 appId，不传默认取当前小程序的 appId。
         */
        appId?: string;
    };
    response: {
        /**
         * @description 查询当前小程序是否能被收藏，`true` 为能被收藏，`false` 为不能被收藏。
         */
        canFavorite: boolean;
    };
}
/**
 * @description 隐藏 **当前页面** 的通用菜单中的 **收藏** 按钮。
 */
interface hideFavoriteMenu {
    type: APIType.Async;
    request: void;
    response: void;
}
/**
 * @description 隐藏 **所有页面** 的通用菜单中的 **收藏** 功能。
 */
interface hideAllFavoriteMenu {
    type: APIType.Async;
    request: void;
    response: void;
}
export {};
//# sourceMappingURL=favorite.d.ts.map