import { APIType, Type } from '../../../type';
export interface TypeExport<S> {
    [Type.AR.ARContextGetSmileDetectingStatus]: getSmileDetectingStatus<S>;
    [Type.AR.ARContextStartSmileDetecting]: startSmileDetecting<S>;
    [Type.AR.ARContextGetSmileDetectingScore]: getSmileDetectingScore<S>;
    [Type.AR.ARContextStopSmileDetecting]: stopSmileDetecting<S>;
}
/**
 * @name 微笑检测(算法相关)
 * @description 本文主要介绍 **算法方面** 的 **微笑检测** 相关接口。
 * - 相关接口请先通过 `createARContext` 获取 `ARContext` 后，才能调用 `ARContext` 内的接口。
 */
export interface APIExport<S> {
}
/**
 * @description 【微笑检测】获取微笑识别引擎状态。
 */
interface getSmileDetectingStatus<S> {
    type: APIType.Async;
    request: void;
    response: {
        /**
         * @description 引擎状态。
         */
        status: `${ESmileDetectStatus}`;
    };
}
/**
 * @description 【微笑检测】开始微笑识别。
 */
interface startSmileDetecting<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 微笑检测选项，json 字符串(切记 `JSON.stringify` 一把)。
         * 内部字段格式如下：
         * - `threshold` 微笑检测阈值。
         * - `stopWhenSmileFound` 检测到微笑是否停止检测。
         */
        option?: string;
    };
}
/**
 * @description 【微笑检测】获取微笑识别得分。
 */
interface getSmileDetectingScore<S> {
    type: APIType.Async;
    response: {
        /**
         * @description 微笑得分。
         */
        score: number;
    };
}
/**
 * @description 【微笑检测】停止微笑识别。
 */
interface stopSmileDetecting<S> {
    type: APIType.Fn;
    fn: () => void;
}
/**
 * @description 微笑识别检测引擎状态。
 */
export declare const enum ESmileDetectStatus {
    /**
     * @description 设备不支持。
     */
    NotSupport = "NotSupport",
    /**
     * @description 正在初始化。
     */
    Initializing = "Initializing",
    /**
     * @description 准备就绪。
     */
    Ready = "Ready",
    /**
     * @description 未知。
     */
    Unknow = "Unknow"
}
export {};
//# sourceMappingURL=smile-detect.d.ts.map