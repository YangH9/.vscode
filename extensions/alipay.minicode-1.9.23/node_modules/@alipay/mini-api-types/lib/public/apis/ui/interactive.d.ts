import { API, APIType, Flag, Type, TypeRef } from '../../type';
export interface TypeExport<S> {
    [Type.Interactive.PromptOk]: Interactive$PromptOk;
    [Type.Interactive.PromptCancel]: Interactive$PromptCancel;
    [Type.Interactive.ConfirmButtonColor]: Interactive$ConfirmButtonColor;
    [Type.Interactive.CancelButtonColor]: Interactive$CancelButtonColor;
}
interface Interactive$ConfirmButtonColor {
    /**
     * @description "确认" 按钮颜色，HEX 格式
     */
    confirmColor?: string;
}
interface Interactive$CancelButtonColor {
    /**
     * @description "取消" 按钮颜色，HEX 格式
     */
    cancelColor?: string;
}
/**
 * @name 交互反馈
 */
export interface APIExport<S> {
    [API.alert]: alert<S>;
    [API.confirm]: confirm<S>;
    [API.prompt]: prompt<S>;
    [API.showLoading]: showLoading;
    [API.hideLoading]: hideLoading;
    [API.showToast]: showToast<S>;
    [API.hideToast]: hideToast;
}
/**
 * @name align
 */
declare const enum EAlign {
    /**
     * @description 对齐方式：靠左
     */
    left = "left",
    /**
     * @description 对齐方式：居中
     */
    center = "center",
    /**
     * @description 对齐方式：靠右
     */
    right = "right"
}
/**
 * @name toastType
 */
declare const enum EToastType {
    none = "none",
    success = "success",
    fail = "fail",
    exception = "exception"
}
/**
 * @description 警告框，可以设置警告框的标题、内容、按钮文字等
 * @tutorial api 确定按钮回调
 * @file
   ```js
   my.alert({
     title: '亲',
     content: '您本月的账单已出',
     buttonText: '我知道了',
     success: () => {
       my.alert({
         title: '用户点击了「我知道了」',
       });
     },
   });
   ```
 * @tutorial api 空返回值
 * @file
   ```js
   my.alert({
     content: 'hello',
     complete: (res) => {
       this.setData({
         output: {
           res,
           time: Date.now()
         }
       })
     }
   });
   ```
 */
interface alert<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 警告框的标题
         */
        title: string;
        /**
         * @description 警告框的内容
         */
        content?: string;
        /**
         * @description 按钮文字
         * @default "确定"
         */
        buttonText?: string;
    } & TypeRef<S, Type.Interactive.ConfirmButtonColor, Flag.UI.InteractiveButtonColor>;
    /**
     * @description 当用户点击 `buttonText` 后回调，返回对象为空
     */
    response: void;
    error: never;
}
/**
 * @description 用于提示的确认框，可以配置确认框的标题、内容、确认或取消按钮的文字等
 * @tutorial api 确认返回值
 * @file
 * ```js
 * my.confirm({
 *   content: '确认?',
 *   success: (res) => {
 *     this.setData({output:res})
 *   }
 * })
 * ```
 */
interface confirm<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 确认框的标题
         */
        title?: string;
        /**
         * @description 确认框的内容
         */
        content?: string;
        /**
         * @description 确认按钮文字
         * @default "确定"
         */
        confirmButtonText?: string;
        /**
         * @description 取消按钮文字
         * @default "取消"
         */
        cancelButtonText?: string;
    } & TypeRef<S, Type.Interactive.ConfirmButtonColor, Flag.UI.InteractiveButtonColor> & TypeRef<S, Type.Interactive.CancelButtonColor, Flag.UI.InteractiveButtonColor>;
    /**
     * @description 用户点击 "确认"/"取消" 时返回对应数据
     */
    response: {
        /**
         * @description  "确认" 为 true, 否则为 false
         */
        confirm: boolean;
    };
    error: never;
}
/**
 * @description 弹出一个对话框，让用户在对话框内输入文本
 * @tutorial api 提示placeholder示例
 * @file
 * ```js
 * my.prompt({
 *   title: '标题单行',
 *   message: '说明当前状态、提示用户解决方案，最好不要超过两行。',
 *   placeholder: '给朋友留言',
 *   okButtonText: '确定',
 *   cancelButtonText: '取消',
 *   success: (result) => {
 *     this.setData({output:result})
 *   },
 * });
 * ```
 */
interface prompt<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 提示框的标题
         */
        title: string;
        /**
         * @description 提示框的显示内容
         * @default "请输入内容"
         */
        message?: string;
        /**
         * @description 提示框的显示内容的对齐方式
         * @default "left"
         */
        align?: `${EAlign}`;
        /**
         * @description 输入框
         */
        placeholder?: string;
        /**
         * @description 确认按钮文字
         * @default "确定"
         */
        okButtonText?: string;
        /**
         * @description 取消按钮文字
         * @default "取消"
         */
        cancelButtonText?: string;
    } & TypeRef<S, Type.Interactive.ConfirmButtonColor, Flag.UI.InteractiveButtonColor> & TypeRef<S, Type.Interactive.CancelButtonColor, Flag.UI.InteractiveButtonColor>;
    /**
     * @description 用户点击 "确认"/"取消" 时返回以下不同类型数据
     */
    response: TypeRef<S, Type.Interactive.PromptOk> | TypeRef<S, Type.Interactive.PromptCancel>;
    error: never;
}
/**
 * @name 确认时
 * @description 用户点击 "确认" 时的返回对象
 */
interface Interactive$PromptOk {
    /**
     * @description  用户点击 "确认"
     */
    ok: true;
    /**
     * @description 当 ok 返回 true 时，返回用户输入的内容。
     */
    inputValue: string;
}
/**
 * @name 取消时
 * @description 用户点击 "取消" 时的返回对象
 */
interface Interactive$PromptCancel {
    /**
     * @description  "取消" 为 false
     */
    ok: false;
}
/**
 * @description 显示加载提示的过渡效果
 */
interface showLoading {
    type: APIType.Async;
    request: {
        /**
         * @description 提示中的文字内容
         */
        content?: string;
        /**
         * @description 延迟显示，单位为毫秒（ms）, 如果在此时间之前调用了 {@link #} 则不会显示。
         * @default 0
         */
        delay?: number;
    };
    response: void;
    error: void;
}
/**
 * @description 隐藏加载提示的过渡效果
 */
interface hideLoading {
    type: APIType.Async;
    request: {
        /**
         * @description 具体指当前 `page` 实例，某些场景下，需要指明在哪个 `page` 执行 `hideLoading`。
         */
        page?: object;
    };
    response: void;
    error: void;
}
/**
 * @description 显示一个弱提示，在到达设定的显示时间后自动消失弱提示
 * @tutorial api 异常提示
 * @file
 * ```js
 * my.showToast({
    type: 'exception',
    content: '网络异常',
    duration: 5000,
    success: (res) => {
      this.setData({output:{
        res,
        time: Date.now(),
      }})
    },
 * });
 * ```
 */
interface showToast<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 文字内容
         */
        content?: string;
        /**
         * @description 提示类型
         * @default "none"
         */
        type?: `${EToastType}`;
        /**
         * @description 显示时长，单位为 ms
         * @default 3000
         */
        duration?: number;
    };
    response: void;
    error: never;
}
/**
 * @description 隐藏弱提示
 */
interface hideToast {
    type: APIType.Async;
    request: void;
    response: void;
    error: never;
}
export {};
//# sourceMappingURL=interactive.d.ts.map