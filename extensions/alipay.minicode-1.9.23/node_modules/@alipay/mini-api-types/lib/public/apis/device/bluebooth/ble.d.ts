import { API, APIType, Type, TypeRef, Flag, FlagDef } from '../../../type';
export interface TypeExport<S> {
    [Type.Bluetooth.BLECharacteristic]: BLECharacteristic<S>;
    [Type.Bluetooth.BLEProperties]: BLEProperties;
}
/**
 * @name 低功耗蓝牙
 * @description 本文用于介绍 **低功耗蓝牙** (Bluetooth Low Energy) 接口的使用，完整链接流程如下
 *
 * ![](http://mdn.alipayobjects.com/afts/img/A*2egbR7frSkQAAAAAAAAAAABkAa8wAA/original?bz=openpt_doc&t=TUxB_ER0pgWwRjuYfxHU1QAAAABkMK8AAAAA)
 *
 * **注意事项**：
 * - 支持 iOS 客户端，Android 5.0 及以上版本客户端。
 */
export interface APIExport<S> {
    [API.connectBLEDevice]: connectBLEDevice<S>;
    [API.disconnectBLEDevice]: disconnectBLEDevice<S>;
    [API.getBLEDeviceServices]: getBLEDeviceServices<S>;
    [API.getBLEDeviceCharacteristics]: getBLEDeviceCharacteristics<S>;
    [API.notifyBLECharacteristicValueChange]: notifyBLECharacteristicValueChange<S>;
    [API.onBLECharacteristicValueChange]: onBLECharacteristicValueChange;
    [API.offBLECharacteristicValueChange]: offBLECharacteristicValueChange;
    [API.onBLEConnectionStateChanged]: onBLEConnectionStateChanged;
    [API.offBLEConnectionStateChanged]: offBLEConnectionStateChanged;
    [API.writeBLECharacteristicValue]: writeBLECharacteristicValue<S>;
    [API.readBLECharacteristicValue]: readBLECharacteristicValue<S>;
    [API.cancelBluetoothPair]: cancelBluetoothPair<S>;
    [API.getBluetoothPairs]: getBluetoothPairs<S>;
}
/**
 * @description 连接低功耗蓝牙设备。
 * - 若小程序在之前已搜索过某个蓝牙设备，即可直接传入之前搜索获取的 deviceId 尝试连接该设备，无需进行搜索操作
 * - 若指定的蓝牙设备已连接，重复连接将直接返回 success。
 */
interface connectBLEDevice<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 蓝牙设备 ID
         */
        deviceId: string;
    };
    response: void;
    error: TypeRef<S, Type.Bluetooth.BlueBoothCommonError>;
}
/**
 * @description 断开与低功耗蓝牙设备的连接。
 */
interface disconnectBLEDevice<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 蓝牙设备 ID
         */
        deviceId: string;
    };
    response: void;
    error: TypeRef<S, Type.Bluetooth.BlueBoothCommonError>;
}
/**
 * @description 获取所有已发现的蓝牙设备, 包括已经和本机处于连接状态的设备。
 */
interface getBLEDeviceServices<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 蓝牙设备 ID
         */
        deviceId: string;
    };
    response: {
        /**
         * @description 已发现的设备服务列表
         */
        services: BLEService[];
    };
    error: TypeRef<S, Type.Bluetooth.BlueBoothCommonError>;
}
/**
 * @description 获取蓝牙设备所有 characteristic（特征值）。
 */
interface getBLEDeviceCharacteristics<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 蓝牙设备 ID
         */
        deviceId: string;
        /**
         * @description 蓝牙特征值对应 service 的 UUID
         */
        serviceId: string;
    };
    response: {
        /**
         * @description 设备特征值列
         */
        characteristics: TypeRef<S, Type.Bluetooth.BLECharacteristic>[];
    };
    error: TypeRef<S, Type.Bluetooth.BlueBoothCommonError>;
}
/**
 * @description 启用低功耗蓝牙设备特征值变化时的 notify 功能。
 */
interface notifyBLECharacteristicValueChange<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 蓝牙设备 ID
         */
        deviceId: string;
        /**
         * @description 蓝牙特征值对应 service 的 UUID
         */
        serviceId: string;
        /**
         * @description 蓝牙特征值的 UUID
         */
        characteristicId: string;
        /**
         * @description notify 的 descriptor 的 UUID（Android 系统特有）
         * @default 00002902-0000-10008000-00805f9b34fb
         */
        descriptorId?: string;
        /**
         * @description 是否启用 notify 或 indicate
         */
        state?: FlagDef<S, boolean, Flag.Bluetooth.ChangeState>;
    };
    error: TypeRef<S, Type.Bluetooth.BlueBoothCommonError>;
}
/**
 * @description 监听低功耗蓝牙设备的特征值变化的事件。
 */
interface onBLECharacteristicValueChange {
    type: APIType.Event;
    event: {
        /**
         * @description 蓝牙设备 ID。
         */
        deviceId: string;
        /**
         * @description 连接目前的状态。
         */
        connected: boolean;
    };
}
/**
 * @description 取消监听低功耗蓝牙设备的特征值变化的事件。
 */
interface offBLECharacteristicValueChange {
    type: APIType.Fn;
    /**
     * @param callback
     * - 不传递 `callback` 值，则会移除监听**所有**的事件回调。
     * - 传递 `callback` 值，只移除**对应**的 `callback` 事件。
     */
    fn: (callback?: Function) => void;
}
/**
 * @description 监听低功耗蓝牙连接的错误事件，包括设备丢失，连接异常断开等。
 */
interface onBLEConnectionStateChanged {
    type: APIType.Event;
    event: {
        /**
         * @description 蓝牙设备 ID。
         */
        deviceId: string;
        /**
         * @description 连接目前的状态。
         */
        connected: boolean;
    };
}
/**
 * @description 移除低功耗蓝牙连接状态变化事件的监听。
 */
interface offBLEConnectionStateChanged {
    type: APIType.Fn;
    /**
     * @param callback
     * - 不传递 `callback` 值，则会移除监听**所有**的事件回调。
     * - 传递 `callback` 值，只移除**对应**的 `callback` 事件。
     */
    fn: (callback?: Function) => void;
}
/**
 * @description 向低功耗蓝牙设备特征值中写入数据 <br/> 设备的特征值必须支持 write 才可以成功调用
 */
interface writeBLECharacteristicValue<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 蓝牙设备 ID
         */
        deviceId: string;
        /**
         * @description 蓝牙特征值对应 service 的 UUID
         */
        serviceId: string;
        /**
         * @description 蓝牙特征值的 UUID
         */
        characteristicId: string;
        /**
         * @description 蓝牙设备特征值对应的值，为 16 进制字符串，限制在 20 字节内
         */
        value: string;
    };
    error: TypeRef<S, Type.Bluetooth.BlueBoothCommonError>;
}
/**
 * @description 读取低功耗蓝牙设备特征值中的数据的 API。调用后在 `my.onBLECharacteristicValueChange` 事件中接收数据返回
 */
interface readBLECharacteristicValue<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 蓝牙设备 ID
         */
        deviceId: string;
        /**
         * @description 蓝牙特征值对应 service 的 UUID
         */
        serviceId: string;
        /**
         * @description 蓝牙特征值的 UUID
         */
        characteristicId: string;
    };
    response: {
        /**
         * @description 设备特征值信息
         */
        characteristic: TypeRef<S, Type.Bluetooth.BLECharacteristic>;
    };
    error: TypeRef<S, Type.Bluetooth.BlueBoothCommonError>;
}
/**
 * @description 取消蓝牙配对接口。
 */
interface cancelBluetoothPair<S> {
    type: APIType.Async;
    request: {
        /**
         * @description 蓝牙设备 id
         */
        deviceId: string;
    };
    response: void;
}
/**
 * @description 获取已经配对蓝牙设备接口。
 */
interface getBluetoothPairs<S> {
    type: APIType.Async;
    request: void;
    response: unknown;
}
/**
 * @description 设备服务。
 */
interface BLEService {
    /**
     * @description 蓝牙设备特征值对应服务的 UUID。
     */
    serviceId: string;
    /**
     * @description 该服务是否为主服务。
     * - `true` 为主服务。
     * - `false` 不是主服务。
     */
    isPrimary: boolean;
}
/**
 * @description 蓝牙设备 characteristic （特征值）信息
 */
interface BLECharacteristic<S> {
    /**
     * @description 蓝牙设备特征值的 UUID。
     */
    characteristicId: string;
    /**
     * @description 蓝牙设备特征值对应服务的 UUID。
     */
    serviceId: string;
    /**
     * @description 蓝牙设备特征值对应的 16 进制值。
     */
    value: string;
    /**
     * @description 该特征值支持的操作类型。
     */
    properties?: TypeRef<S, Type.Bluetooth.BLEProperties>;
}
/**
 * @description 特征值支持的操作类型
 */
interface BLEProperties {
    /**
     * @description 该特征值是否支持 read 操作。
     */
    read: boolean;
    /**
     * @description 该特征值是否支持 write 操作。
     */
    write: boolean;
    /**
     * @description 该特征值是否支持 notify 操作。
     */
    notify: boolean;
    /**
     * @description 该特征值是否支持 indicate 操作。
     */
    indicate: boolean;
}
export {};
//# sourceMappingURL=ble.d.ts.map