import { API, APIType, Type, TypeRef } from '../../../type';
export interface TypeExport<S> {
    [Type.Dom.SelectorQuery]: SelectorQuery<S>;
    [Type.Dom.SelectorQuerySelect]: select<S>;
    [Type.Dom.SelectorQuerySelectAll]: selectAll<S>;
    [Type.Dom.SelectorQueryBoundingClientRect]: boundingClientRect<S>;
    [Type.Dom.SelectorQueryScrollOffset]: scrollOffset<S>;
    [Type.Dom.SelectorQueryExec]: exec<S>;
    [Type.Dom.SelectorQuerySelectViewport]: selectViewport<S>;
}
/**
 * @name 节点查询
 */
export interface APIExport<S> {
    [API.createSelectorQuery]: createSelectorQuery<S>;
}
/**
 * @description 是用于返回一个 `SelectorQuery` 对象实例的 API。
 */
interface createSelectorQuery<S> {
    type: APIType.Fn;
    fn: () => TypeRef<S, Type.Dom.SelectorQuery>;
}
/**
 * @description 节点查询对象类。
 */
interface SelectorQuery<S> {
    type: APIType.Property;
    property: {
        select: TypeRef<S, Type.Dom.SelectorQuerySelect>;
        selectAll: TypeRef<S, Type.Dom.SelectorQuerySelectAll>;
        boundingClientRect: TypeRef<S, Type.Dom.SelectorQueryBoundingClientRect>;
        scrollOffset: TypeRef<S, Type.Dom.SelectorQueryScrollOffset>;
        exec: TypeRef<S, Type.Dom.SelectorQueryExec>;
        selectViewport: TypeRef<S, Type.Dom.SelectorQuerySelectViewport>;
    };
}
/**
 * @description 用于选择当前第一个匹配选择器的节点，选择器支持 `ID` 选择器以及 `class` 选择器。
 */
interface select<S> {
    type: APIType.Fn;
    /**
     * @param selector 元素选择器。
     */
    fn: (selector: string) => TypeRef<S, Type.Dom.SelectorQuery>;
}
/**
 * @description 用于选择所有匹配选择器的节点，选择器支持 `ID` 选择器以及 `class` 选择器。
 */
interface selectAll<S> {
    type: APIType.Fn;
    /**
     * @param selector 元素选择器。
     */
    fn: (selector: string) => TypeRef<S, Type.Dom.SelectorQuery>;
}
/**
 * @description 将当前选择节点的位置信息放入查询结果，类似 `Dom` 的 `getBoundingClientRect`。如果当前节点为 **窗口对象** 则只返回 `width`、`height`。
 */
interface boundingClientRect<S> {
    type: APIType.Fn;
    fn: () => TypeRef<S, Type.Dom.SelectorQuery>;
}
/**
 * @description 用于将当前选择节点的滚动信息放入查询结果，返回对象包含 `scrollTop`、`scrollLeft`。
 */
interface scrollOffset<S> {
    type: APIType.Fn;
    fn: () => TypeRef<S, Type.Dom.SelectorQuery>;
}
/**
 * @description 将查询结果放入 `Callback` 回调中。查询结果按请求次序构成数组，数组中每项为一次查询的结果。
 * 注意事项：
 * - 如果当前是节点列表，则单次查询结果也为数组。
 * - `exec` 必须放到 `Page onReady` 后调用。
 */
interface exec<S> {
    type: APIType.Fn;
    /**
     * @param callback 回调函数
     */
    fn: (
    /**
     * @param result 查询结果
     */
    callback: (result: queryResult[]) => void) => void;
}
declare type queryResult = Pos | null;
interface Pos {
    width?: number;
    height?: number;
    left?: number;
    top?: number;
    bottom?: number;
    right?: number;
    scrollTop?: number;
    scrollLeft?: number;
}
/**
 * @description 用于选择窗口对象。
 */
interface selectViewport<S> {
    type: APIType.Fn;
    fn: () => TypeRef<S, Type.Dom.SelectorQuery>;
}
export {};
//# sourceMappingURL=selector.d.ts.map