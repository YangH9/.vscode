import { API, APIType } from '../../type';
export interface TypeExport<S> {
}
/**
 * @name 下拉刷新
 */
export interface APIExport<S> {
    [API.startPullDownRefresh]: startPullDownRefresh;
    [API.stopPullDownRefresh]: stopPullDownRefresh;
    [API.setCanPullDown]: setCanPullDown;
    [API.setViewTop]: setViewTop;
}
/**
 * @description 主动开启下拉刷新的 API，调用后触发下拉刷新动画，效果与用户手动下拉刷新一致（会触发 `onPullDownRefresh` 监听方法）
 * - 本接口不受 `onPullDownRefresh` 的 `allowsBounceVertical` 、`pullRefresh` 参数影响。
 */
interface startPullDownRefresh {
    type: APIType.Async;
    request: void;
    response: void;
}
/**
 * @description 停止当前页面的下拉刷新的 API
 */
interface stopPullDownRefresh {
    type: APIType.Async;
    request: void;
    response: void;
}
/**
 * @description 设置页面是否支持下拉（小程序内页面默认支持下拉）的 API
 * @tutorial api setCanPullDown
 * @file
 * ```js
 * my.setCanPullDown({
 *   canPullDown: true,
 * });
 * ```
 */
interface setCanPullDown {
    type: APIType.Fn;
    fn: (param: ISetCanPullDownParam) => void;
}
interface ISetCanPullDownParam {
    /**
     * @description 是否支持下拉
     */
    canPullDown: boolean;
}
/**
 * @description 设置 `webview` 的顶部位置
 */
interface setViewTop {
    type: APIType.Async;
    request: {
        /**
         * @description top：回到顶部，bottom：往下移出视图
         */
        position: string;
        /**
         * @description 是否需要过渡动画
         * @default false
         */
        animated?: boolean;
    };
}
export {};
//# sourceMappingURL=pulldown.d.ts.map