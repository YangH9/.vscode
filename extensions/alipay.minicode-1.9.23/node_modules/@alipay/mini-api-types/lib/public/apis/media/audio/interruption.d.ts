import { API, APIType } from '../../../type';
export interface TypeExport<S> {
}
/**
 * @name 中断事件
 */
export interface APIExport<S> {
    [API.onAudioInterruptionBegin]: onAudioInterruptionBegin;
    [API.onAudioInterruptionEnd]: onAudioInterruptionEnd;
    [API.offAudioInterruptionBegin]: offAudioInterruptionBegin;
    [API.offAudioInterruptionEnd]: offAudioInterruptionEnd;
}
/**
 * @description 监听音频因为系统占用而被中断的开始事件。
 */
interface onAudioInterruptionBegin {
    type: APIType.Event;
    event: void;
}
/**
 * @description 监听音频被中断的结束事件。
 */
interface onAudioInterruptionEnd {
    type: APIType.Event;
    event: void;
}
/**
 * @description 取消监听音频因为系统占用而被中断的开始事件。
 */
interface offAudioInterruptionBegin {
    type: APIType.Fn;
    /**
     * @param callback
     * - 不传递 `callback` 值，则会移除监听**所有**的事件回调。
     * - 传递 `callback` 值，只移除**对应**的 `callback` 事件。
     */
    fn: (callback?: Function) => void;
}
/**
 * @description 取消监听音频被中断的结束事件。
 */
interface offAudioInterruptionEnd {
    type: APIType.Fn;
    /**
     * @param callback
     * - 不传递 `callback` 值，则会移除监听**所有**的事件回调。
     * - 传递 `callback` 值，只移除**对应**的 `callback` 事件。
     */
    fn: (callback?: Function) => void;
}
export {};
//# sourceMappingURL=interruption.d.ts.map