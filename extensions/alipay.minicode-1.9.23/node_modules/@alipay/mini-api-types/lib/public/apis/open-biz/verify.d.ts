import { API, APIType } from '../../type';
export interface TypeExport<S> {
}
/**
 * @name 核身
 */
export interface APIExport<S> {
    [API.startAPVerify]: startAPVerify;
    [API.ap$startAPVerify]: ap$startAPVerify;
    [API.ap$faceVerify]: ap$faceVerify;
    [API.ap$getVerifyEnvData]: ap$getVerifyEnvData;
    [API.ap$startVerifyIdentity]: ap$startVerifyIdentity;
    [API.ap$zimIdentity]: ap$zimIdentity;
}
/**
 * @description 人脸识别身份认证接口
 */
interface startAPVerify {
    type: APIType.Async;
    request: {
        /**
         * @description 通过 `alipay.user.certify.open.initialize` 接口获取的 `url` 认证链接，需要服务端通过开放平台接口获取后，再给前端进行调用。
         */
        url: string;
        /**
         * @description 通过 `alipay.user.certify.open.certify` 接口获取的 `certifyId`，需要服务端通过开放平台接口获取后，再给前端进行调用。
         */
        certifyId: string;
    };
    response: {
        /**
         * @description 认证流程结果状态码
         */
        resultStatus: string;
        /**
         * @description 本次认证流水号
         */
        certifyId: string;
    };
}
interface ap$startAPVerify {
    type: APIType.Alias;
    alias: API.startAPVerify;
}
/**
 * @description 人脸认证，对当前登录支付宝APP的实名用户，通过人脸识别技术进行身份核实，确认当前用户是支付宝实名账户的本人和真人。
 */
interface ap$faceVerify {
    type: APIType.Async;
    request: {
        /**
         * @description 业务流水号，需要保证唯一性
         */
        bizId: string;
    };
    response: {
        /**
         * @description 认证标识
         */
        zimId: string;
        /**
         * @description 认证可用性返回码
         */
        retCode: `${EFaceVerifyRetCode}`;
        /**
         * @description 认证可用性返回码明细
         */
        retCodeSub: string;
        /**
         * @description 认证可用性结果描述
         */
        retMessageSub: string;
        /**
         * @description 刷脸结果。
         * - `1000` 代表刷脸成功
         * - `1001` 表示系统错误
         * - `1003` 表示验证中断
         * - `2002` 表示网络错误
         * - `2006` 表示刷脸失败
         */
        faceRetCode: `${EFaceVerifyFaceRetCode}`;
    };
}
declare const enum EFaceVerifyRetCode {
    /**
     * @description 刷脸可用，查询faceRetCode查看是否成功刷脸
     */
    'OK_SUCCESS' = "OK_SUCCESS",
    /**
     * @description 系统错误
     */
    'SYSTEM_ERROR' = "SYSTEM_ERROR",
    /**
     * @description 用户不可用刷脸
     */
    'ACCOUNT_SERVICE_SUSPEND' = "ACCOUNT_SERVICE_SUSPEND",
    /**
     * @description 刷脸失败次数过多，请您稍后再试
     */
    'HIGH_RISK' = "HIGH_RISK",
    /**
     * @description 设备不支持刷脸
     */
    'DEVICE_NOT_SUPPORT' = "DEVICE_NOT_SUPPORT",
    /**
     * @description 手机操作系统不支持刷脸
     */
    'OS_NOT_SUPPORT' = "OS_NOT_SUPPORT",
    /**
     * @description SDK版本不支持
     */
    'SDKVERSION_NOT_SUPPORT' = "SDKVERSION_NOT_SUPPORT",
    /**
     * @description 刷脸资源未准备好
     */
    'ASSET_NOT_AVAILABLE' = "ASSET_NOT_AVAILABLE",
    /**
     * @description 比对源不可用
     */
    'UNABLE_GET_IMAGE' = "UNABLE_GET_IMAGE",
    /**
     * @description 算法不支持
     */
    'ALG_NOT_SUPPORT' = "ALG_NOT_SUPPORT",
    /**
     * @description 非实名认证用户
     */
    'NOT_REAL_NAME' = "NOT_REAL_NAME"
}
declare const enum EFaceVerifyFaceRetCode {
    /**
     * @description 代表刷脸成功
     */
    '_1000' = 1000,
    /**
     * @description 表示系统错误
     */
    '_1001' = 1001,
    /**
     * @description 表示验证中断
     */
    '_1003' = 1003,
    /**
     * @description 表示网络错误
     */
    '_2002' = 2002,
    /**
     * @description 表示刷脸失败
     */
    '_2006' = 2006
}
/**
 * @description 获取核身环境参数
 */
interface ap$getVerifyEnvData {
    type: APIType.Async;
    request: void;
    response: {
        /**
         * @description 环境参数
         */
        envData: unknown;
    };
}
/**
 * @description
 */
interface ap$startVerifyIdentity {
    type: APIType.Async;
    request: {
        /**
         * @description 标识一次完整的核身流程
         */
        verifyId: string;
        /**
         * @description 核身类型
         */
        verifyType: `${EVerifyType}`;
        /**
         * @description 核身产品数据
         */
        moduleData?: unknown;
    };
    response: {
        /**
         * @description 核身流程Id
         */
        verifyId: string;
        /**
         * @description 核身结果返回值
         */
        code: string;
        /**
         * @description 核身结果描述信息
         */
        message: string;
        /**
         * @description 核身返回时最近一次校验的token
         */
        token: string;
        /**
         * @description 核身产品的校验结果
         */
        verifyCode: `${EVerifyCode}`;
        /**
         * @description 透传的业务数据，为空时表示业务出错
         */
        bizResponseData: unknown;
    };
}
declare const enum EVerifyType {
    /**
     * @description 标准核身
     */
    standard = "standard",
    /**
     * @description 快捷核身1（核身SDK直接初始化）
     */
    'verify_init' = "verify_init",
    /**
     * @description 快捷核身2（业务服务端初始化）
     */
    'verify_module︎' = "verify_module\uFE0E"
}
declare const enum EVerifyCode {
    /**
     * @description [人脸] 人脸比对不是同一个人
     */
    'NOT_SAME_PERSON' = "NOT_SAME_PERSON",
    /**
     * @description [人脸] 人脸无法获取图片
     */
    'UNABLE_GET_IMAGE' = "UNABLE_GET_IMAGE",
    /**
     * @description [人脸] 人脸系统异常
     */
    'SYSTEM_ERROR' = "SYSTEM_ERROR",
    /**
     * @description [支付密码] 支付密码被锁定，用户不进入 找回密码流程
     */
    'PPW_LOCK_USER_CANCEL' = "PPW_LOCK_USER_CANCEL"
}
/**
 * @description 支付宝刷脸获取 metaInfo 和 刷脸启动的 JSAPI，目前是定向开放。需要配合服务端开放平台接口使用，整体使用流程参见 https://yuque.antfin-inc.com/zolozopen/pygbrq/xkl9u1
 */
interface ap$zimIdentity {
    type: APIType.Async;
    request: {
        /**
         * @description 通过服务端接口返回一次验证流程id；不填写时，返回设备的metaInfo
         */
        verifyId?: string;
    };
    response: zimIdentityResponseWithVerifyId | zimIdentityResponseWithoutVerifyId;
}
interface zimIdentityResponseWithVerifyId {
    apdidToken: string;
    appName: string;
    appVersion: string;
    bioMetaInfo: string;
    deviceModel: string;
    deviceType: string;
    osVersion: string;
    zimVer: string;
}
interface zimIdentityResponseWithoutVerifyId {
    /**
     * @description 状态码。
     * - `1003` 用户取消刷脸
     * - `2006` 比对失败，可能是非本人或服务端异常
     * - `1000` 比对成功，核身通过
     */
    code: string;
    extInfo: zimIdentityResponseExtInfo;
    verifyCode: string;
}
interface zimIdentityResponseExtInfo {
    zimAction: number;
    verifyCode: string;
}
export {};
//# sourceMappingURL=verify.d.ts.map