import { IPageInfo } from 'configCenter';
import { ILogger, IMiniLanguageServiceContext, ITSUtils } from 'types';
import { DiagnosticWithLocation } from 'typescript';
import { SourceFile, CallExpression } from 'typescript/lib/tsserverlibrary';
import type * as ts from 'typescript/lib/tsserverlibrary';
export declare abstract class DiagnosticWorker {
    protected context: IMiniLanguageServiceContext;
    ts: typeof ts;
    tsUtils: ITSUtils;
    logger: ILogger;
    constructor(context: IMiniLanguageServiceContext);
    abstract getSuggestionDiagnostics(sourceFile: ts.SourceFile, node: ts.CallExpression, expression: string[], fileName: string, page: IPageInfo | undefined): DiagnosticWithLocation[] | undefined;
}
export declare class RouterDiagnosticsWorker extends DiagnosticWorker {
    static ruleName: string;
    static supportAPI: Set<string>;
    static canHandleAPI(api: string): boolean;
    processMyRouterApiCallUrl(node: CallExpression): {
        url: string;
        start: number;
        width: number;
    };
    getSuggestionDiagnostics(sourceFile: SourceFile, node: CallExpression, expression: string[], fileName: string, page: IPageInfo): DiagnosticWithLocation[] | undefined;
}
export declare class SetTabbarItemDiagnosticsWorker extends DiagnosticWorker {
    static ruleName: string;
    static supportAPI: Set<string>;
    static canHandleAPI(api: string): boolean;
    getSuggestionDiagnostics(sourceFile: SourceFile, node: CallExpression, expression: string[]): DiagnosticWithLocation[] | undefined;
}
