"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SetTabbarItemDiagnosticsWorker = exports.RouterDiagnosticsWorker = exports.DiagnosticWorker = void 0;
const mini_1 = require("@alipay/mini-extensions-shared/lib/diagnostics/mini");
const i18n_1 = require("../../i18n");
class DiagnosticWorker {
    constructor(context) {
        this.context = context;
        this.ts = context.ts;
        this.tsUtils = context.tsUtils;
        this.logger = context.logger;
    }
}
exports.DiagnosticWorker = DiagnosticWorker;
class RouterDiagnosticsWorker extends DiagnosticWorker {
    static canHandleAPI(api) {
        return this.supportAPI.has(api);
    }
    processMyRouterApiCallUrl(node) {
        const args = node.arguments;
        const firstArg = args === null || args === void 0 ? void 0 : args[0];
        if (firstArg && this.ts.isObjectLiteralExpression(firstArg)) {
            // 找到 url 这个字段，然后取出 url 对应的值
            const props = firstArg.properties;
            let target;
            for (const p of props) {
                if (this.ts.isPropertyAssignment(p)) {
                    if (p.name && this.ts.isIdentifier(p.name) && p.name.text === 'url') {
                        target = p;
                        break;
                    }
                }
            }
            if (target &&
                target.initializer &&
                this.ts.isStringLiteral(target.initializer)) {
                const result = target.initializer.text;
                const start = target.initializer.getStart();
                const width = target.initializer.getWidth();
                return {
                    url: result,
                    start,
                    width,
                };
            }
        }
    }
    getSuggestionDiagnostics(sourceFile, node, expression, fileName, page) {
        const result = [];
        // Router API 相关的
        const routerTarget = this.processMyRouterApiCallUrl(node);
        if (!routerTarget) {
            // 无法解析到 target url
            // 不校验
            return;
        }
        if (!page && !routerTarget.url.startsWith('/')) {
            // 如果用户编辑的 js 不在页面中且解析到的 url 不是绝对路径，不校验
            return;
        }
        if (routerTarget.url.includes('plugin://')) {
            // 不校验插件
            return;
        }
        if (routerTarget.url.includes('plugin-private://')) {
            // 不校验插件
            return;
        }
        const resolvedTargetUrl = this.context.configCenter.resolveRouterUrl(fileName, routerTarget.url);
        this.logger.info(`router target: ${JSON.stringify(routerTarget)}`);
        const allTabItems = new Set(this.context.configCenter.getTabbarItemPages());
        // https://opendocs.alipay.com/mini/api/zwi8gx
        if (expression[1] === 'navigateTo') {
            if (allTabItems.has(resolvedTargetUrl)) {
                result.push({
                    category: this.ts.DiagnosticCategory.Error,
                    code: mini_1.RouterDiagnosticsEnum.NavigateToInvalidUrl,
                    file: sourceFile,
                    length: routerTarget.width,
                    messageText: this.context.localize(i18n_1.EMessageKey.diagnostic_navigateToCannotGoToTabbar),
                    source: mini_1.Source + `[${RouterDiagnosticsWorker.ruleName}]`,
                    start: routerTarget.start,
                });
            }
        }
        // https://opendocs.alipay.com/mini/api/ui-tabbar
        if (expression[1] === 'switchTab') {
            if (!allTabItems.has(resolvedTargetUrl)) {
                result.push({
                    category: this.ts.DiagnosticCategory.Error,
                    code: mini_1.RouterDiagnosticsEnum.SwitchTabInvalidUrl,
                    file: sourceFile,
                    length: routerTarget.width,
                    messageText: this.context.localize(i18n_1.EMessageKey.diagnostic_switchTabCanOnlyGoToTabbar),
                    source: mini_1.Source + `[${RouterDiagnosticsWorker.ruleName}]`,
                    start: routerTarget.start,
                });
            }
        }
        // https://opendocs.alipay.com/mini/api/fh18ky
        if (expression[1] === 'redirectTo') {
            if (allTabItems.has(resolvedTargetUrl)) {
                result.push({
                    category: this.ts.DiagnosticCategory.Error,
                    code: mini_1.RouterDiagnosticsEnum.RedirectToInvalidUrl,
                    file: sourceFile,
                    length: routerTarget.width,
                    messageText: this.context.localize(i18n_1.EMessageKey.diagnostic_redirectToCannotGoToTabbar),
                    source: mini_1.Source + `[${RouterDiagnosticsWorker.ruleName}]`,
                    start: routerTarget.start,
                });
            }
        }
        return result;
    }
}
exports.RouterDiagnosticsWorker = RouterDiagnosticsWorker;
RouterDiagnosticsWorker.ruleName = 'my-router-url-check';
RouterDiagnosticsWorker.supportAPI = new Set(['navigateTo', 'switchTab', 'redirectTo']);
class PairedUsageHelper {
    constructor(properties) {
        this.properties = properties;
        this.usageMap = new Map();
    }
    mark(key, meta) {
        this.usageMap.set(key, meta);
    }
    getUnused() {
        const result = [];
        for (const p of this.properties) {
            if (!this.usageMap.has(p)) {
                result.push(p);
            }
        }
        return result;
    }
    /**
     * 结果是异或的非运算
     * 如果所有的都用了或者都没用，那么结果是 true
     */
    isPairedUseValid() {
        let result = this.usageMap.get(this.properties[0]) ? 1 : 0;
        for (const p of this.properties.slice(1)) {
            result = result ^ (this.usageMap.get(p) ? 1 : 0);
        }
        return !result;
    }
}
class SetTabbarItemDiagnosticsWorker extends DiagnosticWorker {
    static canHandleAPI(api) {
        return this.supportAPI.has(api);
    }
    getSuggestionDiagnostics(sourceFile, node, expression) {
        const result = [];
        if (expression[1] === 'setTabBarItem') {
            // 读取它的第一个参数，应该是一个对象
            const args = node.arguments;
            const firstArg = args === null || args === void 0 ? void 0 : args[0];
            if (firstArg && this.ts.isObjectLiteralExpression(firstArg)) {
                // 找到 iconPath 这个字段和 selectedIconPath 这个字段
                // 这俩参数是非必填，只是想要他们操作的时候成对操作，也可以一个都不操作
                // 也就是一个 非异或 的逻辑运算结果
                const paired = new PairedUsageHelper([
                    'iconPath',
                    'selectedIconPath',
                ]);
                const props = firstArg.properties;
                for (const p of props) {
                    if (this.ts.isPropertyAssignment(p)) {
                        if (p.name && this.ts.isIdentifier(p.name)) {
                            this.logger.info(`p.name.text: ${p.name.text}`);
                            paired.mark(p.name.text, true);
                        }
                    }
                }
                if (!paired.isPairedUseValid()) {
                    const unusedKeys = paired.getUnused();
                    for (const k of unusedKeys) {
                        const meta = paired.usageMap.get(k);
                        this.logger.info(`meta: ${JSON.stringify(meta)}`);
                        const warning = this.context.localize(i18n_1.EMessageKey.diagnostic_setTabbarItemParamCheck, k, paired.properties.join(` ${this.context.localize(i18n_1.EMessageKey.and)} `));
                        this.logger.info(`warning: ${warning}`);
                        result.push({
                            category: this.ts.DiagnosticCategory.Error,
                            code: mini_1.MyAPIDiagnosticCode.SetTabbarItemParamCheck,
                            file: sourceFile,
                            length: firstArg.getWidth(),
                            messageText: warning,
                            source: mini_1.Source + `[${SetTabbarItemDiagnosticsWorker.ruleName}]`,
                            start: firstArg.getStart(),
                        });
                    }
                }
            }
        }
        return result;
    }
}
exports.SetTabbarItemDiagnosticsWorker = SetTabbarItemDiagnosticsWorker;
SetTabbarItemDiagnosticsWorker.ruleName = 'my-set-tabbar-item-param-check';
SetTabbarItemDiagnosticsWorker.supportAPI = new Set(['setTabBarItem']);
