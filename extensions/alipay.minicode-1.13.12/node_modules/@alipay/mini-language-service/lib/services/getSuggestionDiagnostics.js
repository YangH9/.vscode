"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SuggestionDiagnosticsProvider = void 0;
const diagnosticWorker_1 = require("./worker/diagnosticWorker");
class SuggestionDiagnosticsProvider {
    constructor(context) {
        this.context = context;
        this.ts = context.ts;
        this.tsUtils = context.tsUtils;
        this.logger = context.logger;
    }
    getMiniApiDiagnostics(fileName) {
        const sourceFile = this.context.tsUtils.getSourceFile(fileName);
        if (!sourceFile) {
            return [];
        }
        const page = this.context.configCenter.getPageByPath(fileName);
        const result = [];
        const visit = (node) => {
            const expression = this.context.tsUtils.getMyDotAsteriskExpression(node);
            // this.logger.info('isMyCall ' + String(expression));
            if (expression) {
                if (!this.ts.isCallExpression(node)) {
                    return;
                }
                const apiName = expression[1];
                const workerImpls = [
                    diagnosticWorker_1.RouterDiagnosticsWorker,
                    diagnosticWorker_1.SetTabbarItemDiagnosticsWorker,
                ];
                for (const workerImpl of workerImpls) {
                    if (workerImpl.canHandleAPI(apiName)) {
                        this.logger.info(`handle ${apiName} with ${workerImpl.name}`);
                        const worker = new workerImpl(this.context);
                        const diags = worker.getSuggestionDiagnostics(sourceFile, node, expression, fileName, page);
                        if (diags) {
                            result.push(...diags);
                            this.logger.info(`diags ${diags.length} `);
                        }
                    }
                }
            }
            return node.forEachChild(visit);
        };
        this.ts.visitNode(sourceFile, visit);
        return result;
    }
    // 将 TS 中出的错用 mini(6xxx) 来代替
    getSuggestionDiagnostics(fileName) {
        const prior = this.context.languageService.getSuggestionDiagnostics(fileName);
        let result = [...prior];
        const routerDiags = this.getMiniApiDiagnostics(fileName);
        if (routerDiags) {
            result = [...routerDiags, ...prior];
        }
        return result;
    }
}
exports.SuggestionDiagnosticsProvider = SuggestionDiagnosticsProvider;
