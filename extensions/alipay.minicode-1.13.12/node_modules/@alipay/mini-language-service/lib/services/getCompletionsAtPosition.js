"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetCompletionsAtPositionProvider = void 0;
const canIUse_1 = require("../canIUse");
const NativeAPI_1 = require("@alipay/mini-extensions-shared/lib/data/NativeAPI");
const installer_1 = require("@alipay/mini-extensions-shared/lib/node/installer");
class GetCompletionsAtPositionProvider {
    constructor(context) {
        this.context = context;
        this.ts = context.ts;
        this.tsUtils = context.tsUtils;
        this.logger = context.logger;
        this.languageService = context.languageService;
        this.apiMeta = NativeAPI_1.NativeAPI;
        this.canIUseHelper = new canIUse_1.CanIUseHelper(context);
    }
    dispose() { }
    wrapCompletionItem(node, text) {
        var _a, _b;
        return {
            kind: this.ts.ScriptElementKind.enumElement,
            sortText: text,
            name: text,
            insertText: text,
            replacementSpan: {
                start: ((_a = node === null || node === void 0 ? void 0 : node.getStart) === null || _a === void 0 ? void 0 : _a.call(node)) + 1,
                length: ((_b = node === null || node === void 0 ? void 0 : node.getWidth) === null || _b === void 0 ? void 0 : _b.call(node)) - 2,
            },
        };
    }
    wrapCanIUseReturnValue(node, text) {
        var _a, _b;
        let kind = this.ts.ScriptElementKind.string;
        if (text.endsWith('.object')) {
            kind = this.ts.ScriptElementKind.constElement;
        }
        else if (text.endsWith('.return')) {
            kind = this.ts.ScriptElementKind.constElement;
        }
        else if (text.endsWith('.callback')) {
            kind = this.ts.ScriptElementKind.constElement;
        }
        else if (text.endsWith('.success')) {
            kind = this.ts.ScriptElementKind.constElement;
        }
        return {
            kind,
            sortText: text,
            name: text,
            insertText: text,
            replacementSpan: {
                start: ((_a = node === null || node === void 0 ? void 0 : node.getStart) === null || _a === void 0 ? void 0 : _a.call(node)) + 1,
                length: ((_b = node === null || node === void 0 ? void 0 : node.getWidth) === null || _b === void 0 ? void 0 : _b.call(node)) - 2,
            },
        };
    }
    /**
     * 获取现有的 api 列表
     * 提供给 my.call 补全
     * @returns
     */
    getApiBriefList() {
        return this.apiMeta;
    }
    updateAPIMeta(storagePath) {
        const tmp = (0, installer_1.getValidResourceSync)(storagePath, installer_1.ResourceName.MiniResources, installer_1.MiniResources.NativeAPIJSON);
        if (tmp) {
            this.apiMeta = tmp;
            this.logger.info('use remote resource' + installer_1.MiniResources.NativeAPIJSON);
            return;
        }
    }
    /**
     * 给 my.call 的入参提供自动补全
     */
    getNativeApiInputParamsList(apiName) {
        var _a, _b, _c;
        const list = (_c = (_b = (_a = this.getApiBriefList()) === null || _a === void 0 ? void 0 : _a.find((api) => api.apiName === apiName)) === null || _b === void 0 ? void 0 : _b.parameters) === null || _c === void 0 ? void 0 : _c.in.map((inputP) => Object.keys(inputP).length > 0 &&
            inputP.parameters).flat();
        return list;
    }
    getCompletionEntry(fileName, position, options) {
        var _a, _b;
        const node = this.tsUtils.getNode(fileName, position);
        if (node) {
            if (this.tsUtils.isNavigateToUrl(node)) {
                return this.context.configCenter.getPages(true).map((v) => {
                    return this.wrapCompletionItem(node, v);
                });
            }
            if (this.tsUtils.isSwitchTabUrl(node)) {
                return this.context.configCenter.getTabbarItemPages().map((v) => {
                    return this.wrapCompletionItem(node, v);
                });
            }
            if (this.tsUtils.isRedirectToUrl(node)) {
                return this.context.configCenter.getPages(true).map((v) => {
                    return this.wrapCompletionItem(node, v);
                });
            }
            if (this.tsUtils.isRelaunchToUrl(node)) {
                return this.context.configCenter.getPages().map((v) => {
                    return this.wrapCompletionItem(node, v);
                });
            }
            if (this.tsUtils.isMyCanIUseMethod(node)) {
                const canIUseTmpData = this.canIUseHelper.getSubCanIUseData(node.text);
                return Array.from(canIUseTmpData).map((v) => {
                    return this.wrapCanIUseReturnValue(node, v);
                });
            }
            // my.xxx 的提示
            // const myMethod = this.tsUtils.checkIsTypingMyAPI(node);
            // if (myMethod && myMethod.length > 0) {
            //   return [];
            // }
            // my.call('') 方法名的提示
            if (this.tsUtils.isMyCallMethod(node)) {
                return this.getApiBriefList().map(({ name, documentation }) => {
                    return Object.assign(Object.assign({}, this.wrapCompletionItem(node, name)), { labelDetails: {
                            description: documentation,
                        } });
                });
            }
            // my.call('xxx', {}) 入参的提示
            if (this.tsUtils.isMyCallInputParams(node)) {
                const apiName = (_b = (_a = node.parent
                    .arguments) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.text;
                return this.getNativeApiInputParamsList(apiName).map((inputParams) => {
                    const apiInputPropertyName = inputParams.name;
                    // see https://github.com/microsoft/TypeScript/blob/dbeae5d943c784661862c52b8e215a2907c31a33/src/server/protocol.ts
                    return Object.assign(Object.assign({}, this.wrapCompletionItem(node, apiInputPropertyName)), { kind: this.ts.ScriptElementKind.interfaceElement, labelDetails: {
                            detail: inputParams.type,
                            description: inputParams.documentation,
                        }, isRecommended: true });
                });
            }
        }
        return [];
    }
    getCompletionsAtPosition(fileName, position, options) {
        let prior = this.languageService.getCompletionsAtPosition(fileName, position, options);
        if (!prior) {
            prior = {
                entries: [],
            };
        }
        try {
            const entries = this.getCompletionEntry(fileName, position, options);
            prior.entries.unshift(...entries);
        }
        catch (error) {
            this.logger.error(error);
        }
        return prior;
    }
    updateStoragePath(globalStoragePath) {
        this.updateAPIMeta(globalStoragePath);
        this.canIUseHelper.updateCanIUseData(globalStoragePath);
    }
}
exports.GetCompletionsAtPositionProvider = GetCompletionsAtPositionProvider;
