import * as ts from 'typescript';
declare type FileInfo = {
    content: string;
    version: number;
};
/**
 * 对一个 ts（js）文件做解析
 */
declare class EntryTsServiceHost implements ts.LanguageServiceHost {
    private tsModule;
    files: Map<string, FileInfo>;
    private options;
    constructor(tsModule: typeof ts);
    setFile(name: string, content: string): void;
    fileExists(fileName: string): boolean;
    readFile(fileName: string): string;
    getCompilationSettings(): ts.CompilerOptions;
    getScriptFileNames(): string[];
    getScriptVersion(name: string): string;
    getScriptSnapshot(name: string): ts.IScriptSnapshot;
    getCurrentDirectory(): string;
    getDefaultLibFileName(options: ts.CompilerOptions): string;
}
declare class SimpleTsLanguageService {
    protected tsModule: typeof ts;
    readonly tempFilePath = "temp.ts";
    protected _tsLanguageService: ts.LanguageService;
    protected _tsLanguageServiceHost: EntryTsServiceHost;
    constructor(tsModule: typeof ts);
    getCompletionsAtPosition(fileCode: string, position: number, options?: ts.GetCompletionsAtPositionOptions): ReturnType<ts.LanguageService['getCompletionsAtPosition']>;
    getCompletionEntryDetails(fileCode: string, position: number, entryName: string, formatOptions: ts.FormatCodeOptions | ts.FormatCodeSettings | undefined, source: string | undefined, preferences: ts.UserPreferences | undefined, data: ts.CompletionEntryData | undefined): ReturnType<ts.LanguageService['getCompletionEntryDetails']>;
    getQuickInfoAtPosition(fileCode: string, position: number): ReturnType<ts.LanguageService['getQuickInfoAtPosition']>;
    getDefinitionAtPosition(fileCode: string, position: number): ReturnType<ts.LanguageService['getDefinitionAtPosition']>;
    parseTsFile(fileCode: string): {
        sourceFile: ts.SourceFile;
        typeChecker: ts.TypeChecker;
    };
}
export declare function createTsLanguageService(tsModule: typeof ts): SimpleTsLanguageService;
export {};
