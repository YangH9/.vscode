"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTsLanguageService = void 0;
const fs = __importStar(require("fs"));
/**
 * 对一个 ts（js）文件做解析
 */
class EntryTsServiceHost {
    constructor(tsModule) {
        this.tsModule = tsModule;
        this.files = new Map();
        this.options = {
            noImplicitThis: true,
        };
    }
    setFile(name, content) {
        const file = this.files.get(name);
        if (file) {
            if (file.content !== content) {
                file.content = content;
                file.version++;
            }
        }
        else {
            this.files.set(name, { content, version: 0 });
        }
    }
    fileExists(fileName) {
        return !!this.files.get(fileName);
    }
    readFile(fileName) {
        const file = this.files.get(fileName);
        return file ? file.content : undefined;
    }
    getCompilationSettings() {
        return this.options;
    }
    getScriptFileNames() {
        return Array.from(this.files.keys());
    }
    getScriptVersion(name) {
        return (this.files.get(name) || { version: 1 }).version.toString();
    }
    getScriptSnapshot(name) {
        if (this.files.has(name)) {
            return this.tsModule.ScriptSnapshot.fromString(this.files.get(name).content);
        }
        else {
            if (fs.existsSync(name)) {
                const file = fs.readFileSync(name).toString();
                return this.tsModule.ScriptSnapshot.fromString(file);
            }
        }
    }
    getCurrentDirectory() {
        return './';
    }
    getDefaultLibFileName(options) {
        // 这不导入默认库，这样加快分析效率
        return '';
    }
}
class SimpleTsLanguageService {
    constructor(tsModule) {
        this.tsModule = tsModule;
        this.tempFilePath = 'temp.ts';
        this._tsLanguageServiceHost = new EntryTsServiceHost(this.tsModule);
        this._tsLanguageService = this.tsModule.createLanguageService(this._tsLanguageServiceHost);
    }
    getCompletionsAtPosition(fileCode, position, options) {
        this._tsLanguageServiceHost.setFile(this.tempFilePath, fileCode);
        this._tsLanguageService.getProgram();
        return this._tsLanguageService.getCompletionsAtPosition(this.tempFilePath, position, options);
    }
    getCompletionEntryDetails(fileCode, position, entryName, formatOptions, source, preferences, data) {
        this._tsLanguageServiceHost.setFile(this.tempFilePath, fileCode);
        this._tsLanguageService.getProgram();
        return this._tsLanguageService.getCompletionEntryDetails(this.tempFilePath, position, entryName, formatOptions, source, preferences, data);
    }
    getQuickInfoAtPosition(fileCode, position) {
        this._tsLanguageServiceHost.setFile(this.tempFilePath, fileCode);
        this._tsLanguageService.getProgram();
        return this._tsLanguageService.getQuickInfoAtPosition(this.tempFilePath, position);
    }
    getDefinitionAtPosition(fileCode, position) {
        this._tsLanguageServiceHost.setFile(this.tempFilePath, fileCode);
        this._tsLanguageService.getProgram();
        return this._tsLanguageService.getDefinitionAtPosition(this.tempFilePath, position);
    }
    parseTsFile(fileCode) {
        this._tsLanguageServiceHost.setFile(this.tempFilePath, fileCode);
        const program = this._tsLanguageService.getProgram();
        return {
            sourceFile: program.getSourceFile(this.tempFilePath),
            typeChecker: program.getTypeChecker(),
        };
    }
}
const map = new WeakMap();
function createTsLanguageService(tsModule) {
    let entryTsLanguageService = map.get(tsModule);
    if (entryTsLanguageService) {
        return entryTsLanguageService;
    }
    entryTsLanguageService = new SimpleTsLanguageService(tsModule);
    map.set(tsModule, entryTsLanguageService);
    return entryTsLanguageService;
}
exports.createTsLanguageService = createTsLanguageService;
