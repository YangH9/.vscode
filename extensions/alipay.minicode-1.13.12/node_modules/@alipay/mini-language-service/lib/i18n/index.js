"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.localize = exports.messages = exports.EMessageKey = void 0;
const i18n_1 = require("@alipay/mini-extensions-shared/lib/i18n");
var EMessageKey;
(function (EMessageKey) {
    EMessageKey["and"] = "and";
    EMessageKey["diagnostic_navigateToCannotGoToTabbar"] = "diagnostic_navigateToCannotGoToTabbar";
    EMessageKey["diagnostic_switchTabCanOnlyGoToTabbar"] = "diagnostic_switchTabCanOnlyGoToTabbar";
    EMessageKey["diagnostic_redirectToCannotGoToTabbar"] = "diagnostic_redirectToCannotGoToTabbar";
    EMessageKey["diagnostic_setTabbarItemParamCheck"] = "diagnostic_setTabbarItemParamCheck";
})(EMessageKey = exports.EMessageKey || (exports.EMessageKey = {}));
exports.messages = {
    en: {
        and: 'and',
        diagnostic_navigateToCannotGoToTabbar: 'Do not use navigateTo to jump to a tabbar page.',
        diagnostic_switchTabCanOnlyGoToTabbar: 'switchTab can only jump to tabbar page.',
        diagnostic_redirectToCannotGoToTabbar: 'Do not use redirectTo to jump to a tabbar page.',
        diagnostic_setTabbarItemParamCheck: 'The {0} field is not set, {1} must be configured at the same time.',
    },
    zh: {
        and: '和',
        diagnostic_navigateToCannotGoToTabbar: '请勿使用 navigateTo 跳转到 tabbar 页面',
        diagnostic_switchTabCanOnlyGoToTabbar: 'switchTab 仅能跳转到 tabbar 页面',
        diagnostic_redirectToCannotGoToTabbar: '请勿使用 redirectTo 跳转到 tabbar 页面',
        diagnostic_setTabbarItemParamCheck: '未设置 {0} 字段，{1} 必须同时配置',
    },
};
function localize(k, lang, ...args) {
    const message = exports.messages[lang][k];
    return (0, i18n_1.format)(message, args);
}
exports.localize = localize;
