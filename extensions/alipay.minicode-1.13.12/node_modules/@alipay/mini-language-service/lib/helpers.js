"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.wrapProgram = exports.createProgram = exports.createBaseLanguageContext = void 0;
function createBaseLanguageContext(ts, host) {
    const documentRegistry = ts.createDocumentRegistry();
    const compilerOptions = host.getCompilationSettings();
    const typescriptLanguageServiceHost = host;
    return {
        typescriptLanguageServiceHost,
        documentRegistry,
        compilerOptions,
    };
}
exports.createBaseLanguageContext = createBaseLanguageContext;
function createProgram(ts, sourceFiles, cwd) {
    const createdFiles = {};
    const options = {
        module: ts.ModuleKind.CommonJS,
        target: ts.ScriptTarget.ES5,
        noEmitOnError: true,
        noImplicitAny: true,
        allowJs: true,
        declaration: true,
        emitDeclarationOnly: true,
    };
    const host = ts.createCompilerHost(options);
    host.writeFile = (fileName, contents) => (createdFiles[fileName] = contents);
    const program = ts.createProgram(sourceFiles, options, Object.assign(Object.assign({}, host), { getCurrentDirectory() {
            return cwd;
        }, directoryExists: ts.sys.directoryExists, fileExists: ts.sys.fileExists, readFile: ts.sys.readFile }));
    return program;
}
exports.createProgram = createProgram;
function wrapProgram(ts, program) {
    const files = new Map(); // file name -> content
    const fileVersions = new Map();
    const host = Object.assign(Object.assign({}, ts.sys), { useCaseSensitiveFileNames: () => ts.sys.useCaseSensitiveFileNames, getCompilationSettings: function () {
            return program.getCompilerOptions();
        }, getCurrentDirectory: function () {
            return program.getCurrentDirectory();
        }, getDefaultLibFileName: function (options) {
            return ts.getDefaultLibFilePath(options);
        }, getScriptFileNames: function () {
            return program.getSourceFiles().map(function (sf) {
                return sf.fileName;
            });
        }, getScriptSnapshot: function (name) {
            const file = files.get(name);
            if (file !== undefined) {
                return ts.ScriptSnapshot.fromString(file);
            }
            if (!program.getSourceFile(name)) {
                return undefined;
            }
            return ts.ScriptSnapshot.fromString(program.getSourceFile(name).getFullText());
        }, getScriptVersion: function (name) {
            const version = fileVersions.get(name);
            return version === undefined ? '' : String(version);
        }, getProjectVersion: function () {
            return '1';
        } });
    return host;
}
exports.wrapProgram = wrapProgram;
