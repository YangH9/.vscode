"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CanIUseHelper = void 0;
const canIUse_1 = require("@alipay/mini-extensions-shared/lib/data/canIUse");
const installer_1 = require("@alipay/mini-extensions-shared/lib/node/installer");
class CanIUseHelper {
    constructor(context) {
        this.context = context;
        this.canIUseData = canIUse_1.canIUse;
        this.getCurrentLevelCanIUseData = (data) => {
            const result = [];
            const overloadKeys = [];
            Object.keys(data).forEach((v) => {
                if (v.startsWith('#o')) {
                    overloadKeys.push(v);
                }
                else {
                    if (!v.startsWith('_')) {
                        result.push(v);
                    }
                }
            });
            overloadKeys.forEach((v) => {
                const d = data[v];
                if (d) {
                    result.push(...this.getCurrentLevelCanIUseData(d));
                }
            });
            return new Set(result);
        };
        this.getAllSubDatas = (key, data) => {
            const result = [];
            if (data[key]) {
                result.push(data[key]);
            }
            Object.keys(data).forEach((v) => {
                if (v.startsWith('#o')) {
                    // tmp 下面的 #oN 内部
                    const tmp = data[v];
                    if (tmp[key]) {
                        result.push(tmp[key]);
                    }
                }
            });
            return result;
        };
    }
    getCanIUseData() {
        return this.canIUseData;
    }
    updateCanIUseData(storagePath) {
        // canIUse 允许国际使用
        const tmp = (0, installer_1.getValidResourceSync)(storagePath, installer_1.ResourceName.MiniResources, installer_1.MiniResources.CanIUseJSON);
        if (tmp) {
            this.canIUseData = tmp;
            this.context.logger.info('use remote resource' + installer_1.MiniResources.CanIUseJSON);
            return;
        }
    }
    /**
     * 如果一个 . 都没有，直接返回 canIUse 的数据
     *
     * 用户输入了 ap.
     */
    getSubCanIUseData(userInput) {
        if (!userInput.includes('.')) {
            return this.getCurrentLevelCanIUseData(this.canIUseData);
        }
        console.log(`🚀 ~ file: getCompletionsAtPosition.ts:6 ~ getSubCanIUseData ~ userInput`, userInput);
        const parts = userInput.split('.');
        // 移除最后一次的 .
        parts.pop();
        const tmpParts = JSON.parse(JSON.stringify(parts));
        const queue = [this.canIUseData];
        while (tmpParts.length > 0) {
            const part = tmpParts[0];
            if (!part) {
                break;
            }
            const newQueue = [];
            while (queue.length > 0) {
                const tmp = queue.shift();
                const _queue = this.getAllSubDatas(part, tmp);
                newQueue.push(..._queue);
            }
            queue.push(...newQueue);
            tmpParts.shift();
        }
        const result = new Set();
        queue.forEach((tmp) => this.getCurrentLevelCanIUseData(tmp).forEach((v) => result.add(`${parts.join('.')}.${v}`)));
        return result;
    }
}
exports.CanIUseHelper = CanIUseHelper;
