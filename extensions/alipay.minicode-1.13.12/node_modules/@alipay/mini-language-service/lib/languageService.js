"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MiniLanguageService = void 0;
const getCompletionsAtPosition_1 = require("./services/getCompletionsAtPosition");
const getSuggestionDiagnostics_1 = require("./services/getSuggestionDiagnostics");
class MiniLanguageService {
    constructor(context) {
        this.context = context;
        this.getCompletionsAtPosition = (...params) => {
            return this.completionProvider.getCompletionsAtPosition(...params);
        };
        this.getSuggestionDiagnostics = (...params) => {
            return this.suggestionDiagnosticsProvider.getSuggestionDiagnostics(...params);
        };
        this.options = {};
        this.completionProvider = new getCompletionsAtPosition_1.GetCompletionsAtPositionProvider(context);
        this.suggestionDiagnosticsProvider = new getSuggestionDiagnostics_1.SuggestionDiagnosticsProvider(context);
        return new Proxy(this, {
            get(target, p, receiver) {
                if ([
                    'intercept',
                    'dispose',
                    'options',
                    'updateOptions',
                    'context',
                    'completionProvider',
                    'suggestionDiagnosticsProvider',
                ].includes(p)) {
                    return target[p].bind(target);
                }
                return target.intercept.bind(target, p);
            },
        });
    }
    intercept(method, ...params) {
        const fileName = params[0];
        this.context.logger.info(method + ' filename:' + fileName);
        if (fileName && typeof fileName === 'string' && fileName.endsWith('.sjs')) {
            return this.context.sjsLanguageService[method](...params);
        }
        else {
            if (method === 'getSuggestionDiagnostics') {
                return this.getSuggestionDiagnostics(params[0]);
            }
            if (method === 'getCompletionsAtPosition') {
                return this.getCompletionsAtPosition(params[0], params[1], params[2]);
            }
            return this.context.languageService[method](...params);
        }
    }
    dispose() {
        console.log(`ðŸš€ ~ file: languageService.ts:66 ~ MiniLanguageService ~ dispose ~ typeof this.context.dispose`, typeof this.context.dispose);
        this.context.dispose();
        this.completionProvider.dispose();
    }
    updateOptions(options) {
        this.options = options;
        if (options.globalStoragePath) {
            this.completionProvider.updateStoragePath(options.globalStoragePath);
        }
    }
}
exports.MiniLanguageService = MiniLanguageService;
